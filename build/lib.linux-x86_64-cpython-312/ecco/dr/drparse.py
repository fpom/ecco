"""
This module was generated by fastidious:

    /home/franck/.anaconda3/lib/python3.7/site-packages/fastidious-0.1.dev0-py3.7.egg/fastidious/__main__.py generate -o ./ecco/dr/drparse.py ecco.dr.dr_peg.DeerParser

DO NOT EDIT BY HAND unless you know what you do.

More info at https://github.com/lisael/fastidious
"""

import io, re
import sympy

from . import st

##
## insert IDENT/DEDENT tokens
##

_indent = re.compile(r"^\s*")

def indedent (text, indent="↦", dedent="↤") :
    "insert INDENT/DEDENT tokens into text"
    stack = [0]
    if isinstance(text, str) :
        src = io.StringIO(text)
    else :
        src = text
    out = io.StringIO()
    for i, line in enumerate(src) :
        if line.rstrip() :
            width = _indent.match(line).end()
            if width > stack[-1] :
                out.write(indent)
                stack.append(width)
            elif width < stack[-1] :
                while width < stack[-1] :
                    out.write(dedent)
                    stack.pop()
                if width != stack[-1] :
                    raise IndentationError("line %s" % (i+1))
        out.write(line)
    while stack[-1] > 0 :
        out.write(dedent)
        stack.pop()
    return out.getvalue()

##
## parser
##

def symlabels (labels=None) :
    if labels :
        return sympy.FiniteSet(*(sympy.Symbol(l) if isinstance(l, str) else l
                                 for l in labels))
    else :
        return sympy.EmptySet

import re

if not hasattr(__builtins__, 'basestring'):
    basestring = str


class _Expr:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            self.__dict__[k] = v


class DeerParser(object):
    __default__ = 'INPUT'
    class ParserError(Exception):
        pass

    __default__ = "INPUT"

    def __INIT__ (self) :
        self.locations = {}
        self.instances = {}

    __grammar__ = r"""
    INPUT  <- NL? :spec EOF {@spec}
    NL     <- (_ (~"#[^\n]*")? "\n" _)+  {_drop}
    AT     <- _ "@" _ {p_flatten}
    LP     <- _ "(" _ {p_flatten}
    RP     <- _ ")" _ {p_flatten}
    LSB    <- _ "[" _ {p_flatten}
    RSB    <- _ "]" _ {p_flatten}
    LCB    <- _ "{" _ {p_flatten}
    RCB    <- _ "}" _ {p_flatten}
    TILDA  <- _ "~" _ {p_flatten}
    STAR   <- _ "*" _ {p_flatten}
    COMMA  <- _ "," _ {p_flatten}
    COLON  <- _ ":" _ {_drop}
    INDENT <- _ "↦" NL? _ {_drop}
    DEDENT <- _ "↤" NL? _ {_drop}
    EOF    <- !.
    _      <- [\t ]* {_drop}
    NUMBER <- _ [+-]? _ [0-9]+ _
    NAME   <- _ [a-z]i ([a-z0-9_]i)* _ {p_flatten}
    """
    def _drop (self, match) :
        return ""
    def _list (self, match) :
        """callback to transform matched comma-separated lists
        <- item (COMMA item)*
        => [item, ...]
        """
        lst = []
        for m in match :
            if isinstance(m, list) :
                lst.extend(i[1] for i in m)
            else :
                lst.append(m)
        return lst
    def on_NUMBER (self, match) :
        return sympy.Integer(self.p_flatten(match))

    __grammar__ += """
    spec <- locations:(locdef+) instances:(instance+) :graph"""
    def on_spec (self, match, locations, instances, graph) :
        return st.Spec(locations=locations,
                       instances=instances,
                       graph=graph)

    __grammar__ += """
    locdef    <- AT name:NAME labels:(labels?) LP params:(params?) RP COLON NL
                INDENT location:location DEDENT
    location  <- variables:(vardef+) rules:(rule+)
    params    <- NAME (COMMA NAME)* {_list}
    labels    <- LCB lbl:(arguments?) RCB {@lbl}
    arguments <- arg (COMMA arg)* {_list}
    arg       <- NUMBER / NAME
    """
    def on_locdef (self, match, name, labels, params, location) :
        if name in self.locations :
            self.p_parse_error("location %r is already defined" % name, self.last_pos)
        loc = self.locations[name] = st.Location(name=name,
                                                 parameters=params,
                                                 labels=symlabels(labels),
                                                 **location)
        return loc
    def on_location (self, match, variables, rules) :
        return {"variables" : variables,
                "constraints" : [r for r in rules if isinstance(r, st.Constraint)],
                "rules" : [r for r in rules if not isinstance(r, st.Constraint)]}

    __grammar__ += """
    vardef     <- name:NAME bounds:(boundaries?) _ ":=" _ init:expr NL
    boundaries <- COLON lower:NUMBER _ ".." _ upper:NUMBER
    """
    def on_vardef (self, match, name, bounds, init) :
        if bounds :
            lower, upper = bounds
        else :
            lower, upper = 0, 1
        return st.Variable(name=name,
                           lower=lower,
                           upper=upper,
                           init=init)
    def on_boundaries (self, match, lower, upper) :
        return min(lower, upper), max(lower, upper)

    __grammar__ += """
    rule        <- :conditions _ priority:("=>" / "->") _ (:assignments) NL
    conditions  <- cond (COMMA cond)* {_list}
    cond        <- left:expr _ op:("==" / "<=" / ">=" / "<" / ">" / "!=") _ right:expr
    assignments <- assign (COMMA assign)* {_list}
    assign      <- target:variable _ op:("+=" / "-=" / ":=") _ expr:expr
    """
    def on_rule (self, match, conditions, priority, assignments) :
        if priority == "=>" :
            return st.Constraint(condition=conditions,
                                 assignment=assignments)
        else :
            return st.Rule(condition=conditions,
                           assignment=assignments)
    _cmpop = {
        "==" : sympy.Eq,
        "<=" : sympy.Le,
        ">=" : sympy.Ge,
        "<" : sympy.Lt,
        ">" : sympy.Gt,
        "!=" : lambda a, b: sympy.Not(sympy.Eq(a, b)),
    }
    def on_cond (self, match, left, op, right) :
        return self._cmpop[op](left, right)
    def on_assign (self, match, target, op, expr) :
        if op == "+=" :
            expr = sympy.Add(target, expr)
        elif op == "-=" :
            expr = sympy.Add(target, -expr)
        return sympy.Tuple(target, expr)

    __grammar__ += """
    variable <- name:NAME location:(atloc?) / LSB name:NAME AT forall:(neighbor+) RSB
    atloc    <- AT (name:NAME / path:(neighbor+))
    expr     <- first:term rest:([+-] term)*
    term     <- first:fact rest:([*/%] fact)* {on_expr}
    fact     <- (LP fact:expr RP) / fact:atom {@fact}
    atom     <- value:(NUMBER / variable) {@value}
    neighbor <- _ direction:[?!] _ edge:(lblmatch?) name:(NAME / STAR) loc:(lblmatch?)
    lblmatch <- LCB expr:lblexpr RCB {@expr}
    lblexpr  <- first:lblterm rest:(_ "|" _ lblterm)* {on_expr}
    lblterm  <- first:lblfact rest:(_ "&" _ lblterm)* {on_expr}
    lblfact  <- (TILDA neg:lblfact) / (LP sub:lblexpr RP) / atom:arg
    """
    def on_variable (self, match, name, location=None, forall=None) :
        if forall is not None :
            return sympy.Indexed(st._FORALOC, name, *forall)
        elif not location :
            return sympy.Indexed(st._THISLOC, name)
        elif isinstance(location, list) :
            return sympy.Indexed(st._NEXTLOC, name, *location)
        else :
            return sympy.Indexed(location, name)
    def on_atloc (self, match, name, path=None) :
        if path is None :
            return name
        else :
            return path
    def on_neighbor (self, match, direction, edge, name, loc) :
        if name == "*" :
            return sympy.Indexed(st.newstar(), direction == "?",
                                 edge or sympy.S.true, loc or sympy.S.true)
        else :
            return sympy.Indexed(name,  direction == "?",
                                 edge or sympy.S.true, loc or sympy.S.true)
    def on_lblfact (self, match, sub=None, neg=None, atom=None) :
        if neg is not None :
            return sympy.Not(neg)
        elif isinstance(atom, (int, sympy.Integer)) :
            return sympy.Symbol("CONST:%s" % atom)
        elif isinstance(atom, str) :
            return sympy.Symbol(atom)
        else :
            return sub
    _binop = {
        "+" : sympy.Add,
        "-" : lambda a, b: sympy.Add(a, -b),
        "*" : sympy.Mul,
        "/" : lambda a, b: sympy.Mul(a, b**-1),
        "%" : sympy.Mod,
        "|" : sympy.Or,
        "&" : sympy.And,
    }
    def on_expr (self, match, first, rest) :
        expr = first
        for op, tr in rest :
            expr = self._binop[op](expr, tr)
        return expr

    __grammar__ += """
    instance  <- name:NAME labels:(labels?) _ ":=" _ location:NAME
                 LP args:(arguments?) RP NL
    """
    def on_instance (self, match, name, labels, location, args) :
        if name in self.instances :
            self.p_parse_error("instance %r is already defined" % name, self.last_pos)
        elif location not in self.locations :
            self.p_parse_error("location %r is not defined" % location, self.last_pos)
        elif len(args) < len(self.locations[location].parameters) :
            self.p_parse_error("not enough arguments for instance %r of %r"
                               % (name, location), self.last_pos)
        elif len(args) > len(self.locations[location].parameters) :
            self.p_parse_error("too many arguments for instance %r of %r"
                               % (name, location), self.last_pos)
        inst = self.instances[name] = st.Instance(name=name,
                                                  location=location,
                                                  arguments=args,
                                                  labels=symlabels(labels))
        return inst

    __grammar__ += r"""
    graph <- first:subg rest:(edge? subg)*
    subg  <- __ node:NAME __ / __ "(" sub:graph ")" __
    edge  <- left:ARC labels:(arguments?) right:ARC
    ARC   <- __ arc:[<>] __ {@arc}
    __    <- ~"([ \t\n\r↦↤]*(#[^\n]*)?)*" {_drop}
    """
    def on_graph (self, match, first, rest) :
        graphs = [first] + [g for _, g in rest]
        g = st.Graph(graphs)
        for edge, (source, target) in zip([e for e, g in rest],
                                          zip(graphs, graphs[1:])) :
            if not edge :
                continue
            way, lbl = edge
            for src in source :
                for tgt in target :
                    if ">" in way :
                        old = g.edges.get((src, tgt), {}).get("labels", symlabels())
                        g.add_edge(src, tgt, labels=old | lbl)
                    if "<" in way :
                        old = g.edges.get((tgt, src), {}).get("labels", symlabels())
                        g.add_edge(tgt, src, labels=old | lbl)
        return g
    def on_subg (self, match, node=None, sub=None) :
        if sub is not None :
            return sub
        elif node not in self.instances :
            self.p_parse_error("instance %r is not defined" % node, self.last_pos)
        else :
            return st.Graph(node)
    def on_edge (self, match, left, labels, right) :
        return left+right, symlabels(labels)
    _p_py_constants = {599: {'regex': re.compile('#[^\n]*', 32)}, 1010: {'regex': re.compile('([ \t\n\r↦↤]*(#[^\n]*)?)*', 32)}}
    __memoize__ = True
    # __debug___ = True
    __debug___ = False
    __code_gen__ = True
    _p_action_classes = []

    class NoMatch(object):
        pass

    def __init__(self, input):
        self.input = input
        self.pos = 0
        self.last_pos = 0
        self.start = 0
        self.args_stack = {}
        self._debug_indent = 0
        self._p_savepoint_stack = []
        self._p_memoized = {}

        self._p_error_stack = [(0, 0)]
        if hasattr(self, "__INIT__"):
            self.__INIT__()

    def p_nomatch(self, id):
        head = self._p_error_stack[0]
        if self.pos <= head[0]:
            self._p_error_stack.append((self.pos, id))
        elif self.pos > head[0]:
            self._p_error_stack = [(self.pos, id)]

    def p_suffix(self, length=None, elipsis=False):
        "Return the rest of the input"
        if length is not None:
            result = self.input[self.pos:self.pos + length]
            if elipsis and len(result) == length:
                result += "..."
            return result
        return self.input[self.pos:]

    def p_debug(self, message):
        "Format and print debug messages"
        print("{}{} `{}`".format(self._debug_indent * " ",
                                 message, repr(self.p_suffix(10))))

    def p_peek(self):
        "return the next char, w/o consuming it"
        try:
            return self.input[self.pos]
        except IndexError:
            return None

    def p_next(self):
        "Consume and return the next char"
        try:
            self.pos += 1
            return self.input[self.pos - 1]
        except IndexError:
            self.pos -= 1
            return None

    def p_save(self):
        "Push a savepoint on the stack (internal use)"
        self._p_savepoint_stack.append((self.pos, self.start))

    def p_restore(self):
        """
        Pop a savepoint on the stack, and restore the parser state
        (internal use)
        """
        self.pos, self.start = self._p_savepoint_stack.pop()

    def p_discard(self):
        "Pop and forget a savepoint (internal use)"
        self.last_pos = self._p_savepoint_stack.pop()[0]

    def _p_get_line(self, pos):
        return self.input[:pos].count('\n') + 1

    @property
    def p_current_line(self):
        "Return current line number"
        return self._p_get_line(self.pos)

    @property
    def p_last_line(self):
        "Return last line number"
        return self._p_get_line(self.last_pos)

    def _p_get_col(self, pos):
        prefix = self.input[:pos]
        nlidx = prefix.rfind('\n')
        if nlidx == -1:
            return pos
        return pos - nlidx

    @property
    def p_current_col(self):
        "Return current column in line"
        return self._p_get_col(self.pos)

    @property
    def p_last_col(self):
        "Return last column in line"
        return self._p_get_col(self.last_pos)

    def p_pretty_pos(self, pos=None):
        "Print current line and a pretty cursor below. Used in error messages"
        if pos is None :
            pos = self.pos
        col = self._p_get_col(pos) - 1
        suffix = self.input[pos - col:]
        end = suffix.find("\n")
        if end != -1:
            suffix = suffix[:end]
        return "%s\n%s" % (suffix, "-" * col + "^")

    def p_parse_error(self, message, pos=None):
        if pos is None :
            pos = self.pos
        raise self.ParserError(
            "Error at line %s, col %s: %s" % (
                self._p_get_line(pos),
                self._p_get_col(pos) - 1,
                message
            )
        )

    def p_syntax_error(self, *expected):
        def prettify(i):
            if i.replace("_", "").isalnum():
                return i
            return "`%s`" % i
        expected = set(expected)
        expected = [prettify(item) for item in expected]
        expected = " or ".join(expected)
        raise self.ParserError(
            "Syntax error at line %s, col %s:"
            "\n\n%s\n\n"
            "Got `%s` expected %s "
            "" % (
                self.p_current_line,
                self.p_current_col - 1,
                self.p_pretty_pos(),
                self.p_suffix(10, elipsis=True).replace(
                    '\n', "\\n") or "EOF",
                expected)
        )

    def p_startswith(self, st, ignorecase=False):
        "Return True if the input starts with `st` at current position"
        length = len(st)
        matcher = result = self.input[self.pos:self.pos + length]
        if ignorecase:
            matcher = result.lower()
            st = st.lower()
        if matcher == st:
            self.pos += length
            return result
        return False

    def p_flatten(self, obj, **kwargs):
        """ Flatten a list of lists of lists... of strings into a string

        This is usually used as the action for sequence expressions:

        .. code-block::

            my_rule <- 'a' . 'c' {p_flatten}

        With the input "abc" and no action, this rule returns [ 'a', 'b', 'c'].
        { p_flatten } procuces "abc".

        >>> parser.p_flatten(['a', ['b', 'c']])
        'abc'

        """
        if isinstance(obj, basestring):
            return obj
        result = ""
        for i in obj:
            result += self.p_flatten(i)
        return result

    @classmethod
    def p_parse(cls, input, methodname=None, parse_all=True):
        """
        Parse the `input` using `methodname` as entry point.

        If `parse_all` is true, the input MUST be fully consumed at the end of
        the parsing, otherwise p_parse raises an exception.
        """
        if methodname is None:
            methodname = cls.__default__
        p = cls(input)
        result = getattr(p, methodname)()
        if result is cls.NoMatch or parse_all and p.p_peek() is not None:
            p.p_raise()
        return result

    def p_raise(self):
        expected = []
        current_pos = -1

        if self.__debug___:
            print(self._p_error_stack)

        # check aliased rules
        for pos, id in self._p_error_stack:
            if pos < current_pos:
                break
            try:
                expr = self._p_expressions[id]
            except KeyError:
                continue
            else:
                if expr.is_syntaxic_terminal:
                    current_pos = pos
                    expected += expr.expected

        # none found, fallback to default tips
        if not expected:
            current_pos = -1
            for pos, id in self._p_error_stack:
                if current_pos > -1 and pos < current_pos:
                    continue
                current_pos = pos
                try:
                    expr = self._p_expressions[id]
                except KeyError:
                    continue
                else:
                    if hasattr(expr, "expr") or hasattr(expr, "exprs"):
                        continue
                    expected += expr.expected
        self.pos = current_pos
        self.p_syntax_error(*expected)
    def INPUT(self):
        '''INPUT <- NL? spec:spec EOF'''
        args = dict()
        # NL? spec:spec EOF
        self.p_save()
        results_596 = []
        
        # NL?
        start_pos_591= self.pos
        if (3772247872116659244, start_pos_591) in self._p_memoized:
            result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
        else:
            result = self.NL()
            self._p_memoized[(3772247872116659244, start_pos_591)] = result, self.pos
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        if result is self.NoMatch:
            results_596 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 596))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 596)]
            # print self._p_error_stack
        else:
            results_596.append(result)
                            
            
            # spec:spec
            start_pos_593= self.pos
            if (2757285220996407587, start_pos_593) in self._p_memoized:
                result, self.pos = self._p_memoized[(2757285220996407587, self.pos)]
            else:
                result = self.spec()
                self._p_memoized[(2757285220996407587, start_pos_593)] = result, self.pos
            args['spec'] = result
            if result is self.NoMatch:
                results_596 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 596))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 596)]
                # print self._p_error_stack
            else:
                results_596.append(result)
                                
                
                start_pos_595= self.pos
                if (-2968727870842244246, start_pos_595) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-2968727870842244246, self.pos)]
                else:
                    result = self.EOF()
                    self._p_memoized[(-2968727870842244246, start_pos_595)] = result, self.pos
                if result is self.NoMatch:
                    results_596 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 596))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 596)]
                    # print self._p_error_stack
                else:
                    results_596.append(result)
                                    
        if results_596 is not self.NoMatch:
            self.p_discard()
        result = results_596
        if result is not self.NoMatch:
            result = args['spec']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 597))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 597)]
            # print self._p_error_stack
        return result

    def NL(self):
        '''NL <- ( _ ~\'#[^\n]*\'? "\n" _ )+'''
        args = dict()
        # ( _ ~'#[^\n]*'? "\n" _ )+
        self.p_save()
        results_604 = []
        while 42:
            # _ ~'#[^\n]*'? "\n" _
            self.p_save()
            results_603 = []
            
            start_pos_598= self.pos
            if (2971727902848045135, start_pos_598) in self._p_memoized:
                result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
            else:
                result = self._()
                self._p_memoized[(2971727902848045135, start_pos_598)] = result, self.pos
            if result is self.NoMatch:
                results_603 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 603))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 603)]
                # print self._p_error_stack
            else:
                results_603.append(result)
                                
                
                # ~'#[^\n]*'?
                # ~'#[^\n]*'
                regex = self._p_py_constants[599]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 599))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 599)]
                    # print self._p_error_stack
                    result = self.NoMatch
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_603 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 603))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 603)]
                    # print self._p_error_stack
                else:
                    results_603.append(result)
                                    
                    
                    # "\n"
                    result = self.p_startswith('\n', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 601))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 601)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_603 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 603))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 603)]
                        # print self._p_error_stack
                    else:
                        results_603.append(result)
                                        
                        
                        start_pos_602= self.pos
                        if (2971727902848045135, start_pos_602) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_602)] = result, self.pos
                        if result is self.NoMatch:
                            results_603 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 603))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 603)]
                            # print self._p_error_stack
                        else:
                            results_603.append(result)
                                            
            if results_603 is not self.NoMatch:
                self.p_discard()
            result = results_603
            if result is not self.NoMatch:
                results_604.append(result)
            else:
                break
        if not results_604:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 604))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 604)]
            # print self._p_error_stack
            result = self.NoMatch
        else:
            self.p_discard()
            result = results_604
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 605))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 605)]
            # print self._p_error_stack
        return result

    def AT(self):
        '''AT <- _ "@" _'''
        args = dict()
        # _ "@" _
        self.p_save()
        results_609 = []
        
        start_pos_606= self.pos
        if (2971727902848045135, start_pos_606) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_606)] = result, self.pos
        if result is self.NoMatch:
            results_609 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 609))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 609)]
            # print self._p_error_stack
        else:
            results_609.append(result)
                            
            
            # "@"
            result = self.p_startswith('@', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 607))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 607)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_609 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 609))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 609)]
                # print self._p_error_stack
            else:
                results_609.append(result)
                                
                
                start_pos_608= self.pos
                if (2971727902848045135, start_pos_608) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_608)] = result, self.pos
                if result is self.NoMatch:
                    results_609 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 609))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 609)]
                    # print self._p_error_stack
                else:
                    results_609.append(result)
                                    
        if results_609 is not self.NoMatch:
            self.p_discard()
        result = results_609
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 610))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 610)]
            # print self._p_error_stack
        return result

    def LP(self):
        '''LP <- _ "(" _'''
        args = dict()
        # _ "(" _
        self.p_save()
        results_614 = []
        
        start_pos_611= self.pos
        if (2971727902848045135, start_pos_611) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_611)] = result, self.pos
        if result is self.NoMatch:
            results_614 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 614))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 614)]
            # print self._p_error_stack
        else:
            results_614.append(result)
                            
            
            # "("
            result = self.p_startswith('(', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 612))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 612)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_614 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 614))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 614)]
                # print self._p_error_stack
            else:
                results_614.append(result)
                                
                
                start_pos_613= self.pos
                if (2971727902848045135, start_pos_613) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_613)] = result, self.pos
                if result is self.NoMatch:
                    results_614 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 614))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 614)]
                    # print self._p_error_stack
                else:
                    results_614.append(result)
                                    
        if results_614 is not self.NoMatch:
            self.p_discard()
        result = results_614
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 615))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 615)]
            # print self._p_error_stack
        return result

    def RP(self):
        '''RP <- _ ")" _'''
        args = dict()
        # _ ")" _
        self.p_save()
        results_619 = []
        
        start_pos_616= self.pos
        if (2971727902848045135, start_pos_616) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_616)] = result, self.pos
        if result is self.NoMatch:
            results_619 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 619))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 619)]
            # print self._p_error_stack
        else:
            results_619.append(result)
                            
            
            # ")"
            result = self.p_startswith(')', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 617))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 617)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_619 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 619))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 619)]
                # print self._p_error_stack
            else:
                results_619.append(result)
                                
                
                start_pos_618= self.pos
                if (2971727902848045135, start_pos_618) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_618)] = result, self.pos
                if result is self.NoMatch:
                    results_619 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 619))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 619)]
                    # print self._p_error_stack
                else:
                    results_619.append(result)
                                    
        if results_619 is not self.NoMatch:
            self.p_discard()
        result = results_619
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 620))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 620)]
            # print self._p_error_stack
        return result

    def LSB(self):
        '''LSB <- _ "[" _'''
        args = dict()
        # _ "[" _
        self.p_save()
        results_624 = []
        
        start_pos_621= self.pos
        if (2971727902848045135, start_pos_621) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_621)] = result, self.pos
        if result is self.NoMatch:
            results_624 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 624))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 624)]
            # print self._p_error_stack
        else:
            results_624.append(result)
                            
            
            # "["
            result = self.p_startswith('[', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 622))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 622)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_624 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 624))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 624)]
                # print self._p_error_stack
            else:
                results_624.append(result)
                                
                
                start_pos_623= self.pos
                if (2971727902848045135, start_pos_623) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_623)] = result, self.pos
                if result is self.NoMatch:
                    results_624 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 624))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 624)]
                    # print self._p_error_stack
                else:
                    results_624.append(result)
                                    
        if results_624 is not self.NoMatch:
            self.p_discard()
        result = results_624
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 625))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 625)]
            # print self._p_error_stack
        return result

    def RSB(self):
        '''RSB <- _ "]" _'''
        args = dict()
        # _ "]" _
        self.p_save()
        results_629 = []
        
        start_pos_626= self.pos
        if (2971727902848045135, start_pos_626) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_626)] = result, self.pos
        if result is self.NoMatch:
            results_629 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 629))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 629)]
            # print self._p_error_stack
        else:
            results_629.append(result)
                            
            
            # "]"
            result = self.p_startswith(']', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 627))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 627)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_629 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 629))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 629)]
                # print self._p_error_stack
            else:
                results_629.append(result)
                                
                
                start_pos_628= self.pos
                if (2971727902848045135, start_pos_628) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_628)] = result, self.pos
                if result is self.NoMatch:
                    results_629 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 629))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 629)]
                    # print self._p_error_stack
                else:
                    results_629.append(result)
                                    
        if results_629 is not self.NoMatch:
            self.p_discard()
        result = results_629
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 630))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 630)]
            # print self._p_error_stack
        return result

    def LCB(self):
        '''LCB <- _ "{" _'''
        args = dict()
        # _ "{" _
        self.p_save()
        results_634 = []
        
        start_pos_631= self.pos
        if (2971727902848045135, start_pos_631) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_631)] = result, self.pos
        if result is self.NoMatch:
            results_634 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 634))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 634)]
            # print self._p_error_stack
        else:
            results_634.append(result)
                            
            
            # "{"
            result = self.p_startswith('{', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 632))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 632)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_634 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 634))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 634)]
                # print self._p_error_stack
            else:
                results_634.append(result)
                                
                
                start_pos_633= self.pos
                if (2971727902848045135, start_pos_633) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_633)] = result, self.pos
                if result is self.NoMatch:
                    results_634 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 634))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 634)]
                    # print self._p_error_stack
                else:
                    results_634.append(result)
                                    
        if results_634 is not self.NoMatch:
            self.p_discard()
        result = results_634
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 635))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 635)]
            # print self._p_error_stack
        return result

    def RCB(self):
        '''RCB <- _ "}" _'''
        args = dict()
        # _ "}" _
        self.p_save()
        results_639 = []
        
        start_pos_636= self.pos
        if (2971727902848045135, start_pos_636) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_636)] = result, self.pos
        if result is self.NoMatch:
            results_639 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 639))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 639)]
            # print self._p_error_stack
        else:
            results_639.append(result)
                            
            
            # "}"
            result = self.p_startswith('}', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 637))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 637)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_639 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 639))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 639)]
                # print self._p_error_stack
            else:
                results_639.append(result)
                                
                
                start_pos_638= self.pos
                if (2971727902848045135, start_pos_638) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_638)] = result, self.pos
                if result is self.NoMatch:
                    results_639 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 639))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 639)]
                    # print self._p_error_stack
                else:
                    results_639.append(result)
                                    
        if results_639 is not self.NoMatch:
            self.p_discard()
        result = results_639
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 640))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 640)]
            # print self._p_error_stack
        return result

    def TILDA(self):
        '''TILDA <- _ "~" _'''
        args = dict()
        # _ "~" _
        self.p_save()
        results_644 = []
        
        start_pos_641= self.pos
        if (2971727902848045135, start_pos_641) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_641)] = result, self.pos
        if result is self.NoMatch:
            results_644 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 644))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 644)]
            # print self._p_error_stack
        else:
            results_644.append(result)
                            
            
            # "~"
            result = self.p_startswith('~', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 642))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 642)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_644 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 644))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 644)]
                # print self._p_error_stack
            else:
                results_644.append(result)
                                
                
                start_pos_643= self.pos
                if (2971727902848045135, start_pos_643) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_643)] = result, self.pos
                if result is self.NoMatch:
                    results_644 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 644))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 644)]
                    # print self._p_error_stack
                else:
                    results_644.append(result)
                                    
        if results_644 is not self.NoMatch:
            self.p_discard()
        result = results_644
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 645))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 645)]
            # print self._p_error_stack
        return result

    def STAR(self):
        '''STAR <- _ "*" _'''
        args = dict()
        # _ "*" _
        self.p_save()
        results_649 = []
        
        start_pos_646= self.pos
        if (2971727902848045135, start_pos_646) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_646)] = result, self.pos
        if result is self.NoMatch:
            results_649 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 649))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 649)]
            # print self._p_error_stack
        else:
            results_649.append(result)
                            
            
            # "*"
            result = self.p_startswith('*', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 647))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 647)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_649 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 649))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 649)]
                # print self._p_error_stack
            else:
                results_649.append(result)
                                
                
                start_pos_648= self.pos
                if (2971727902848045135, start_pos_648) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_648)] = result, self.pos
                if result is self.NoMatch:
                    results_649 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 649))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 649)]
                    # print self._p_error_stack
                else:
                    results_649.append(result)
                                    
        if results_649 is not self.NoMatch:
            self.p_discard()
        result = results_649
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 650))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 650)]
            # print self._p_error_stack
        return result

    def COMMA(self):
        '''COMMA <- _ "," _'''
        args = dict()
        # _ "," _
        self.p_save()
        results_654 = []
        
        start_pos_651= self.pos
        if (2971727902848045135, start_pos_651) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_651)] = result, self.pos
        if result is self.NoMatch:
            results_654 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 654))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 654)]
            # print self._p_error_stack
        else:
            results_654.append(result)
                            
            
            # ","
            result = self.p_startswith(',', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 652))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 652)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_654 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 654))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 654)]
                # print self._p_error_stack
            else:
                results_654.append(result)
                                
                
                start_pos_653= self.pos
                if (2971727902848045135, start_pos_653) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_653)] = result, self.pos
                if result is self.NoMatch:
                    results_654 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 654))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 654)]
                    # print self._p_error_stack
                else:
                    results_654.append(result)
                                    
        if results_654 is not self.NoMatch:
            self.p_discard()
        result = results_654
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 655))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 655)]
            # print self._p_error_stack
        return result

    def COLON(self):
        '''COLON <- _ ":" _'''
        args = dict()
        # _ ":" _
        self.p_save()
        results_659 = []
        
        start_pos_656= self.pos
        if (2971727902848045135, start_pos_656) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_656)] = result, self.pos
        if result is self.NoMatch:
            results_659 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 659))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 659)]
            # print self._p_error_stack
        else:
            results_659.append(result)
                            
            
            # ":"
            result = self.p_startswith(':', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 657))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 657)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_659 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 659))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 659)]
                # print self._p_error_stack
            else:
                results_659.append(result)
                                
                
                start_pos_658= self.pos
                if (2971727902848045135, start_pos_658) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_658)] = result, self.pos
                if result is self.NoMatch:
                    results_659 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 659))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 659)]
                    # print self._p_error_stack
                else:
                    results_659.append(result)
                                    
        if results_659 is not self.NoMatch:
            self.p_discard()
        result = results_659
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 660))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 660)]
            # print self._p_error_stack
        return result

    def INDENT(self):
        '''INDENT <- _ "↦" NL? _'''
        args = dict()
        # _ "↦" NL? _
        self.p_save()
        results_666 = []
        
        start_pos_661= self.pos
        if (2971727902848045135, start_pos_661) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_661)] = result, self.pos
        if result is self.NoMatch:
            results_666 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 666))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 666)]
            # print self._p_error_stack
        else:
            results_666.append(result)
                            
            
            # "↦"
            result = self.p_startswith('↦', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 662))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 662)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_666 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 666))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 666)]
                # print self._p_error_stack
            else:
                results_666.append(result)
                                
                
                # NL?
                start_pos_663= self.pos
                if (3772247872116659244, start_pos_663) in self._p_memoized:
                    result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(3772247872116659244, start_pos_663)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_666 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 666))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 666)]
                    # print self._p_error_stack
                else:
                    results_666.append(result)
                                    
                    
                    start_pos_665= self.pos
                    if (2971727902848045135, start_pos_665) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_665)] = result, self.pos
                    if result is self.NoMatch:
                        results_666 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 666))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 666)]
                        # print self._p_error_stack
                    else:
                        results_666.append(result)
                                        
        if results_666 is not self.NoMatch:
            self.p_discard()
        result = results_666
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 667))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 667)]
            # print self._p_error_stack
        return result

    def DEDENT(self):
        '''DEDENT <- _ "↤" NL? _'''
        args = dict()
        # _ "↤" NL? _
        self.p_save()
        results_673 = []
        
        start_pos_668= self.pos
        if (2971727902848045135, start_pos_668) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_668)] = result, self.pos
        if result is self.NoMatch:
            results_673 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 673))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 673)]
            # print self._p_error_stack
        else:
            results_673.append(result)
                            
            
            # "↤"
            result = self.p_startswith('↤', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 669))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 669)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_673 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 673))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 673)]
                # print self._p_error_stack
            else:
                results_673.append(result)
                                
                
                # NL?
                start_pos_670= self.pos
                if (3772247872116659244, start_pos_670) in self._p_memoized:
                    result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(3772247872116659244, start_pos_670)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_673 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 673))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 673)]
                    # print self._p_error_stack
                else:
                    results_673.append(result)
                                    
                    
                    start_pos_672= self.pos
                    if (2971727902848045135, start_pos_672) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_672)] = result, self.pos
                    if result is self.NoMatch:
                        results_673 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 673))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 673)]
                        # print self._p_error_stack
                    else:
                        results_673.append(result)
                                        
        if results_673 is not self.NoMatch:
            self.p_discard()
        result = results_673
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 674))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 674)]
            # print self._p_error_stack
        return result

    def EOF(self):
        '''EOF <- !.'''
        args = dict()
        # !.
        self.p_save()
        # .
        self.p_save()
        n = self.p_next()
        if n is not None:
            self.p_discard()
            result = n
        else:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 675))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 675)]
            # print self._p_error_stack
            result = self.NoMatch
        result = "" if result is self.NoMatch else self.NoMatch
        self.p_restore()
        if result is self.NoMatch:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 676))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 676)]
            # print self._p_error_stack
        #else:
            #print self._p_error_stack
            #self._p_error_stack.pop()
        if result is not self.NoMatch:
            pass
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 677))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 677)]
            # print self._p_error_stack
        return result

    def _(self):
        '''_ <- [\t ]*'''
        args = dict()
        # [\t ]*
        results_679 = []
        while 42:
            # [\t ]
            self.p_save()
            n = self.p_next()
            if n is not None and n in '\t ':
                self.p_discard()
                result = n
            else:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 678))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 678)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is not self.NoMatch:
                results_679.append(result)
            else:
                break
        # print self._p_error_stack
        result = "".join(results_679)
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 680))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 680)]
            # print self._p_error_stack
        return result

    def NUMBER(self):
        '''NUMBER <- _ [+-]? _ [0-9]+ _'''
        args = dict()
        # _ [+-]? _ [0-9]+ _
        self.p_save()
        results_688 = []
        
        start_pos_681= self.pos
        if (2971727902848045135, start_pos_681) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_681)] = result, self.pos
        if result is self.NoMatch:
            results_688 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 688))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 688)]
            # print self._p_error_stack
        else:
            results_688.append(result)
                            
            
            # [+-]?
            # [+-]
            self.p_save()
            n = self.p_next()
            if n is not None and n in '+-':
                self.p_discard()
                result = n
            else:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 682))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 682)]
                # print self._p_error_stack
                result = self.NoMatch
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            if result is self.NoMatch:
                results_688 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 688))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 688)]
                # print self._p_error_stack
            else:
                results_688.append(result)
                                
                
                start_pos_684= self.pos
                if (2971727902848045135, start_pos_684) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_684)] = result, self.pos
                if result is self.NoMatch:
                    results_688 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 688))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 688)]
                    # print self._p_error_stack
                else:
                    results_688.append(result)
                                    
                    
                    # [0-9]+
                    self.p_save()
                    results_686 = []
                    while 42:
                        # [0-9]
                        self.p_save()
                        n = self.p_next()
                        if n is not None and n in '0123456789':
                            self.p_discard()
                            result = n
                        else:
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 685))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 685)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is not self.NoMatch:
                            results_686.append(result)
                        else:
                            break
                    if not results_686:
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 686))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 686)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    else:
                        self.p_discard()
                        result = "".join(results_686)
                    if result is self.NoMatch:
                        results_688 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 688))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 688)]
                        # print self._p_error_stack
                    else:
                        results_688.append(result)
                                        
                        
                        start_pos_687= self.pos
                        if (2971727902848045135, start_pos_687) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_687)] = result, self.pos
                        if result is self.NoMatch:
                            results_688 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 688))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 688)]
                            # print self._p_error_stack
                        else:
                            results_688.append(result)
                                            
        if results_688 is not self.NoMatch:
            self.p_discard()
        result = results_688
        if result is not self.NoMatch:
            result = self.on_NUMBER(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 689))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 689)]
            # print self._p_error_stack
        return result

    def NAME(self):
        '''NAME <- _ [a-zA-Z] [a-z0-9_A-Z]* _'''
        args = dict()
        # _ [a-zA-Z] [a-z0-9_A-Z]* _
        self.p_save()
        results_695 = []
        
        start_pos_690= self.pos
        if (2971727902848045135, start_pos_690) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_690)] = result, self.pos
        if result is self.NoMatch:
            results_695 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 695))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 695)]
            # print self._p_error_stack
        else:
            results_695.append(result)
                            
            
            # [a-zA-Z]
            self.p_save()
            n = self.p_next()
            if n is not None and n in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':
                self.p_discard()
                result = n
            else:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 691))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 691)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_695 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 695))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 695)]
                # print self._p_error_stack
            else:
                results_695.append(result)
                                
                
                # [a-z0-9_A-Z]*
                results_693 = []
                while 42:
                    # [a-z0-9_A-Z]
                    self.p_save()
                    n = self.p_next()
                    if n is not None and n in 'abcdefghijklmnopqrstuvwxyz0123456789_ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                        self.p_discard()
                        result = n
                    else:
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 692))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 692)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is not self.NoMatch:
                        results_693.append(result)
                    else:
                        break
                # print self._p_error_stack
                result = "".join(results_693)
                if result is self.NoMatch:
                    results_695 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 695))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 695)]
                    # print self._p_error_stack
                else:
                    results_695.append(result)
                                    
                    
                    start_pos_694= self.pos
                    if (2971727902848045135, start_pos_694) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_694)] = result, self.pos
                    if result is self.NoMatch:
                        results_695 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 695))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 695)]
                        # print self._p_error_stack
                    else:
                        results_695.append(result)
                                        
        if results_695 is not self.NoMatch:
            self.p_discard()
        result = results_695
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 696))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 696)]
            # print self._p_error_stack
        return result

    def spec(self):
        '''spec <- locations:locdef+ instances:instance+ graph:graph'''
        args = dict()
        # locations:locdef+ instances:instance+ graph:graph
        self.p_save()
        results_705 = []
        
        # locations:locdef+
        # locdef+
        self.p_save()
        results_698 = []
        while 42:
            start_pos_697= self.pos
            if (-619837648150202116, start_pos_697) in self._p_memoized:
                result, self.pos = self._p_memoized[(-619837648150202116, self.pos)]
            else:
                result = self.locdef()
                self._p_memoized[(-619837648150202116, start_pos_697)] = result, self.pos
            if result is not self.NoMatch:
                results_698.append(result)
            else:
                break
        if not results_698:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 698))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 698)]
            # print self._p_error_stack
            result = self.NoMatch
        else:
            self.p_discard()
            result = results_698
        args['locations'] = result
        if result is self.NoMatch:
            results_705 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 705))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 705)]
            # print self._p_error_stack
        else:
            results_705.append(result)
                            
            
            # instances:instance+
            # instance+
            self.p_save()
            results_701 = []
            while 42:
                start_pos_700= self.pos
                if (4446000243573566883, start_pos_700) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4446000243573566883, self.pos)]
                else:
                    result = self.instance()
                    self._p_memoized[(4446000243573566883, start_pos_700)] = result, self.pos
                if result is not self.NoMatch:
                    results_701.append(result)
                else:
                    break
            if not results_701:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 701))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 701)]
                # print self._p_error_stack
                result = self.NoMatch
            else:
                self.p_discard()
                result = results_701
            args['instances'] = result
            if result is self.NoMatch:
                results_705 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 705))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 705)]
                # print self._p_error_stack
            else:
                results_705.append(result)
                                
                
                # graph:graph
                start_pos_703= self.pos
                if (-5581319625009503278, start_pos_703) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-5581319625009503278, self.pos)]
                else:
                    result = self.graph()
                    self._p_memoized[(-5581319625009503278, start_pos_703)] = result, self.pos
                args['graph'] = result
                if result is self.NoMatch:
                    results_705 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 705))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 705)]
                    # print self._p_error_stack
                else:
                    results_705.append(result)
                                    
        if results_705 is not self.NoMatch:
            self.p_discard()
        result = results_705
        if result is not self.NoMatch:
            result = self.on_spec(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 706))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 706)]
            # print self._p_error_stack
        return result

    def locdef(self):
        '''locdef <- AT name:NAME labels:labels? LP params:params? RP COLON NL INDENT location:location DEDENT'''
        args = dict()
        # AT name:NAME labels:labels? LP params:params? RP COLON NL INDENT location:location DEDENT
        self.p_save()
        results_724 = []
        
        start_pos_707= self.pos
        if (-6306554157512010221, start_pos_707) in self._p_memoized:
            result, self.pos = self._p_memoized[(-6306554157512010221, self.pos)]
        else:
            result = self.AT()
            self._p_memoized[(-6306554157512010221, start_pos_707)] = result, self.pos
        if result is self.NoMatch:
            results_724 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 724))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 724)]
            # print self._p_error_stack
        else:
            results_724.append(result)
                            
            
            # name:NAME
            start_pos_708= self.pos
            if (-1978311826809070106, start_pos_708) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(-1978311826809070106, start_pos_708)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                results_724 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 724))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 724)]
                # print self._p_error_stack
            else:
                results_724.append(result)
                                
                
                # labels:labels?
                # labels?
                start_pos_710= self.pos
                if (-6981456540114072987, start_pos_710) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-6981456540114072987, self.pos)]
                else:
                    result = self.labels()
                    self._p_memoized[(-6981456540114072987, start_pos_710)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['labels'] = result
                if result is self.NoMatch:
                    results_724 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 724))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 724)]
                    # print self._p_error_stack
                else:
                    results_724.append(result)
                                    
                    
                    start_pos_713= self.pos
                    if (7797922490082766067, start_pos_713) in self._p_memoized:
                        result, self.pos = self._p_memoized[(7797922490082766067, self.pos)]
                    else:
                        result = self.LP()
                        self._p_memoized[(7797922490082766067, start_pos_713)] = result, self.pos
                    if result is self.NoMatch:
                        results_724 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 724))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 724)]
                        # print self._p_error_stack
                    else:
                        results_724.append(result)
                                        
                        
                        # params:params?
                        # params?
                        start_pos_714= self.pos
                        if (2209971454398096834, start_pos_714) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2209971454398096834, self.pos)]
                        else:
                            result = self.params()
                            self._p_memoized[(2209971454398096834, start_pos_714)] = result, self.pos
                        result = "" if result is self.NoMatch else result
                        if result is self.NoMatch:
                            # print self._p_error_stack
                            self._p_error_stack.pop()
                        args['params'] = result
                        if result is self.NoMatch:
                            results_724 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 724))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 724)]
                            # print self._p_error_stack
                        else:
                            results_724.append(result)
                                            
                            
                            start_pos_717= self.pos
                            if (-1930047963851462698, start_pos_717) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-1930047963851462698, self.pos)]
                            else:
                                result = self.RP()
                                self._p_memoized[(-1930047963851462698, start_pos_717)] = result, self.pos
                            if result is self.NoMatch:
                                results_724 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 724))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 724)]
                                # print self._p_error_stack
                            else:
                                results_724.append(result)
                                                
                                
                                start_pos_718= self.pos
                                if (7309281562612056756, start_pos_718) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(7309281562612056756, self.pos)]
                                else:
                                    result = self.COLON()
                                    self._p_memoized[(7309281562612056756, start_pos_718)] = result, self.pos
                                if result is self.NoMatch:
                                    results_724 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 724))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 724)]
                                    # print self._p_error_stack
                                else:
                                    results_724.append(result)
                                                    
                                    
                                    start_pos_719= self.pos
                                    if (3772247872116659244, start_pos_719) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                                    else:
                                        result = self.NL()
                                        self._p_memoized[(3772247872116659244, start_pos_719)] = result, self.pos
                                    if result is self.NoMatch:
                                        results_724 = self.NoMatch
                                        self.p_restore()
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 724))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 724)]
                                        # print self._p_error_stack
                                    else:
                                        results_724.append(result)
                                                        
                                        
                                        start_pos_720= self.pos
                                        if (-6993688379785020649, start_pos_720) in self._p_memoized:
                                            result, self.pos = self._p_memoized[(-6993688379785020649, self.pos)]
                                        else:
                                            result = self.INDENT()
                                            self._p_memoized[(-6993688379785020649, start_pos_720)] = result, self.pos
                                        if result is self.NoMatch:
                                            results_724 = self.NoMatch
                                            self.p_restore()
                                            if self._p_error_stack:
                                                head = self._p_error_stack[0]
                                            else:
                                                head = (0, 0)
                                            if self.pos <= head[0]:
                                                self._p_error_stack.append((self.pos, 724))
                                            elif self.pos > head[0]:
                                                self._p_error_stack = [(self.pos, 724)]
                                            # print self._p_error_stack
                                        else:
                                            results_724.append(result)
                                                            
                                            
                                            # location:location
                                            start_pos_721= self.pos
                                            if (8665009247730049271, start_pos_721) in self._p_memoized:
                                                result, self.pos = self._p_memoized[(8665009247730049271, self.pos)]
                                            else:
                                                result = self.location()
                                                self._p_memoized[(8665009247730049271, start_pos_721)] = result, self.pos
                                            args['location'] = result
                                            if result is self.NoMatch:
                                                results_724 = self.NoMatch
                                                self.p_restore()
                                                if self._p_error_stack:
                                                    head = self._p_error_stack[0]
                                                else:
                                                    head = (0, 0)
                                                if self.pos <= head[0]:
                                                    self._p_error_stack.append((self.pos, 724))
                                                elif self.pos > head[0]:
                                                    self._p_error_stack = [(self.pos, 724)]
                                                # print self._p_error_stack
                                            else:
                                                results_724.append(result)
                                                                
                                                
                                                start_pos_723= self.pos
                                                if (-461972061461640020, start_pos_723) in self._p_memoized:
                                                    result, self.pos = self._p_memoized[(-461972061461640020, self.pos)]
                                                else:
                                                    result = self.DEDENT()
                                                    self._p_memoized[(-461972061461640020, start_pos_723)] = result, self.pos
                                                if result is self.NoMatch:
                                                    results_724 = self.NoMatch
                                                    self.p_restore()
                                                    if self._p_error_stack:
                                                        head = self._p_error_stack[0]
                                                    else:
                                                        head = (0, 0)
                                                    if self.pos <= head[0]:
                                                        self._p_error_stack.append((self.pos, 724))
                                                    elif self.pos > head[0]:
                                                        self._p_error_stack = [(self.pos, 724)]
                                                    # print self._p_error_stack
                                                else:
                                                    results_724.append(result)
                                                                    
        if results_724 is not self.NoMatch:
            self.p_discard()
        result = results_724
        if result is not self.NoMatch:
            result = self.on_locdef(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 725))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 725)]
            # print self._p_error_stack
        return result

    def location(self):
        '''location <- variables:vardef+ rules:rule+'''
        args = dict()
        # variables:vardef+ rules:rule+
        self.p_save()
        results_732 = []
        
        # variables:vardef+
        # vardef+
        self.p_save()
        results_727 = []
        while 42:
            start_pos_726= self.pos
            if (-1421137026972066959, start_pos_726) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1421137026972066959, self.pos)]
            else:
                result = self.vardef()
                self._p_memoized[(-1421137026972066959, start_pos_726)] = result, self.pos
            if result is not self.NoMatch:
                results_727.append(result)
            else:
                break
        if not results_727:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 727))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 727)]
            # print self._p_error_stack
            result = self.NoMatch
        else:
            self.p_discard()
            result = results_727
        args['variables'] = result
        if result is self.NoMatch:
            results_732 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 732))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 732)]
            # print self._p_error_stack
        else:
            results_732.append(result)
                            
            
            # rules:rule+
            # rule+
            self.p_save()
            results_730 = []
            while 42:
                start_pos_729= self.pos
                if (8222678222898477094, start_pos_729) in self._p_memoized:
                    result, self.pos = self._p_memoized[(8222678222898477094, self.pos)]
                else:
                    result = self.rule()
                    self._p_memoized[(8222678222898477094, start_pos_729)] = result, self.pos
                if result is not self.NoMatch:
                    results_730.append(result)
                else:
                    break
            if not results_730:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 730))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 730)]
                # print self._p_error_stack
                result = self.NoMatch
            else:
                self.p_discard()
                result = results_730
            args['rules'] = result
            if result is self.NoMatch:
                results_732 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 732))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 732)]
                # print self._p_error_stack
            else:
                results_732.append(result)
                                
        if results_732 is not self.NoMatch:
            self.p_discard()
        result = results_732
        if result is not self.NoMatch:
            result = self.on_location(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 733))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 733)]
            # print self._p_error_stack
        return result

    def params(self):
        '''params <- NAME ( COMMA NAME )*'''
        args = dict()
        # NAME ( COMMA NAME )*
        self.p_save()
        results_739 = []
        
        start_pos_734= self.pos
        if (-1978311826809070106, start_pos_734) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(-1978311826809070106, start_pos_734)] = result, self.pos
        if result is self.NoMatch:
            results_739 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 739))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 739)]
            # print self._p_error_stack
        else:
            results_739.append(result)
                            
            
            # ( COMMA NAME )*
            results_738 = []
            while 42:
                # COMMA NAME
                self.p_save()
                results_737 = []
                
                start_pos_735= self.pos
                if (4338665788796096863, start_pos_735) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4338665788796096863, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(4338665788796096863, start_pos_735)] = result, self.pos
                if result is self.NoMatch:
                    results_737 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 737))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 737)]
                    # print self._p_error_stack
                else:
                    results_737.append(result)
                                    
                    
                    start_pos_736= self.pos
                    if (-1978311826809070106, start_pos_736) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
                    else:
                        result = self.NAME()
                        self._p_memoized[(-1978311826809070106, start_pos_736)] = result, self.pos
                    if result is self.NoMatch:
                        results_737 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 737))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 737)]
                        # print self._p_error_stack
                    else:
                        results_737.append(result)
                                        
                if results_737 is not self.NoMatch:
                    self.p_discard()
                result = results_737
                if result is not self.NoMatch:
                    results_738.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_738
            if result is self.NoMatch:
                results_739 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 739))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 739)]
                # print self._p_error_stack
            else:
                results_739.append(result)
                                
        if results_739 is not self.NoMatch:
            self.p_discard()
        result = results_739
        if result is not self.NoMatch:
            result = self._list(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 740))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 740)]
            # print self._p_error_stack
        return result

    def labels(self):
        '''labels <- LCB lbl:arguments? RCB'''
        args = dict()
        # LCB lbl:arguments? RCB
        self.p_save()
        results_746 = []
        
        start_pos_741= self.pos
        if (1476585927995302714, start_pos_741) in self._p_memoized:
            result, self.pos = self._p_memoized[(1476585927995302714, self.pos)]
        else:
            result = self.LCB()
            self._p_memoized[(1476585927995302714, start_pos_741)] = result, self.pos
        if result is self.NoMatch:
            results_746 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 746))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 746)]
            # print self._p_error_stack
        else:
            results_746.append(result)
                            
            
            # lbl:arguments?
            # arguments?
            start_pos_742= self.pos
            if (-5835334544454164282, start_pos_742) in self._p_memoized:
                result, self.pos = self._p_memoized[(-5835334544454164282, self.pos)]
            else:
                result = self.arguments()
                self._p_memoized[(-5835334544454164282, start_pos_742)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['lbl'] = result
            if result is self.NoMatch:
                results_746 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 746))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 746)]
                # print self._p_error_stack
            else:
                results_746.append(result)
                                
                
                start_pos_745= self.pos
                if (-6923352805317367035, start_pos_745) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-6923352805317367035, self.pos)]
                else:
                    result = self.RCB()
                    self._p_memoized[(-6923352805317367035, start_pos_745)] = result, self.pos
                if result is self.NoMatch:
                    results_746 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 746))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 746)]
                    # print self._p_error_stack
                else:
                    results_746.append(result)
                                    
        if results_746 is not self.NoMatch:
            self.p_discard()
        result = results_746
        if result is not self.NoMatch:
            result = args['lbl']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 747))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 747)]
            # print self._p_error_stack
        return result

    def arguments(self):
        '''arguments <- arg ( COMMA arg )*'''
        args = dict()
        # arg ( COMMA arg )*
        self.p_save()
        results_753 = []
        
        start_pos_748= self.pos
        if (7114169547052773328, start_pos_748) in self._p_memoized:
            result, self.pos = self._p_memoized[(7114169547052773328, self.pos)]
        else:
            result = self.arg()
            self._p_memoized[(7114169547052773328, start_pos_748)] = result, self.pos
        if result is self.NoMatch:
            results_753 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 753))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 753)]
            # print self._p_error_stack
        else:
            results_753.append(result)
                            
            
            # ( COMMA arg )*
            results_752 = []
            while 42:
                # COMMA arg
                self.p_save()
                results_751 = []
                
                start_pos_749= self.pos
                if (4338665788796096863, start_pos_749) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4338665788796096863, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(4338665788796096863, start_pos_749)] = result, self.pos
                if result is self.NoMatch:
                    results_751 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 751))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 751)]
                    # print self._p_error_stack
                else:
                    results_751.append(result)
                                    
                    
                    start_pos_750= self.pos
                    if (7114169547052773328, start_pos_750) in self._p_memoized:
                        result, self.pos = self._p_memoized[(7114169547052773328, self.pos)]
                    else:
                        result = self.arg()
                        self._p_memoized[(7114169547052773328, start_pos_750)] = result, self.pos
                    if result is self.NoMatch:
                        results_751 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 751))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 751)]
                        # print self._p_error_stack
                    else:
                        results_751.append(result)
                                        
                if results_751 is not self.NoMatch:
                    self.p_discard()
                result = results_751
                if result is not self.NoMatch:
                    results_752.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_752
            if result is self.NoMatch:
                results_753 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 753))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 753)]
                # print self._p_error_stack
            else:
                results_753.append(result)
                                
        if results_753 is not self.NoMatch:
            self.p_discard()
        result = results_753
        if result is not self.NoMatch:
            result = self._list(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 754))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 754)]
            # print self._p_error_stack
        return result

    def arg(self):
        '''arg <- NUMBER / NAME'''
        args = dict()
        # NUMBER / NAME
        self.p_save()
        start_pos_755= self.pos
        if (-5951876934190571884, start_pos_755) in self._p_memoized:
            result, self.pos = self._p_memoized[(-5951876934190571884, self.pos)]
        else:
            result = self.NUMBER()
            self._p_memoized[(-5951876934190571884, start_pos_755)] = result, self.pos
        if result is self.NoMatch:
            start_pos_756= self.pos
            if (-1978311826809070106, start_pos_756) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(-1978311826809070106, start_pos_756)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 757))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 757)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            pass
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 758))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 758)]
            # print self._p_error_stack
        return result

    def vardef(self):
        '''vardef <- name:NAME bounds:boundaries? _ ":=" _ init:expr NL'''
        args = dict()
        # name:NAME bounds:boundaries? _ ":=" _ init:expr NL
        self.p_save()
        results_770 = []
        
        # name:NAME
        start_pos_759= self.pos
        if (-1978311826809070106, start_pos_759) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(-1978311826809070106, start_pos_759)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            results_770 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 770))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 770)]
            # print self._p_error_stack
        else:
            results_770.append(result)
                            
            
            # bounds:boundaries?
            # boundaries?
            start_pos_761= self.pos
            if (-3723560920100313647, start_pos_761) in self._p_memoized:
                result, self.pos = self._p_memoized[(-3723560920100313647, self.pos)]
            else:
                result = self.boundaries()
                self._p_memoized[(-3723560920100313647, start_pos_761)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['bounds'] = result
            if result is self.NoMatch:
                results_770 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 770))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 770)]
                # print self._p_error_stack
            else:
                results_770.append(result)
                                
                
                start_pos_764= self.pos
                if (2971727902848045135, start_pos_764) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_764)] = result, self.pos
                if result is self.NoMatch:
                    results_770 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 770))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 770)]
                    # print self._p_error_stack
                else:
                    results_770.append(result)
                                    
                    
                    # ":="
                    result = self.p_startswith(':=', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 765))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 765)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_770 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 770))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 770)]
                        # print self._p_error_stack
                    else:
                        results_770.append(result)
                                        
                        
                        start_pos_766= self.pos
                        if (2971727902848045135, start_pos_766) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_766)] = result, self.pos
                        if result is self.NoMatch:
                            results_770 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 770))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 770)]
                            # print self._p_error_stack
                        else:
                            results_770.append(result)
                                            
                            
                            # init:expr
                            start_pos_767= self.pos
                            if (-5464203869755766909, start_pos_767) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-5464203869755766909, self.pos)]
                            else:
                                result = self.expr()
                                self._p_memoized[(-5464203869755766909, start_pos_767)] = result, self.pos
                            args['init'] = result
                            if result is self.NoMatch:
                                results_770 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 770))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 770)]
                                # print self._p_error_stack
                            else:
                                results_770.append(result)
                                                
                                
                                start_pos_769= self.pos
                                if (3772247872116659244, start_pos_769) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                                else:
                                    result = self.NL()
                                    self._p_memoized[(3772247872116659244, start_pos_769)] = result, self.pos
                                if result is self.NoMatch:
                                    results_770 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 770))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 770)]
                                    # print self._p_error_stack
                                else:
                                    results_770.append(result)
                                                    
        if results_770 is not self.NoMatch:
            self.p_discard()
        result = results_770
        if result is not self.NoMatch:
            result = self.on_vardef(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 771))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 771)]
            # print self._p_error_stack
        return result

    def boundaries(self):
        '''boundaries <- COLON lower:NUMBER _ ".." _ upper:NUMBER'''
        args = dict()
        # COLON lower:NUMBER _ ".." _ upper:NUMBER
        self.p_save()
        results_780 = []
        
        start_pos_772= self.pos
        if (7309281562612056756, start_pos_772) in self._p_memoized:
            result, self.pos = self._p_memoized[(7309281562612056756, self.pos)]
        else:
            result = self.COLON()
            self._p_memoized[(7309281562612056756, start_pos_772)] = result, self.pos
        if result is self.NoMatch:
            results_780 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 780))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 780)]
            # print self._p_error_stack
        else:
            results_780.append(result)
                            
            
            # lower:NUMBER
            start_pos_773= self.pos
            if (-5951876934190571884, start_pos_773) in self._p_memoized:
                result, self.pos = self._p_memoized[(-5951876934190571884, self.pos)]
            else:
                result = self.NUMBER()
                self._p_memoized[(-5951876934190571884, start_pos_773)] = result, self.pos
            args['lower'] = result
            if result is self.NoMatch:
                results_780 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 780))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 780)]
                # print self._p_error_stack
            else:
                results_780.append(result)
                                
                
                start_pos_775= self.pos
                if (2971727902848045135, start_pos_775) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_775)] = result, self.pos
                if result is self.NoMatch:
                    results_780 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 780))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 780)]
                    # print self._p_error_stack
                else:
                    results_780.append(result)
                                    
                    
                    # ".."
                    result = self.p_startswith('..', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 776))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 776)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_780 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 780))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 780)]
                        # print self._p_error_stack
                    else:
                        results_780.append(result)
                                        
                        
                        start_pos_777= self.pos
                        if (2971727902848045135, start_pos_777) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_777)] = result, self.pos
                        if result is self.NoMatch:
                            results_780 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 780))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 780)]
                            # print self._p_error_stack
                        else:
                            results_780.append(result)
                                            
                            
                            # upper:NUMBER
                            start_pos_778= self.pos
                            if (-5951876934190571884, start_pos_778) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-5951876934190571884, self.pos)]
                            else:
                                result = self.NUMBER()
                                self._p_memoized[(-5951876934190571884, start_pos_778)] = result, self.pos
                            args['upper'] = result
                            if result is self.NoMatch:
                                results_780 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 780))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 780)]
                                # print self._p_error_stack
                            else:
                                results_780.append(result)
                                                
        if results_780 is not self.NoMatch:
            self.p_discard()
        result = results_780
        if result is not self.NoMatch:
            result = self.on_boundaries(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 781))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 781)]
            # print self._p_error_stack
        return result

    def rule(self):
        '''rule <- conditions:conditions _ priority:( "=>" / "->" ) _ assignments:assignments NL'''
        args = dict()
        # conditions:conditions _ priority:( "=>" / "->" ) _ assignments:assignments NL
        self.p_save()
        results_793 = []
        
        # conditions:conditions
        start_pos_782= self.pos
        if (7004767035725502420, start_pos_782) in self._p_memoized:
            result, self.pos = self._p_memoized[(7004767035725502420, self.pos)]
        else:
            result = self.conditions()
            self._p_memoized[(7004767035725502420, start_pos_782)] = result, self.pos
        args['conditions'] = result
        if result is self.NoMatch:
            results_793 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 793))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 793)]
            # print self._p_error_stack
        else:
            results_793.append(result)
                            
            
            start_pos_784= self.pos
            if (2971727902848045135, start_pos_784) in self._p_memoized:
                result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
            else:
                result = self._()
                self._p_memoized[(2971727902848045135, start_pos_784)] = result, self.pos
            if result is self.NoMatch:
                results_793 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 793))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 793)]
                # print self._p_error_stack
            else:
                results_793.append(result)
                                
                
                # priority:( "=>" / "->" )
                # "=>" / "->"
                self.p_save()
                # "=>"
                result = self.p_startswith('=>', False)
                if not result:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 785))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 785)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    # "->"
                    result = self.p_startswith('->', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 786))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 786)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 787))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 787)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                args['priority'] = result
                if result is self.NoMatch:
                    results_793 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 793))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 793)]
                    # print self._p_error_stack
                else:
                    results_793.append(result)
                                    
                    
                    start_pos_789= self.pos
                    if (2971727902848045135, start_pos_789) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_789)] = result, self.pos
                    if result is self.NoMatch:
                        results_793 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 793))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 793)]
                        # print self._p_error_stack
                    else:
                        results_793.append(result)
                                        
                        
                        # assignments:assignments
                        start_pos_790= self.pos
                        if (-264355543883137309, start_pos_790) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-264355543883137309, self.pos)]
                        else:
                            result = self.assignments()
                            self._p_memoized[(-264355543883137309, start_pos_790)] = result, self.pos
                        args['assignments'] = result
                        if result is self.NoMatch:
                            results_793 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 793))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 793)]
                            # print self._p_error_stack
                        else:
                            results_793.append(result)
                                            
                            
                            start_pos_792= self.pos
                            if (3772247872116659244, start_pos_792) in self._p_memoized:
                                result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                            else:
                                result = self.NL()
                                self._p_memoized[(3772247872116659244, start_pos_792)] = result, self.pos
                            if result is self.NoMatch:
                                results_793 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 793))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 793)]
                                # print self._p_error_stack
                            else:
                                results_793.append(result)
                                                
        if results_793 is not self.NoMatch:
            self.p_discard()
        result = results_793
        if result is not self.NoMatch:
            result = self.on_rule(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 794))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 794)]
            # print self._p_error_stack
        return result

    def conditions(self):
        '''conditions <- cond ( COMMA cond )*'''
        args = dict()
        # cond ( COMMA cond )*
        self.p_save()
        results_800 = []
        
        start_pos_795= self.pos
        if (-3638212515007566425, start_pos_795) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3638212515007566425, self.pos)]
        else:
            result = self.cond()
            self._p_memoized[(-3638212515007566425, start_pos_795)] = result, self.pos
        if result is self.NoMatch:
            results_800 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 800))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 800)]
            # print self._p_error_stack
        else:
            results_800.append(result)
                            
            
            # ( COMMA cond )*
            results_799 = []
            while 42:
                # COMMA cond
                self.p_save()
                results_798 = []
                
                start_pos_796= self.pos
                if (4338665788796096863, start_pos_796) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4338665788796096863, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(4338665788796096863, start_pos_796)] = result, self.pos
                if result is self.NoMatch:
                    results_798 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 798))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 798)]
                    # print self._p_error_stack
                else:
                    results_798.append(result)
                                    
                    
                    start_pos_797= self.pos
                    if (-3638212515007566425, start_pos_797) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-3638212515007566425, self.pos)]
                    else:
                        result = self.cond()
                        self._p_memoized[(-3638212515007566425, start_pos_797)] = result, self.pos
                    if result is self.NoMatch:
                        results_798 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 798))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 798)]
                        # print self._p_error_stack
                    else:
                        results_798.append(result)
                                        
                if results_798 is not self.NoMatch:
                    self.p_discard()
                result = results_798
                if result is not self.NoMatch:
                    results_799.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_799
            if result is self.NoMatch:
                results_800 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 800))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 800)]
                # print self._p_error_stack
            else:
                results_800.append(result)
                                
        if results_800 is not self.NoMatch:
            self.p_discard()
        result = results_800
        if result is not self.NoMatch:
            result = self._list(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 801))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 801)]
            # print self._p_error_stack
        return result

    def cond(self):
        '''cond <- left:expr _ op:( "==" / "<=" / ">=" / "<" / ">" / "!=" ) _ right:expr'''
        args = dict()
        # left:expr _ op:( "==" / "<=" / ">=" / "<" / ">" / "!=" ) _ right:expr
        self.p_save()
        results_816 = []
        
        # left:expr
        start_pos_802= self.pos
        if (-5464203869755766909, start_pos_802) in self._p_memoized:
            result, self.pos = self._p_memoized[(-5464203869755766909, self.pos)]
        else:
            result = self.expr()
            self._p_memoized[(-5464203869755766909, start_pos_802)] = result, self.pos
        args['left'] = result
        if result is self.NoMatch:
            results_816 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 816))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 816)]
            # print self._p_error_stack
        else:
            results_816.append(result)
                            
            
            start_pos_804= self.pos
            if (2971727902848045135, start_pos_804) in self._p_memoized:
                result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
            else:
                result = self._()
                self._p_memoized[(2971727902848045135, start_pos_804)] = result, self.pos
            if result is self.NoMatch:
                results_816 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 816))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 816)]
                # print self._p_error_stack
            else:
                results_816.append(result)
                                
                
                # op:( "==" / "<=" / ">=" / "<" / ">" / "!=" )
                # "==" / "<=" / ">=" / "<" / ">" / "!="
                self.p_save()
                # "=="
                result = self.p_startswith('==', False)
                if not result:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 805))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 805)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    # "<="
                    result = self.p_startswith('<=', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 806))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 806)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        # ">="
                        result = self.p_startswith('>=', False)
                        if not result:
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 807))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 807)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is self.NoMatch:
                            # "<"
                            result = self.p_startswith('<', False)
                            if not result:
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 808))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 808)]
                                # print self._p_error_stack
                                result = self.NoMatch
                            if result is self.NoMatch:
                                # ">"
                                result = self.p_startswith('>', False)
                                if not result:
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 809))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 809)]
                                    # print self._p_error_stack
                                    result = self.NoMatch
                                if result is self.NoMatch:
                                    # "!="
                                    result = self.p_startswith('!=', False)
                                    if not result:
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 810))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 810)]
                                        # print self._p_error_stack
                                        result = self.NoMatch
                                    if result is self.NoMatch:
                                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 811))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 811)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                args['op'] = result
                if result is self.NoMatch:
                    results_816 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 816))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 816)]
                    # print self._p_error_stack
                else:
                    results_816.append(result)
                                    
                    
                    start_pos_813= self.pos
                    if (2971727902848045135, start_pos_813) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_813)] = result, self.pos
                    if result is self.NoMatch:
                        results_816 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 816))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 816)]
                        # print self._p_error_stack
                    else:
                        results_816.append(result)
                                        
                        
                        # right:expr
                        start_pos_814= self.pos
                        if (-5464203869755766909, start_pos_814) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-5464203869755766909, self.pos)]
                        else:
                            result = self.expr()
                            self._p_memoized[(-5464203869755766909, start_pos_814)] = result, self.pos
                        args['right'] = result
                        if result is self.NoMatch:
                            results_816 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 816))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 816)]
                            # print self._p_error_stack
                        else:
                            results_816.append(result)
                                            
        if results_816 is not self.NoMatch:
            self.p_discard()
        result = results_816
        if result is not self.NoMatch:
            result = self.on_cond(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 817))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 817)]
            # print self._p_error_stack
        return result

    def assignments(self):
        '''assignments <- assign ( COMMA assign )*'''
        args = dict()
        # assign ( COMMA assign )*
        self.p_save()
        results_823 = []
        
        start_pos_818= self.pos
        if (1486158993343227013, start_pos_818) in self._p_memoized:
            result, self.pos = self._p_memoized[(1486158993343227013, self.pos)]
        else:
            result = self.assign()
            self._p_memoized[(1486158993343227013, start_pos_818)] = result, self.pos
        if result is self.NoMatch:
            results_823 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 823))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 823)]
            # print self._p_error_stack
        else:
            results_823.append(result)
                            
            
            # ( COMMA assign )*
            results_822 = []
            while 42:
                # COMMA assign
                self.p_save()
                results_821 = []
                
                start_pos_819= self.pos
                if (4338665788796096863, start_pos_819) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4338665788796096863, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(4338665788796096863, start_pos_819)] = result, self.pos
                if result is self.NoMatch:
                    results_821 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 821))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 821)]
                    # print self._p_error_stack
                else:
                    results_821.append(result)
                                    
                    
                    start_pos_820= self.pos
                    if (1486158993343227013, start_pos_820) in self._p_memoized:
                        result, self.pos = self._p_memoized[(1486158993343227013, self.pos)]
                    else:
                        result = self.assign()
                        self._p_memoized[(1486158993343227013, start_pos_820)] = result, self.pos
                    if result is self.NoMatch:
                        results_821 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 821))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 821)]
                        # print self._p_error_stack
                    else:
                        results_821.append(result)
                                        
                if results_821 is not self.NoMatch:
                    self.p_discard()
                result = results_821
                if result is not self.NoMatch:
                    results_822.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_822
            if result is self.NoMatch:
                results_823 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 823))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 823)]
                # print self._p_error_stack
            else:
                results_823.append(result)
                                
        if results_823 is not self.NoMatch:
            self.p_discard()
        result = results_823
        if result is not self.NoMatch:
            result = self._list(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 824))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 824)]
            # print self._p_error_stack
        return result

    def assign(self):
        '''assign <- target:variable _ op:( "+=" / "-=" / ":=" ) _ expr:expr'''
        args = dict()
        # target:variable _ op:( "+=" / "-=" / ":=" ) _ expr:expr
        self.p_save()
        results_836 = []
        
        # target:variable
        start_pos_825= self.pos
        if (-6507446770882515329, start_pos_825) in self._p_memoized:
            result, self.pos = self._p_memoized[(-6507446770882515329, self.pos)]
        else:
            result = self.variable()
            self._p_memoized[(-6507446770882515329, start_pos_825)] = result, self.pos
        args['target'] = result
        if result is self.NoMatch:
            results_836 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 836))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 836)]
            # print self._p_error_stack
        else:
            results_836.append(result)
                            
            
            start_pos_827= self.pos
            if (2971727902848045135, start_pos_827) in self._p_memoized:
                result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
            else:
                result = self._()
                self._p_memoized[(2971727902848045135, start_pos_827)] = result, self.pos
            if result is self.NoMatch:
                results_836 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 836))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 836)]
                # print self._p_error_stack
            else:
                results_836.append(result)
                                
                
                # op:( "+=" / "-=" / ":=" )
                # "+=" / "-=" / ":="
                self.p_save()
                # "+="
                result = self.p_startswith('+=', False)
                if not result:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 828))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 828)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    # "-="
                    result = self.p_startswith('-=', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 829))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 829)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        # ":="
                        result = self.p_startswith(':=', False)
                        if not result:
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 830))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 830)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is self.NoMatch:
                            pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 831))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 831)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                args['op'] = result
                if result is self.NoMatch:
                    results_836 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 836))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 836)]
                    # print self._p_error_stack
                else:
                    results_836.append(result)
                                    
                    
                    start_pos_833= self.pos
                    if (2971727902848045135, start_pos_833) in self._p_memoized:
                        result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(2971727902848045135, start_pos_833)] = result, self.pos
                    if result is self.NoMatch:
                        results_836 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 836))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 836)]
                        # print self._p_error_stack
                    else:
                        results_836.append(result)
                                        
                        
                        # expr:expr
                        start_pos_834= self.pos
                        if (-5464203869755766909, start_pos_834) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-5464203869755766909, self.pos)]
                        else:
                            result = self.expr()
                            self._p_memoized[(-5464203869755766909, start_pos_834)] = result, self.pos
                        args['expr'] = result
                        if result is self.NoMatch:
                            results_836 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 836))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 836)]
                            # print self._p_error_stack
                        else:
                            results_836.append(result)
                                            
        if results_836 is not self.NoMatch:
            self.p_discard()
        result = results_836
        if result is not self.NoMatch:
            result = self.on_assign(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 837))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 837)]
            # print self._p_error_stack
        return result

    def variable(self):
        '''variable <- ( name:NAME location:atloc? ) / ( LSB name:NAME AT forall:neighbor+ RSB )'''
        args = dict()
        # ( name:NAME location:atloc? ) / ( LSB name:NAME AT forall:neighbor+ RSB )
        self.p_save()
        # name:NAME location:atloc?
        self.p_save()
        results_843 = []
        
        # name:NAME
        start_pos_838= self.pos
        if (-1978311826809070106, start_pos_838) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(-1978311826809070106, start_pos_838)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            results_843 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 843))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 843)]
            # print self._p_error_stack
        else:
            results_843.append(result)
                            
            
            # location:atloc?
            # atloc?
            start_pos_840= self.pos
            if (9200683063748545349, start_pos_840) in self._p_memoized:
                result, self.pos = self._p_memoized[(9200683063748545349, self.pos)]
            else:
                result = self.atloc()
                self._p_memoized[(9200683063748545349, start_pos_840)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['location'] = result
            if result is self.NoMatch:
                results_843 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 843))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 843)]
                # print self._p_error_stack
            else:
                results_843.append(result)
                                
        if results_843 is not self.NoMatch:
            self.p_discard()
        result = results_843
        if result is self.NoMatch:
            # LSB name:NAME AT forall:neighbor+ RSB
            self.p_save()
            results_852 = []
            
            start_pos_844= self.pos
            if (-1092353632506606576, start_pos_844) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1092353632506606576, self.pos)]
            else:
                result = self.LSB()
                self._p_memoized[(-1092353632506606576, start_pos_844)] = result, self.pos
            if result is self.NoMatch:
                results_852 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 852))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 852)]
                # print self._p_error_stack
            else:
                results_852.append(result)
                                
                
                # name:NAME
                start_pos_845= self.pos
                if (-1978311826809070106, start_pos_845) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
                else:
                    result = self.NAME()
                    self._p_memoized[(-1978311826809070106, start_pos_845)] = result, self.pos
                args['name'] = result
                if result is self.NoMatch:
                    results_852 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 852))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 852)]
                    # print self._p_error_stack
                else:
                    results_852.append(result)
                                    
                    
                    start_pos_847= self.pos
                    if (-6306554157512010221, start_pos_847) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-6306554157512010221, self.pos)]
                    else:
                        result = self.AT()
                        self._p_memoized[(-6306554157512010221, start_pos_847)] = result, self.pos
                    if result is self.NoMatch:
                        results_852 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 852))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 852)]
                        # print self._p_error_stack
                    else:
                        results_852.append(result)
                                        
                        
                        # forall:neighbor+
                        # neighbor+
                        self.p_save()
                        results_849 = []
                        while 42:
                            start_pos_848= self.pos
                            if (-8344758436583687766, start_pos_848) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-8344758436583687766, self.pos)]
                            else:
                                result = self.neighbor()
                                self._p_memoized[(-8344758436583687766, start_pos_848)] = result, self.pos
                            if result is not self.NoMatch:
                                results_849.append(result)
                            else:
                                break
                        if not results_849:
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 849))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 849)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        else:
                            self.p_discard()
                            result = results_849
                        args['forall'] = result
                        if result is self.NoMatch:
                            results_852 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 852))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 852)]
                            # print self._p_error_stack
                        else:
                            results_852.append(result)
                                            
                            
                            start_pos_851= self.pos
                            if (-1156853777898079519, start_pos_851) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-1156853777898079519, self.pos)]
                            else:
                                result = self.RSB()
                                self._p_memoized[(-1156853777898079519, start_pos_851)] = result, self.pos
                            if result is self.NoMatch:
                                results_852 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 852))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 852)]
                                # print self._p_error_stack
                            else:
                                results_852.append(result)
                                                
            if results_852 is not self.NoMatch:
                self.p_discard()
            result = results_852
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 853))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 853)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self.on_variable(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 854))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 854)]
            # print self._p_error_stack
        return result

    def atloc(self):
        '''atloc <- AT ( name:NAME / path:neighbor+ )'''
        args = dict()
        # AT ( name:NAME / path:neighbor+ )
        self.p_save()
        results_862 = []
        
        start_pos_855= self.pos
        if (-6306554157512010221, start_pos_855) in self._p_memoized:
            result, self.pos = self._p_memoized[(-6306554157512010221, self.pos)]
        else:
            result = self.AT()
            self._p_memoized[(-6306554157512010221, start_pos_855)] = result, self.pos
        if result is self.NoMatch:
            results_862 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 862))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 862)]
            # print self._p_error_stack
        else:
            results_862.append(result)
                            
            
            # name:NAME / path:neighbor+
            self.p_save()
            # name:NAME
            start_pos_856= self.pos
            if (-1978311826809070106, start_pos_856) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(-1978311826809070106, start_pos_856)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                # path:neighbor+
                # neighbor+
                self.p_save()
                results_859 = []
                while 42:
                    start_pos_858= self.pos
                    if (-8344758436583687766, start_pos_858) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-8344758436583687766, self.pos)]
                    else:
                        result = self.neighbor()
                        self._p_memoized[(-8344758436583687766, start_pos_858)] = result, self.pos
                    if result is not self.NoMatch:
                        results_859.append(result)
                    else:
                        break
                if not results_859:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 859))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 859)]
                    # print self._p_error_stack
                    result = self.NoMatch
                else:
                    self.p_discard()
                    result = results_859
                args['path'] = result
                if result is self.NoMatch:
                    pass
            if result is self.NoMatch:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 861))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 861)]
                # print self._p_error_stack
            else:
                self.p_discard()
            if result is self.NoMatch:
                results_862 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 862))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 862)]
                # print self._p_error_stack
            else:
                results_862.append(result)
                                
        if results_862 is not self.NoMatch:
            self.p_discard()
        result = results_862
        if result is not self.NoMatch:
            result = self.on_atloc(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 863))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 863)]
            # print self._p_error_stack
        return result

    def expr(self):
        '''expr <- first:term rest:( [+-] term )*'''
        args = dict()
        # first:term rest:( [+-] term )*
        self.p_save()
        results_871 = []
        
        # first:term
        start_pos_864= self.pos
        if (7138638215464580086, start_pos_864) in self._p_memoized:
            result, self.pos = self._p_memoized[(7138638215464580086, self.pos)]
        else:
            result = self.term()
            self._p_memoized[(7138638215464580086, start_pos_864)] = result, self.pos
        args['first'] = result
        if result is self.NoMatch:
            results_871 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 871))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 871)]
            # print self._p_error_stack
        else:
            results_871.append(result)
                            
            
            # rest:( [+-] term )*
            # ( [+-] term )*
            results_869 = []
            while 42:
                # [+-] term
                self.p_save()
                results_868 = []
                
                # [+-]
                self.p_save()
                n = self.p_next()
                if n is not None and n in '+-':
                    self.p_discard()
                    result = n
                else:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 866))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 866)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    results_868 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 868))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 868)]
                    # print self._p_error_stack
                else:
                    results_868.append(result)
                                    
                    
                    start_pos_867= self.pos
                    if (7138638215464580086, start_pos_867) in self._p_memoized:
                        result, self.pos = self._p_memoized[(7138638215464580086, self.pos)]
                    else:
                        result = self.term()
                        self._p_memoized[(7138638215464580086, start_pos_867)] = result, self.pos
                    if result is self.NoMatch:
                        results_868 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 868))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 868)]
                        # print self._p_error_stack
                    else:
                        results_868.append(result)
                                        
                if results_868 is not self.NoMatch:
                    self.p_discard()
                result = results_868
                if result is not self.NoMatch:
                    results_869.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_869
            args['rest'] = result
            if result is self.NoMatch:
                results_871 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 871))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 871)]
                # print self._p_error_stack
            else:
                results_871.append(result)
                                
        if results_871 is not self.NoMatch:
            self.p_discard()
        result = results_871
        if result is not self.NoMatch:
            result = self.on_expr(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 872))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 872)]
            # print self._p_error_stack
        return result

    def term(self):
        '''term <- first:fact rest:( [*/%] fact )*'''
        args = dict()
        # first:fact rest:( [*/%] fact )*
        self.p_save()
        results_880 = []
        
        # first:fact
        start_pos_873= self.pos
        if (-2195335527178842750, start_pos_873) in self._p_memoized:
            result, self.pos = self._p_memoized[(-2195335527178842750, self.pos)]
        else:
            result = self.fact()
            self._p_memoized[(-2195335527178842750, start_pos_873)] = result, self.pos
        args['first'] = result
        if result is self.NoMatch:
            results_880 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 880))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 880)]
            # print self._p_error_stack
        else:
            results_880.append(result)
                            
            
            # rest:( [*/%] fact )*
            # ( [*/%] fact )*
            results_878 = []
            while 42:
                # [*/%] fact
                self.p_save()
                results_877 = []
                
                # [*/%]
                self.p_save()
                n = self.p_next()
                if n is not None and n in '*/%':
                    self.p_discard()
                    result = n
                else:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 875))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 875)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    results_877 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 877))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 877)]
                    # print self._p_error_stack
                else:
                    results_877.append(result)
                                    
                    
                    start_pos_876= self.pos
                    if (-2195335527178842750, start_pos_876) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-2195335527178842750, self.pos)]
                    else:
                        result = self.fact()
                        self._p_memoized[(-2195335527178842750, start_pos_876)] = result, self.pos
                    if result is self.NoMatch:
                        results_877 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 877))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 877)]
                        # print self._p_error_stack
                    else:
                        results_877.append(result)
                                        
                if results_877 is not self.NoMatch:
                    self.p_discard()
                result = results_877
                if result is not self.NoMatch:
                    results_878.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_878
            args['rest'] = result
            if result is self.NoMatch:
                results_880 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 880))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 880)]
                # print self._p_error_stack
            else:
                results_880.append(result)
                                
        if results_880 is not self.NoMatch:
            self.p_discard()
        result = results_880
        if result is not self.NoMatch:
            result = self.on_expr(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 881))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 881)]
            # print self._p_error_stack
        return result

    def fact(self):
        '''fact <- ( LP fact:expr RP ) / fact:atom'''
        args = dict()
        # ( LP fact:expr RP ) / fact:atom
        self.p_save()
        # LP fact:expr RP
        self.p_save()
        results_886 = []
        
        start_pos_882= self.pos
        if (7797922490082766067, start_pos_882) in self._p_memoized:
            result, self.pos = self._p_memoized[(7797922490082766067, self.pos)]
        else:
            result = self.LP()
            self._p_memoized[(7797922490082766067, start_pos_882)] = result, self.pos
        if result is self.NoMatch:
            results_886 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 886))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 886)]
            # print self._p_error_stack
        else:
            results_886.append(result)
                            
            
            # fact:expr
            start_pos_883= self.pos
            if (-5464203869755766909, start_pos_883) in self._p_memoized:
                result, self.pos = self._p_memoized[(-5464203869755766909, self.pos)]
            else:
                result = self.expr()
                self._p_memoized[(-5464203869755766909, start_pos_883)] = result, self.pos
            args['fact'] = result
            if result is self.NoMatch:
                results_886 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 886))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 886)]
                # print self._p_error_stack
            else:
                results_886.append(result)
                                
                
                start_pos_885= self.pos
                if (-1930047963851462698, start_pos_885) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1930047963851462698, self.pos)]
                else:
                    result = self.RP()
                    self._p_memoized[(-1930047963851462698, start_pos_885)] = result, self.pos
                if result is self.NoMatch:
                    results_886 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 886))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 886)]
                    # print self._p_error_stack
                else:
                    results_886.append(result)
                                    
        if results_886 is not self.NoMatch:
            self.p_discard()
        result = results_886
        if result is self.NoMatch:
            # fact:atom
            start_pos_887= self.pos
            if (3876648736045716677, start_pos_887) in self._p_memoized:
                result, self.pos = self._p_memoized[(3876648736045716677, self.pos)]
            else:
                result = self.atom()
                self._p_memoized[(3876648736045716677, start_pos_887)] = result, self.pos
            args['fact'] = result
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 889))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 889)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = args['fact']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 890))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 890)]
            # print self._p_error_stack
        return result

    def atom(self):
        '''atom <- value:( NUMBER / variable )'''
        args = dict()
        # value:( NUMBER / variable )
        # NUMBER / variable
        self.p_save()
        start_pos_891= self.pos
        if (-5951876934190571884, start_pos_891) in self._p_memoized:
            result, self.pos = self._p_memoized[(-5951876934190571884, self.pos)]
        else:
            result = self.NUMBER()
            self._p_memoized[(-5951876934190571884, start_pos_891)] = result, self.pos
        if result is self.NoMatch:
            start_pos_892= self.pos
            if (-6507446770882515329, start_pos_892) in self._p_memoized:
                result, self.pos = self._p_memoized[(-6507446770882515329, self.pos)]
            else:
                result = self.variable()
                self._p_memoized[(-6507446770882515329, start_pos_892)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 893))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 893)]
            # print self._p_error_stack
        else:
            self.p_discard()
        args['value'] = result
        if result is not self.NoMatch:
            result = args['value']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 895))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 895)]
            # print self._p_error_stack
        return result

    def neighbor(self):
        '''neighbor <- _ direction:[?!] _ edge:lblmatch? name:( NAME / STAR ) loc:lblmatch?'''
        args = dict()
        # _ direction:[?!] _ edge:lblmatch? name:( NAME / STAR ) loc:lblmatch?
        self.p_save()
        results_910 = []
        
        start_pos_896= self.pos
        if (2971727902848045135, start_pos_896) in self._p_memoized:
            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
        else:
            result = self._()
            self._p_memoized[(2971727902848045135, start_pos_896)] = result, self.pos
        if result is self.NoMatch:
            results_910 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 910))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 910)]
            # print self._p_error_stack
        else:
            results_910.append(result)
                            
            
            # direction:[?!]
            # [?!]
            self.p_save()
            n = self.p_next()
            if n is not None and n in '?!':
                self.p_discard()
                result = n
            else:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 897))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 897)]
                # print self._p_error_stack
                result = self.NoMatch
            args['direction'] = result
            if result is self.NoMatch:
                results_910 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 910))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 910)]
                # print self._p_error_stack
            else:
                results_910.append(result)
                                
                
                start_pos_899= self.pos
                if (2971727902848045135, start_pos_899) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_899)] = result, self.pos
                if result is self.NoMatch:
                    results_910 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 910))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 910)]
                    # print self._p_error_stack
                else:
                    results_910.append(result)
                                    
                    
                    # edge:lblmatch?
                    # lblmatch?
                    start_pos_900= self.pos
                    if (-8726087993833075829, start_pos_900) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-8726087993833075829, self.pos)]
                    else:
                        result = self.lblmatch()
                        self._p_memoized[(-8726087993833075829, start_pos_900)] = result, self.pos
                    result = "" if result is self.NoMatch else result
                    if result is self.NoMatch:
                        # print self._p_error_stack
                        self._p_error_stack.pop()
                    args['edge'] = result
                    if result is self.NoMatch:
                        results_910 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 910))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 910)]
                        # print self._p_error_stack
                    else:
                        results_910.append(result)
                                        
                        
                        # name:( NAME / STAR )
                        # NAME / STAR
                        self.p_save()
                        start_pos_903= self.pos
                        if (-1978311826809070106, start_pos_903) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
                        else:
                            result = self.NAME()
                            self._p_memoized[(-1978311826809070106, start_pos_903)] = result, self.pos
                        if result is self.NoMatch:
                            start_pos_904= self.pos
                            if (-8749796198314744642, start_pos_904) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-8749796198314744642, self.pos)]
                            else:
                                result = self.STAR()
                                self._p_memoized[(-8749796198314744642, start_pos_904)] = result, self.pos
                            if result is self.NoMatch:
                                pass
                        if result is self.NoMatch:
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 905))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 905)]
                            # print self._p_error_stack
                        else:
                            self.p_discard()
                        args['name'] = result
                        if result is self.NoMatch:
                            results_910 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 910))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 910)]
                            # print self._p_error_stack
                        else:
                            results_910.append(result)
                                            
                            
                            # loc:lblmatch?
                            # lblmatch?
                            start_pos_907= self.pos
                            if (-8726087993833075829, start_pos_907) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-8726087993833075829, self.pos)]
                            else:
                                result = self.lblmatch()
                                self._p_memoized[(-8726087993833075829, start_pos_907)] = result, self.pos
                            result = "" if result is self.NoMatch else result
                            if result is self.NoMatch:
                                # print self._p_error_stack
                                self._p_error_stack.pop()
                            args['loc'] = result
                            if result is self.NoMatch:
                                results_910 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 910))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 910)]
                                # print self._p_error_stack
                            else:
                                results_910.append(result)
                                                
        if results_910 is not self.NoMatch:
            self.p_discard()
        result = results_910
        if result is not self.NoMatch:
            result = self.on_neighbor(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 911))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 911)]
            # print self._p_error_stack
        return result

    def lblmatch(self):
        '''lblmatch <- LCB expr:lblexpr RCB'''
        args = dict()
        # LCB expr:lblexpr RCB
        self.p_save()
        results_916 = []
        
        start_pos_912= self.pos
        if (1476585927995302714, start_pos_912) in self._p_memoized:
            result, self.pos = self._p_memoized[(1476585927995302714, self.pos)]
        else:
            result = self.LCB()
            self._p_memoized[(1476585927995302714, start_pos_912)] = result, self.pos
        if result is self.NoMatch:
            results_916 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 916))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 916)]
            # print self._p_error_stack
        else:
            results_916.append(result)
                            
            
            # expr:lblexpr
            start_pos_913= self.pos
            if (5760040536588920872, start_pos_913) in self._p_memoized:
                result, self.pos = self._p_memoized[(5760040536588920872, self.pos)]
            else:
                result = self.lblexpr()
                self._p_memoized[(5760040536588920872, start_pos_913)] = result, self.pos
            args['expr'] = result
            if result is self.NoMatch:
                results_916 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 916))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 916)]
                # print self._p_error_stack
            else:
                results_916.append(result)
                                
                
                start_pos_915= self.pos
                if (-6923352805317367035, start_pos_915) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-6923352805317367035, self.pos)]
                else:
                    result = self.RCB()
                    self._p_memoized[(-6923352805317367035, start_pos_915)] = result, self.pos
                if result is self.NoMatch:
                    results_916 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 916))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 916)]
                    # print self._p_error_stack
                else:
                    results_916.append(result)
                                    
        if results_916 is not self.NoMatch:
            self.p_discard()
        result = results_916
        if result is not self.NoMatch:
            result = args['expr']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 917))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 917)]
            # print self._p_error_stack
        return result

    def lblexpr(self):
        '''lblexpr <- first:lblterm rest:( _ "|" _ lblterm )*'''
        args = dict()
        # first:lblterm rest:( _ "|" _ lblterm )*
        self.p_save()
        results_927 = []
        
        # first:lblterm
        start_pos_918= self.pos
        if (9208587848889117771, start_pos_918) in self._p_memoized:
            result, self.pos = self._p_memoized[(9208587848889117771, self.pos)]
        else:
            result = self.lblterm()
            self._p_memoized[(9208587848889117771, start_pos_918)] = result, self.pos
        args['first'] = result
        if result is self.NoMatch:
            results_927 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 927))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 927)]
            # print self._p_error_stack
        else:
            results_927.append(result)
                            
            
            # rest:( _ "|" _ lblterm )*
            # ( _ "|" _ lblterm )*
            results_925 = []
            while 42:
                # _ "|" _ lblterm
                self.p_save()
                results_924 = []
                
                start_pos_920= self.pos
                if (2971727902848045135, start_pos_920) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_920)] = result, self.pos
                if result is self.NoMatch:
                    results_924 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 924))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 924)]
                    # print self._p_error_stack
                else:
                    results_924.append(result)
                                    
                    
                    # "|"
                    result = self.p_startswith('|', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 921))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 921)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_924 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 924))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 924)]
                        # print self._p_error_stack
                    else:
                        results_924.append(result)
                                        
                        
                        start_pos_922= self.pos
                        if (2971727902848045135, start_pos_922) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_922)] = result, self.pos
                        if result is self.NoMatch:
                            results_924 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 924))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 924)]
                            # print self._p_error_stack
                        else:
                            results_924.append(result)
                                            
                            
                            start_pos_923= self.pos
                            if (9208587848889117771, start_pos_923) in self._p_memoized:
                                result, self.pos = self._p_memoized[(9208587848889117771, self.pos)]
                            else:
                                result = self.lblterm()
                                self._p_memoized[(9208587848889117771, start_pos_923)] = result, self.pos
                            if result is self.NoMatch:
                                results_924 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 924))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 924)]
                                # print self._p_error_stack
                            else:
                                results_924.append(result)
                                                
                if results_924 is not self.NoMatch:
                    self.p_discard()
                result = results_924
                if result is not self.NoMatch:
                    results_925.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_925
            args['rest'] = result
            if result is self.NoMatch:
                results_927 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 927))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 927)]
                # print self._p_error_stack
            else:
                results_927.append(result)
                                
        if results_927 is not self.NoMatch:
            self.p_discard()
        result = results_927
        if result is not self.NoMatch:
            result = self.on_expr(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 928))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 928)]
            # print self._p_error_stack
        return result

    def lblterm(self):
        '''lblterm <- first:lblfact rest:( _ "&" _ lblterm )*'''
        args = dict()
        # first:lblfact rest:( _ "&" _ lblterm )*
        self.p_save()
        results_938 = []
        
        # first:lblfact
        start_pos_929= self.pos
        if (-3331899328988804935, start_pos_929) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3331899328988804935, self.pos)]
        else:
            result = self.lblfact()
            self._p_memoized[(-3331899328988804935, start_pos_929)] = result, self.pos
        args['first'] = result
        if result is self.NoMatch:
            results_938 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 938))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 938)]
            # print self._p_error_stack
        else:
            results_938.append(result)
                            
            
            # rest:( _ "&" _ lblterm )*
            # ( _ "&" _ lblterm )*
            results_936 = []
            while 42:
                # _ "&" _ lblterm
                self.p_save()
                results_935 = []
                
                start_pos_931= self.pos
                if (2971727902848045135, start_pos_931) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_931)] = result, self.pos
                if result is self.NoMatch:
                    results_935 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 935))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 935)]
                    # print self._p_error_stack
                else:
                    results_935.append(result)
                                    
                    
                    # "&"
                    result = self.p_startswith('&', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 932))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 932)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_935 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 935))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 935)]
                        # print self._p_error_stack
                    else:
                        results_935.append(result)
                                        
                        
                        start_pos_933= self.pos
                        if (2971727902848045135, start_pos_933) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_933)] = result, self.pos
                        if result is self.NoMatch:
                            results_935 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 935))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 935)]
                            # print self._p_error_stack
                        else:
                            results_935.append(result)
                                            
                            
                            start_pos_934= self.pos
                            if (9208587848889117771, start_pos_934) in self._p_memoized:
                                result, self.pos = self._p_memoized[(9208587848889117771, self.pos)]
                            else:
                                result = self.lblterm()
                                self._p_memoized[(9208587848889117771, start_pos_934)] = result, self.pos
                            if result is self.NoMatch:
                                results_935 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 935))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 935)]
                                # print self._p_error_stack
                            else:
                                results_935.append(result)
                                                
                if results_935 is not self.NoMatch:
                    self.p_discard()
                result = results_935
                if result is not self.NoMatch:
                    results_936.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_936
            args['rest'] = result
            if result is self.NoMatch:
                results_938 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 938))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 938)]
                # print self._p_error_stack
            else:
                results_938.append(result)
                                
        if results_938 is not self.NoMatch:
            self.p_discard()
        result = results_938
        if result is not self.NoMatch:
            result = self.on_expr(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 939))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 939)]
            # print self._p_error_stack
        return result

    def lblfact(self):
        '''lblfact <- ( TILDA neg:lblfact ) / ( LP sub:lblexpr RP ) / atom:arg'''
        args = dict()
        # ( TILDA neg:lblfact ) / ( LP sub:lblexpr RP ) / atom:arg
        self.p_save()
        # TILDA neg:lblfact
        self.p_save()
        results_943 = []
        
        start_pos_940= self.pos
        if (2973782228195022313, start_pos_940) in self._p_memoized:
            result, self.pos = self._p_memoized[(2973782228195022313, self.pos)]
        else:
            result = self.TILDA()
            self._p_memoized[(2973782228195022313, start_pos_940)] = result, self.pos
        if result is self.NoMatch:
            results_943 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 943))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 943)]
            # print self._p_error_stack
        else:
            results_943.append(result)
                            
            
            # neg:lblfact
            start_pos_941= self.pos
            if (-3331899328988804935, start_pos_941) in self._p_memoized:
                result, self.pos = self._p_memoized[(-3331899328988804935, self.pos)]
            else:
                result = self.lblfact()
                self._p_memoized[(-3331899328988804935, start_pos_941)] = result, self.pos
            args['neg'] = result
            if result is self.NoMatch:
                results_943 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 943))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 943)]
                # print self._p_error_stack
            else:
                results_943.append(result)
                                
        if results_943 is not self.NoMatch:
            self.p_discard()
        result = results_943
        if result is self.NoMatch:
            # LP sub:lblexpr RP
            self.p_save()
            results_948 = []
            
            start_pos_944= self.pos
            if (7797922490082766067, start_pos_944) in self._p_memoized:
                result, self.pos = self._p_memoized[(7797922490082766067, self.pos)]
            else:
                result = self.LP()
                self._p_memoized[(7797922490082766067, start_pos_944)] = result, self.pos
            if result is self.NoMatch:
                results_948 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 948))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 948)]
                # print self._p_error_stack
            else:
                results_948.append(result)
                                
                
                # sub:lblexpr
                start_pos_945= self.pos
                if (5760040536588920872, start_pos_945) in self._p_memoized:
                    result, self.pos = self._p_memoized[(5760040536588920872, self.pos)]
                else:
                    result = self.lblexpr()
                    self._p_memoized[(5760040536588920872, start_pos_945)] = result, self.pos
                args['sub'] = result
                if result is self.NoMatch:
                    results_948 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 948))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 948)]
                    # print self._p_error_stack
                else:
                    results_948.append(result)
                                    
                    
                    start_pos_947= self.pos
                    if (-1930047963851462698, start_pos_947) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-1930047963851462698, self.pos)]
                    else:
                        result = self.RP()
                        self._p_memoized[(-1930047963851462698, start_pos_947)] = result, self.pos
                    if result is self.NoMatch:
                        results_948 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 948))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 948)]
                        # print self._p_error_stack
                    else:
                        results_948.append(result)
                                        
            if results_948 is not self.NoMatch:
                self.p_discard()
            result = results_948
            if result is self.NoMatch:
                # atom:arg
                start_pos_949= self.pos
                if (7114169547052773328, start_pos_949) in self._p_memoized:
                    result, self.pos = self._p_memoized[(7114169547052773328, self.pos)]
                else:
                    result = self.arg()
                    self._p_memoized[(7114169547052773328, start_pos_949)] = result, self.pos
                args['atom'] = result
                if result is self.NoMatch:
                    pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 951))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 951)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self.on_lblfact(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 952))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 952)]
            # print self._p_error_stack
        return result

    def instance(self):
        '''instance <- name:NAME labels:labels? _ ":=" _ location:NAME LP args:arguments? RP NL'''
        args = dict()
        # name:NAME labels:labels? _ ":=" _ location:NAME LP args:arguments? RP NL
        self.p_save()
        results_969 = []
        
        # name:NAME
        start_pos_953= self.pos
        if (-1978311826809070106, start_pos_953) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(-1978311826809070106, start_pos_953)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            results_969 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 969))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 969)]
            # print self._p_error_stack
        else:
            results_969.append(result)
                            
            
            # labels:labels?
            # labels?
            start_pos_955= self.pos
            if (-6981456540114072987, start_pos_955) in self._p_memoized:
                result, self.pos = self._p_memoized[(-6981456540114072987, self.pos)]
            else:
                result = self.labels()
                self._p_memoized[(-6981456540114072987, start_pos_955)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['labels'] = result
            if result is self.NoMatch:
                results_969 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 969))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 969)]
                # print self._p_error_stack
            else:
                results_969.append(result)
                                
                
                start_pos_958= self.pos
                if (2971727902848045135, start_pos_958) in self._p_memoized:
                    result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(2971727902848045135, start_pos_958)] = result, self.pos
                if result is self.NoMatch:
                    results_969 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 969))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 969)]
                    # print self._p_error_stack
                else:
                    results_969.append(result)
                                    
                    
                    # ":="
                    result = self.p_startswith(':=', False)
                    if not result:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 959))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 959)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        results_969 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 969))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 969)]
                        # print self._p_error_stack
                    else:
                        results_969.append(result)
                                        
                        
                        start_pos_960= self.pos
                        if (2971727902848045135, start_pos_960) in self._p_memoized:
                            result, self.pos = self._p_memoized[(2971727902848045135, self.pos)]
                        else:
                            result = self._()
                            self._p_memoized[(2971727902848045135, start_pos_960)] = result, self.pos
                        if result is self.NoMatch:
                            results_969 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 969))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 969)]
                            # print self._p_error_stack
                        else:
                            results_969.append(result)
                                            
                            
                            # location:NAME
                            start_pos_961= self.pos
                            if (-1978311826809070106, start_pos_961) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
                            else:
                                result = self.NAME()
                                self._p_memoized[(-1978311826809070106, start_pos_961)] = result, self.pos
                            args['location'] = result
                            if result is self.NoMatch:
                                results_969 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 969))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 969)]
                                # print self._p_error_stack
                            else:
                                results_969.append(result)
                                                
                                
                                start_pos_963= self.pos
                                if (7797922490082766067, start_pos_963) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(7797922490082766067, self.pos)]
                                else:
                                    result = self.LP()
                                    self._p_memoized[(7797922490082766067, start_pos_963)] = result, self.pos
                                if result is self.NoMatch:
                                    results_969 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 969))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 969)]
                                    # print self._p_error_stack
                                else:
                                    results_969.append(result)
                                                    
                                    
                                    # args:arguments?
                                    # arguments?
                                    start_pos_964= self.pos
                                    if (-5835334544454164282, start_pos_964) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(-5835334544454164282, self.pos)]
                                    else:
                                        result = self.arguments()
                                        self._p_memoized[(-5835334544454164282, start_pos_964)] = result, self.pos
                                    result = "" if result is self.NoMatch else result
                                    if result is self.NoMatch:
                                        # print self._p_error_stack
                                        self._p_error_stack.pop()
                                    args['args'] = result
                                    if result is self.NoMatch:
                                        results_969 = self.NoMatch
                                        self.p_restore()
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 969))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 969)]
                                        # print self._p_error_stack
                                    else:
                                        results_969.append(result)
                                                        
                                        
                                        start_pos_967= self.pos
                                        if (-1930047963851462698, start_pos_967) in self._p_memoized:
                                            result, self.pos = self._p_memoized[(-1930047963851462698, self.pos)]
                                        else:
                                            result = self.RP()
                                            self._p_memoized[(-1930047963851462698, start_pos_967)] = result, self.pos
                                        if result is self.NoMatch:
                                            results_969 = self.NoMatch
                                            self.p_restore()
                                            if self._p_error_stack:
                                                head = self._p_error_stack[0]
                                            else:
                                                head = (0, 0)
                                            if self.pos <= head[0]:
                                                self._p_error_stack.append((self.pos, 969))
                                            elif self.pos > head[0]:
                                                self._p_error_stack = [(self.pos, 969)]
                                            # print self._p_error_stack
                                        else:
                                            results_969.append(result)
                                                            
                                            
                                            start_pos_968= self.pos
                                            if (3772247872116659244, start_pos_968) in self._p_memoized:
                                                result, self.pos = self._p_memoized[(3772247872116659244, self.pos)]
                                            else:
                                                result = self.NL()
                                                self._p_memoized[(3772247872116659244, start_pos_968)] = result, self.pos
                                            if result is self.NoMatch:
                                                results_969 = self.NoMatch
                                                self.p_restore()
                                                if self._p_error_stack:
                                                    head = self._p_error_stack[0]
                                                else:
                                                    head = (0, 0)
                                                if self.pos <= head[0]:
                                                    self._p_error_stack.append((self.pos, 969))
                                                elif self.pos > head[0]:
                                                    self._p_error_stack = [(self.pos, 969)]
                                                # print self._p_error_stack
                                            else:
                                                results_969.append(result)
                                                                
        if results_969 is not self.NoMatch:
            self.p_discard()
        result = results_969
        if result is not self.NoMatch:
            result = self.on_instance(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 970))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 970)]
            # print self._p_error_stack
        return result

    def graph(self):
        '''graph <- first:subg rest:( edge? subg )*'''
        args = dict()
        # first:subg rest:( edge? subg )*
        self.p_save()
        results_979 = []
        
        # first:subg
        start_pos_971= self.pos
        if (-5759443065050167280, start_pos_971) in self._p_memoized:
            result, self.pos = self._p_memoized[(-5759443065050167280, self.pos)]
        else:
            result = self.subg()
            self._p_memoized[(-5759443065050167280, start_pos_971)] = result, self.pos
        args['first'] = result
        if result is self.NoMatch:
            results_979 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 979))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 979)]
            # print self._p_error_stack
        else:
            results_979.append(result)
                            
            
            # rest:( edge? subg )*
            # ( edge? subg )*
            results_977 = []
            while 42:
                # edge? subg
                self.p_save()
                results_976 = []
                
                # edge?
                start_pos_973= self.pos
                if (-7948786896426778816, start_pos_973) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-7948786896426778816, self.pos)]
                else:
                    result = self.edge()
                    self._p_memoized[(-7948786896426778816, start_pos_973)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_976 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 976))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 976)]
                    # print self._p_error_stack
                else:
                    results_976.append(result)
                                    
                    
                    start_pos_975= self.pos
                    if (-5759443065050167280, start_pos_975) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-5759443065050167280, self.pos)]
                    else:
                        result = self.subg()
                        self._p_memoized[(-5759443065050167280, start_pos_975)] = result, self.pos
                    if result is self.NoMatch:
                        results_976 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 976))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 976)]
                        # print self._p_error_stack
                    else:
                        results_976.append(result)
                                        
                if results_976 is not self.NoMatch:
                    self.p_discard()
                result = results_976
                if result is not self.NoMatch:
                    results_977.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_977
            args['rest'] = result
            if result is self.NoMatch:
                results_979 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 979))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 979)]
                # print self._p_error_stack
            else:
                results_979.append(result)
                                
        if results_979 is not self.NoMatch:
            self.p_discard()
        result = results_979
        if result is not self.NoMatch:
            result = self.on_graph(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 980))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 980)]
            # print self._p_error_stack
        return result

    def subg(self):
        '''subg <- ( __ node:NAME __ ) / ( __ "(" sub:graph ")" __ )'''
        args = dict()
        # ( __ node:NAME __ ) / ( __ "(" sub:graph ")" __ )
        self.p_save()
        # __ node:NAME __
        self.p_save()
        results_985 = []
        
        start_pos_981= self.pos
        if (-8814100482203370760, start_pos_981) in self._p_memoized:
            result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
        else:
            result = self.__()
            self._p_memoized[(-8814100482203370760, start_pos_981)] = result, self.pos
        if result is self.NoMatch:
            results_985 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 985))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 985)]
            # print self._p_error_stack
        else:
            results_985.append(result)
                            
            
            # node:NAME
            start_pos_982= self.pos
            if (-1978311826809070106, start_pos_982) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1978311826809070106, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(-1978311826809070106, start_pos_982)] = result, self.pos
            args['node'] = result
            if result is self.NoMatch:
                results_985 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 985))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 985)]
                # print self._p_error_stack
            else:
                results_985.append(result)
                                
                
                start_pos_984= self.pos
                if (-8814100482203370760, start_pos_984) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
                else:
                    result = self.__()
                    self._p_memoized[(-8814100482203370760, start_pos_984)] = result, self.pos
                if result is self.NoMatch:
                    results_985 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 985))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 985)]
                    # print self._p_error_stack
                else:
                    results_985.append(result)
                                    
        if results_985 is not self.NoMatch:
            self.p_discard()
        result = results_985
        if result is self.NoMatch:
            # __ "(" sub:graph ")" __
            self.p_save()
            results_992 = []
            
            start_pos_986= self.pos
            if (-8814100482203370760, start_pos_986) in self._p_memoized:
                result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
            else:
                result = self.__()
                self._p_memoized[(-8814100482203370760, start_pos_986)] = result, self.pos
            if result is self.NoMatch:
                results_992 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 992))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 992)]
                # print self._p_error_stack
            else:
                results_992.append(result)
                                
                
                # "("
                result = self.p_startswith('(', False)
                if not result:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 987))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 987)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    results_992 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 992))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 992)]
                    # print self._p_error_stack
                else:
                    results_992.append(result)
                                    
                    
                    # sub:graph
                    start_pos_988= self.pos
                    if (-5581319625009503278, start_pos_988) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-5581319625009503278, self.pos)]
                    else:
                        result = self.graph()
                        self._p_memoized[(-5581319625009503278, start_pos_988)] = result, self.pos
                    args['sub'] = result
                    if result is self.NoMatch:
                        results_992 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 992))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 992)]
                        # print self._p_error_stack
                    else:
                        results_992.append(result)
                                        
                        
                        # ")"
                        result = self.p_startswith(')', False)
                        if not result:
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 990))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 990)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is self.NoMatch:
                            results_992 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 992))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 992)]
                            # print self._p_error_stack
                        else:
                            results_992.append(result)
                                            
                            
                            start_pos_991= self.pos
                            if (-8814100482203370760, start_pos_991) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
                            else:
                                result = self.__()
                                self._p_memoized[(-8814100482203370760, start_pos_991)] = result, self.pos
                            if result is self.NoMatch:
                                results_992 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 992))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 992)]
                                # print self._p_error_stack
                            else:
                                results_992.append(result)
                                                
            if results_992 is not self.NoMatch:
                self.p_discard()
            result = results_992
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 993))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 993)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self.on_subg(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 994))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 994)]
            # print self._p_error_stack
        return result

    def edge(self):
        '''edge <- left:ARC labels:arguments? right:ARC'''
        args = dict()
        # left:ARC labels:arguments? right:ARC
        self.p_save()
        results_1002 = []
        
        # left:ARC
        start_pos_995= self.pos
        if (-8976913129894318965, start_pos_995) in self._p_memoized:
            result, self.pos = self._p_memoized[(-8976913129894318965, self.pos)]
        else:
            result = self.ARC()
            self._p_memoized[(-8976913129894318965, start_pos_995)] = result, self.pos
        args['left'] = result
        if result is self.NoMatch:
            results_1002 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1002))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1002)]
            # print self._p_error_stack
        else:
            results_1002.append(result)
                            
            
            # labels:arguments?
            # arguments?
            start_pos_997= self.pos
            if (-5835334544454164282, start_pos_997) in self._p_memoized:
                result, self.pos = self._p_memoized[(-5835334544454164282, self.pos)]
            else:
                result = self.arguments()
                self._p_memoized[(-5835334544454164282, start_pos_997)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['labels'] = result
            if result is self.NoMatch:
                results_1002 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 1002))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 1002)]
                # print self._p_error_stack
            else:
                results_1002.append(result)
                                
                
                # right:ARC
                start_pos_1000= self.pos
                if (-8976913129894318965, start_pos_1000) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-8976913129894318965, self.pos)]
                else:
                    result = self.ARC()
                    self._p_memoized[(-8976913129894318965, start_pos_1000)] = result, self.pos
                args['right'] = result
                if result is self.NoMatch:
                    results_1002 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 1002))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 1002)]
                    # print self._p_error_stack
                else:
                    results_1002.append(result)
                                    
        if results_1002 is not self.NoMatch:
            self.p_discard()
        result = results_1002
        if result is not self.NoMatch:
            result = self.on_edge(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1003))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1003)]
            # print self._p_error_stack
        return result

    def ARC(self):
        '''ARC <- __ arc:[<>] __'''
        args = dict()
        # __ arc:[<>] __
        self.p_save()
        results_1008 = []
        
        start_pos_1004= self.pos
        if (-8814100482203370760, start_pos_1004) in self._p_memoized:
            result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
        else:
            result = self.__()
            self._p_memoized[(-8814100482203370760, start_pos_1004)] = result, self.pos
        if result is self.NoMatch:
            results_1008 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1008))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1008)]
            # print self._p_error_stack
        else:
            results_1008.append(result)
                            
            
            # arc:[<>]
            # [<>]
            self.p_save()
            n = self.p_next()
            if n is not None and n in '<>':
                self.p_discard()
                result = n
            else:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 1005))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 1005)]
                # print self._p_error_stack
                result = self.NoMatch
            args['arc'] = result
            if result is self.NoMatch:
                results_1008 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 1008))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 1008)]
                # print self._p_error_stack
            else:
                results_1008.append(result)
                                
                
                start_pos_1007= self.pos
                if (-8814100482203370760, start_pos_1007) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-8814100482203370760, self.pos)]
                else:
                    result = self.__()
                    self._p_memoized[(-8814100482203370760, start_pos_1007)] = result, self.pos
                if result is self.NoMatch:
                    results_1008 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 1008))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 1008)]
                    # print self._p_error_stack
                else:
                    results_1008.append(result)
                                    
        if results_1008 is not self.NoMatch:
            self.p_discard()
        result = results_1008
        if result is not self.NoMatch:
            result = args['arc']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1009))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1009)]
            # print self._p_error_stack
        return result

    def __(self):
        '''__ <- ~\'([ \t\n\r↦↤]*(#[^\n]*)?)*\''''
        args = dict()
        # ~'([ \t\n\r↦↤]*(#[^\n]*)?)*'
        regex = self._p_py_constants[1010]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1010))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1010)]
            # print self._p_error_stack
            result = self.NoMatch
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 1011))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 1011)]
            # print self._p_error_stack
        return result


    _p_expressions = {
        291: _Expr(is_syntaxic_terminal=False, expected=['__']),
        292: _Expr(is_syntaxic_terminal=False, expected=['rule']),
        293: _Expr(is_syntaxic_terminal=False, expected=['__']),
        294: _Expr(is_syntaxic_terminal=False, expected=['rule __'], exprs=True),
        295: _Expr(is_syntaxic_terminal=False, expected=['( rule __ )+'], expr=True),
        296: _Expr(is_syntaxic_terminal=False, expected=['rules:( rule __ )+'], expr=True),
        297: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], exprs=True),
        298: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], expr=True),
        299: _Expr(is_syntaxic_terminal=False, expected=['"`"']),
        300: _Expr(is_syntaxic_terminal=False, expected=['"`"?'], expr=True),
        301: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"?'], expr=True),
        302: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        303: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        304: _Expr(is_syntaxic_terminal=False, expected=['__']),
        305: _Expr(is_syntaxic_terminal=False, expected=['alias']),
        306: _Expr(is_syntaxic_terminal=False, expected=['alias:alias'], expr=True),
        307: _Expr(is_syntaxic_terminal=False, expected=['_']),
        308: _Expr(is_syntaxic_terminal=False, expected=['alias:alias _'], exprs=True),
        309: _Expr(is_syntaxic_terminal=False, expected=['( alias:alias _ )?'], expr=True),
        310: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        311: _Expr(is_syntaxic_terminal=False, expected=['__']),
        312: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        313: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        314: _Expr(is_syntaxic_terminal=False, expected=['__']),
        315: _Expr(is_syntaxic_terminal=False, expected=['code_block']),
        316: _Expr(is_syntaxic_terminal=False, expected=['__ code_block'], exprs=True),
        317: _Expr(is_syntaxic_terminal=False, expected=['( __ code_block )?'], expr=True),
        318: _Expr(is_syntaxic_terminal=False, expected=['code:( __ code_block )?'], expr=True),
        319: _Expr(is_syntaxic_terminal=False, expected=['EOS']),
        320: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"? name:identifier_name __ ( alias:alias _ )? "<-" __ expr:expression code:( __ code_block )? EOS'], exprs=True),
        321: _Expr(is_syntaxic_terminal=True, expected=['RULE'], expr=True),
        322: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        323: _Expr(is_syntaxic_terminal=False, expected=['code']),
        324: _Expr(is_syntaxic_terminal=False, expected=['code:code'], expr=True),
        325: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        326: _Expr(is_syntaxic_terminal=False, expected=['"{" code:code "}"'], exprs=True),
        327: _Expr(is_syntaxic_terminal=True, expected=['CODE_BLOCK'], expr=True),
        328: _Expr(is_syntaxic_terminal=False, expected=['[{}]']),
        329: _Expr(is_syntaxic_terminal=False, expected=['![{}]'], expr=True),
        330: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        331: _Expr(is_syntaxic_terminal=False, expected=['![{}] source_char'], exprs=True),
        332: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+'], expr=True),
        333: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        334: _Expr(is_syntaxic_terminal=False, expected=['code']),
        335: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        336: _Expr(is_syntaxic_terminal=False, expected=['"{" code "}"'], exprs=True),
        337: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+ / ( "{" code "}" )'], exprs=True),
        338: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        339: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        340: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        341: _Expr(is_syntaxic_terminal=True, expected=['ALIAS'], expr=True),
        342: _Expr(is_syntaxic_terminal=False, expected=['choice_expr']),
        343: _Expr(is_syntaxic_terminal=True, expected=['EXPRESSION'], expr=True),
        344: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        345: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr'], expr=True),
        346: _Expr(is_syntaxic_terminal=False, expected=['__']),
        347: _Expr(is_syntaxic_terminal=False, expected=['"/"']),
        348: _Expr(is_syntaxic_terminal=False, expected=['__']),
        349: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        350: _Expr(is_syntaxic_terminal=False, expected=['__ "/" __ seq_expr'], exprs=True),
        351: _Expr(is_syntaxic_terminal=False, expected=['( __ "/" __ seq_expr )*'], expr=True),
        352: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ "/" __ seq_expr )*'], expr=True),
        353: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], exprs=True),
        354: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], expr=True),
        355: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr']),
        356: _Expr(is_syntaxic_terminal=False, expected=['lit_expr']),
        357: _Expr(is_syntaxic_terminal=False, expected=['char_range_expr']),
        358: _Expr(is_syntaxic_terminal=False, expected=['any_char_expr']),
        359: _Expr(is_syntaxic_terminal=False, expected=['rule_expr']),
        360: _Expr(is_syntaxic_terminal=False, expected=['sub_expr']),
        361: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], exprs=True),
        362: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], expr=True),
        363: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        364: _Expr(is_syntaxic_terminal=False, expected=['__']),
        365: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        366: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        367: _Expr(is_syntaxic_terminal=False, expected=['__']),
        368: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        369: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], exprs=True),
        370: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], expr=True),
        371: _Expr(is_syntaxic_terminal=False, expected=['"~"']),
        372: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        373: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        374: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]']),
        375: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]*'], expr=True),
        376: _Expr(is_syntaxic_terminal=False, expected=['flags:[iLmsux]*'], expr=True),
        377: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], exprs=True),
        378: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], expr=True),
        379: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        380: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        381: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        382: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        383: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        384: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], exprs=True),
        385: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], expr=True),
        386: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        387: _Expr(is_syntaxic_terminal=False, expected=['double_string_char']),
        388: _Expr(is_syntaxic_terminal=False, expected=['double_string_char*'], expr=True),
        389: _Expr(is_syntaxic_terminal=False, expected=['content:double_string_char*'], expr=True),
        390: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        391: _Expr(is_syntaxic_terminal=False, expected=['\'"\' content:double_string_char* \'"\''], exprs=True),
        392: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        393: _Expr(is_syntaxic_terminal=False, expected=['single_string_char']),
        394: _Expr(is_syntaxic_terminal=False, expected=['single_string_char*'], expr=True),
        395: _Expr(is_syntaxic_terminal=False, expected=['content:single_string_char*'], expr=True),
        396: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        397: _Expr(is_syntaxic_terminal=False, expected=['"\'" content:single_string_char* "\'"'], exprs=True),
        398: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], exprs=True),
        399: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], expr=True),
        400: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        401: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        402: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        403: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / "\\\\" / EOL'], exprs=True),
        404: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL )'], expr=True),
        405: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        406: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        407: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL ) char:source_char'], exprs=True),
        408: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        409: _Expr(is_syntaxic_terminal=False, expected=['double_string_escape']),
        410: _Expr(is_syntaxic_terminal=False, expected=['char:double_string_escape'], expr=True),
        411: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:double_string_escape'], exprs=True),
        412: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], exprs=True),
        413: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], expr=True),
        414: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        415: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        416: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        417: _Expr(is_syntaxic_terminal=False, expected=['"\'" / "\\\\" / EOL'], exprs=True),
        418: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL )'], expr=True),
        419: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        420: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        421: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL ) char:source_char'], exprs=True),
        422: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        423: _Expr(is_syntaxic_terminal=False, expected=['single_string_escape']),
        424: _Expr(is_syntaxic_terminal=False, expected=['char:single_string_escape'], expr=True),
        425: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:single_string_escape'], exprs=True),
        426: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], exprs=True),
        427: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], expr=True),
        428: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        429: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        430: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], exprs=True),
        431: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], expr=True),
        432: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        433: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        434: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], exprs=True),
        435: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], expr=True),
        436: _Expr(is_syntaxic_terminal=False, expected=['"."']),
        437: _Expr(is_syntaxic_terminal=False, expected=['"."'], expr=True),
        438: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        439: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        440: _Expr(is_syntaxic_terminal=False, expected=['__']),
        441: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        442: _Expr(is_syntaxic_terminal=False, expected=['__']),
        443: _Expr(is_syntaxic_terminal=False, expected=['string_literal __'], exprs=True),
        444: _Expr(is_syntaxic_terminal=False, expected=['( string_literal __ )?'], expr=True),
        445: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        446: _Expr(is_syntaxic_terminal=False, expected=['__ ( string_literal __ )? "<-"'], exprs=True),
        447: _Expr(is_syntaxic_terminal=False, expected=['!( __ ( string_literal __ )? "<-" )'], expr=True),
        448: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], exprs=True),
        449: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], expr=True),
        450: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        451: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr'], expr=True),
        452: _Expr(is_syntaxic_terminal=False, expected=['__']),
        453: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        454: _Expr(is_syntaxic_terminal=False, expected=['__ labeled_expr'], exprs=True),
        455: _Expr(is_syntaxic_terminal=False, expected=['( __ labeled_expr )*'], expr=True),
        456: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ labeled_expr )*'], expr=True),
        457: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], exprs=True),
        458: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], expr=True),
        459: _Expr(is_syntaxic_terminal=False, expected=['identifier']),
        460: _Expr(is_syntaxic_terminal=False, expected=['identifier?'], expr=True),
        461: _Expr(is_syntaxic_terminal=False, expected=['__']),
        462: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        463: _Expr(is_syntaxic_terminal=False, expected=['__']),
        464: _Expr(is_syntaxic_terminal=False, expected=['identifier? __ ":" __'], exprs=True),
        465: _Expr(is_syntaxic_terminal=False, expected=['( identifier? __ ":" __ )?'], expr=True),
        466: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )?'], expr=True),
        467: _Expr(is_syntaxic_terminal=False, expected=['prefixed_expr']),
        468: _Expr(is_syntaxic_terminal=False, expected=['expr:prefixed_expr'], expr=True),
        469: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], exprs=True),
        470: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], expr=True),
        471: _Expr(is_syntaxic_terminal=False, expected=['prefix']),
        472: _Expr(is_syntaxic_terminal=False, expected=['__']),
        473: _Expr(is_syntaxic_terminal=False, expected=['prefix __'], exprs=True),
        474: _Expr(is_syntaxic_terminal=False, expected=['( prefix __ )?'], expr=True),
        475: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )?'], expr=True),
        476: _Expr(is_syntaxic_terminal=False, expected=['suffixed_expr']),
        477: _Expr(is_syntaxic_terminal=False, expected=['expr:suffixed_expr'], expr=True),
        478: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], exprs=True),
        479: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], expr=True),
        480: _Expr(is_syntaxic_terminal=False, expected=['primary_expr']),
        481: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr'], expr=True),
        482: _Expr(is_syntaxic_terminal=False, expected=['__']),
        483: _Expr(is_syntaxic_terminal=False, expected=['suffix']),
        484: _Expr(is_syntaxic_terminal=False, expected=['__ suffix'], exprs=True),
        485: _Expr(is_syntaxic_terminal=False, expected=['( __ suffix )?'], expr=True),
        486: _Expr(is_syntaxic_terminal=False, expected=['suffix:( __ suffix )?'], expr=True),
        487: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], exprs=True),
        488: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], expr=True),
        489: _Expr(is_syntaxic_terminal=False, expected=['[?+*]']),
        490: _Expr(is_syntaxic_terminal=False, expected=['[?+*]'], expr=True),
        491: _Expr(is_syntaxic_terminal=False, expected=['[!&]']),
        492: _Expr(is_syntaxic_terminal=False, expected=['[!&]'], expr=True),
        493: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        494: _Expr(is_syntaxic_terminal=False, expected=['class_char_range']),
        495: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        496: _Expr(is_syntaxic_terminal=False, expected=['class_char_range / class_char'], exprs=True),
        497: _Expr(is_syntaxic_terminal=False, expected=['( class_char_range / class_char )*'], expr=True),
        498: _Expr(is_syntaxic_terminal=False, expected=['content:( class_char_range / class_char )*'], expr=True),
        499: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        500: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        501: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        502: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        503: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], exprs=True),
        504: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], expr=True),
        505: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        506: _Expr(is_syntaxic_terminal=False, expected=['start:class_char'], expr=True),
        507: _Expr(is_syntaxic_terminal=False, expected=['"-"']),
        508: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        509: _Expr(is_syntaxic_terminal=False, expected=['end:class_char'], expr=True),
        510: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], exprs=True),
        511: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], expr=True),
        512: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        513: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        514: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        515: _Expr(is_syntaxic_terminal=False, expected=['"]" / "\\\\" / EOL'], exprs=True),
        516: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL )'], expr=True),
        517: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        518: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        519: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL ) char:source_char'], exprs=True),
        520: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        521: _Expr(is_syntaxic_terminal=False, expected=['char_class_escape']),
        522: _Expr(is_syntaxic_terminal=False, expected=['char:char_class_escape'], expr=True),
        523: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:char_class_escape'], exprs=True),
        524: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], exprs=True),
        525: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], expr=True),
        526: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        527: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        528: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], exprs=True),
        529: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], expr=True),
        530: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape']),
        531: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape'], expr=True),
        532: _Expr(is_syntaxic_terminal=False, expected=['"a"']),
        533: _Expr(is_syntaxic_terminal=False, expected=['"b"']),
        534: _Expr(is_syntaxic_terminal=False, expected=['"n"']),
        535: _Expr(is_syntaxic_terminal=False, expected=['"f"']),
        536: _Expr(is_syntaxic_terminal=False, expected=['"r"']),
        537: _Expr(is_syntaxic_terminal=False, expected=['"t"']),
        538: _Expr(is_syntaxic_terminal=False, expected=['"v"']),
        539: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        540: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], exprs=True),
        541: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], expr=True),
        542: _Expr(is_syntaxic_terminal=False, expected=['"#"']),
        543: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        544: _Expr(is_syntaxic_terminal=False, expected=['!EOL'], expr=True),
        545: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        546: _Expr(is_syntaxic_terminal=False, expected=['!EOL source_char'], exprs=True),
        547: _Expr(is_syntaxic_terminal=False, expected=['( !EOL source_char )*'], expr=True),
        548: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], exprs=True),
        549: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], expr=True),
        550: _Expr(is_syntaxic_terminal=False, expected=['.']),
        551: _Expr(is_syntaxic_terminal=False, expected=['.'], expr=True),
        552: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        553: _Expr(is_syntaxic_terminal=False, expected=['identifier_name'], expr=True),
        554: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        555: _Expr(is_syntaxic_terminal=False, expected=['identifier_part']),
        556: _Expr(is_syntaxic_terminal=False, expected=['identifier_part*'], expr=True),
        557: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], exprs=True),
        558: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], expr=True),
        559: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]']),
        560: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]'], expr=True),
        561: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        562: _Expr(is_syntaxic_terminal=False, expected=['[0-9]']),
        563: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], exprs=True),
        564: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], expr=True),
        565: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        566: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        567: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        568: _Expr(is_syntaxic_terminal=False, expected=['whitespace / EOL / comment'], exprs=True),
        569: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        570: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        571: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        572: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        573: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        574: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]']),
        575: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]'], expr=True),
        576: _Expr(is_syntaxic_terminal=False, expected=['"\\n"']),
        577: _Expr(is_syntaxic_terminal=False, expected=['"\\n"'], expr=True),
        578: _Expr(is_syntaxic_terminal=False, expected=['_']),
        579: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        580: _Expr(is_syntaxic_terminal=False, expected=['comment?'], expr=True),
        581: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        582: _Expr(is_syntaxic_terminal=False, expected=['_ comment? EOL'], exprs=True),
        583: _Expr(is_syntaxic_terminal=False, expected=['__']),
        584: _Expr(is_syntaxic_terminal=False, expected=['EOF']),
        585: _Expr(is_syntaxic_terminal=False, expected=['__ EOF'], exprs=True),
        586: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], exprs=True),
        587: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], expr=True),
        588: _Expr(is_syntaxic_terminal=False, expected=['.']),
        589: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        590: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        591: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        592: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        593: _Expr(is_syntaxic_terminal=False, expected=['spec']),
        594: _Expr(is_syntaxic_terminal=False, expected=['spec:spec'], expr=True),
        595: _Expr(is_syntaxic_terminal=False, expected=['EOF']),
        596: _Expr(is_syntaxic_terminal=False, expected=['NL? spec:spec EOF'], exprs=True),
        597: _Expr(is_syntaxic_terminal=False, expected=['NL? spec:spec EOF'], expr=True),
        598: _Expr(is_syntaxic_terminal=False, expected=['_']),
        599: _Expr(is_syntaxic_terminal=False, expected=["~'#[^\\n]*'"]),
        600: _Expr(is_syntaxic_terminal=False, expected=["~'#[^\\n]*'?"], expr=True),
        601: _Expr(is_syntaxic_terminal=False, expected=['"\\n"']),
        602: _Expr(is_syntaxic_terminal=False, expected=['_']),
        603: _Expr(is_syntaxic_terminal=False, expected=['_ ~\'#[^\\n]*\'? "\\n" _'], exprs=True),
        604: _Expr(is_syntaxic_terminal=False, expected=['( _ ~\'#[^\\n]*\'? "\\n" _ )+'], expr=True),
        605: _Expr(is_syntaxic_terminal=False, expected=['( _ ~\'#[^\\n]*\'? "\\n" _ )+'], expr=True),
        606: _Expr(is_syntaxic_terminal=False, expected=['_']),
        607: _Expr(is_syntaxic_terminal=False, expected=['"@"']),
        608: _Expr(is_syntaxic_terminal=False, expected=['_']),
        609: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], exprs=True),
        610: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], expr=True),
        611: _Expr(is_syntaxic_terminal=False, expected=['_']),
        612: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        613: _Expr(is_syntaxic_terminal=False, expected=['_']),
        614: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], exprs=True),
        615: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], expr=True),
        616: _Expr(is_syntaxic_terminal=False, expected=['_']),
        617: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        618: _Expr(is_syntaxic_terminal=False, expected=['_']),
        619: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], exprs=True),
        620: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], expr=True),
        621: _Expr(is_syntaxic_terminal=False, expected=['_']),
        622: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        623: _Expr(is_syntaxic_terminal=False, expected=['_']),
        624: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], exprs=True),
        625: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], expr=True),
        626: _Expr(is_syntaxic_terminal=False, expected=['_']),
        627: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        628: _Expr(is_syntaxic_terminal=False, expected=['_']),
        629: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], exprs=True),
        630: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], expr=True),
        631: _Expr(is_syntaxic_terminal=False, expected=['_']),
        632: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        633: _Expr(is_syntaxic_terminal=False, expected=['_']),
        634: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], exprs=True),
        635: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], expr=True),
        636: _Expr(is_syntaxic_terminal=False, expected=['_']),
        637: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        638: _Expr(is_syntaxic_terminal=False, expected=['_']),
        639: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], exprs=True),
        640: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], expr=True),
        641: _Expr(is_syntaxic_terminal=False, expected=['_']),
        642: _Expr(is_syntaxic_terminal=False, expected=['"~"']),
        643: _Expr(is_syntaxic_terminal=False, expected=['_']),
        644: _Expr(is_syntaxic_terminal=False, expected=['_ "~" _'], exprs=True),
        645: _Expr(is_syntaxic_terminal=False, expected=['_ "~" _'], expr=True),
        646: _Expr(is_syntaxic_terminal=False, expected=['_']),
        647: _Expr(is_syntaxic_terminal=False, expected=['"*"']),
        648: _Expr(is_syntaxic_terminal=False, expected=['_']),
        649: _Expr(is_syntaxic_terminal=False, expected=['_ "*" _'], exprs=True),
        650: _Expr(is_syntaxic_terminal=False, expected=['_ "*" _'], expr=True),
        651: _Expr(is_syntaxic_terminal=False, expected=['_']),
        652: _Expr(is_syntaxic_terminal=False, expected=['","']),
        653: _Expr(is_syntaxic_terminal=False, expected=['_']),
        654: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], exprs=True),
        655: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], expr=True),
        656: _Expr(is_syntaxic_terminal=False, expected=['_']),
        657: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        658: _Expr(is_syntaxic_terminal=False, expected=['_']),
        659: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], exprs=True),
        660: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], expr=True),
        661: _Expr(is_syntaxic_terminal=False, expected=['_']),
        662: _Expr(is_syntaxic_terminal=False, expected=['"↦"']),
        663: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        664: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        665: _Expr(is_syntaxic_terminal=False, expected=['_']),
        666: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], exprs=True),
        667: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], expr=True),
        668: _Expr(is_syntaxic_terminal=False, expected=['_']),
        669: _Expr(is_syntaxic_terminal=False, expected=['"↤"']),
        670: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        671: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        672: _Expr(is_syntaxic_terminal=False, expected=['_']),
        673: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], exprs=True),
        674: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], expr=True),
        675: _Expr(is_syntaxic_terminal=False, expected=['.']),
        676: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        677: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        678: _Expr(is_syntaxic_terminal=False, expected=['[\\t ]']),
        679: _Expr(is_syntaxic_terminal=False, expected=['[\\t ]*'], expr=True),
        680: _Expr(is_syntaxic_terminal=False, expected=['[\\t ]*'], expr=True),
        681: _Expr(is_syntaxic_terminal=False, expected=['_']),
        682: _Expr(is_syntaxic_terminal=False, expected=['[+-]']),
        683: _Expr(is_syntaxic_terminal=False, expected=['[+-]?'], expr=True),
        684: _Expr(is_syntaxic_terminal=False, expected=['_']),
        685: _Expr(is_syntaxic_terminal=False, expected=['[0-9]']),
        686: _Expr(is_syntaxic_terminal=False, expected=['[0-9]+'], expr=True),
        687: _Expr(is_syntaxic_terminal=False, expected=['_']),
        688: _Expr(is_syntaxic_terminal=False, expected=['_ [+-]? _ [0-9]+ _'], exprs=True),
        689: _Expr(is_syntaxic_terminal=False, expected=['_ [+-]? _ [0-9]+ _'], expr=True),
        690: _Expr(is_syntaxic_terminal=False, expected=['_']),
        691: _Expr(is_syntaxic_terminal=False, expected=['[a-zA-Z]']),
        692: _Expr(is_syntaxic_terminal=False, expected=['[a-z0-9_A-Z]']),
        693: _Expr(is_syntaxic_terminal=False, expected=['[a-z0-9_A-Z]*'], expr=True),
        694: _Expr(is_syntaxic_terminal=False, expected=['_']),
        695: _Expr(is_syntaxic_terminal=False, expected=['_ [a-zA-Z] [a-z0-9_A-Z]* _'], exprs=True),
        696: _Expr(is_syntaxic_terminal=False, expected=['_ [a-zA-Z] [a-z0-9_A-Z]* _'], expr=True),
        697: _Expr(is_syntaxic_terminal=False, expected=['locdef']),
        698: _Expr(is_syntaxic_terminal=False, expected=['locdef+'], expr=True),
        699: _Expr(is_syntaxic_terminal=False, expected=['locations:locdef+'], expr=True),
        700: _Expr(is_syntaxic_terminal=False, expected=['instance']),
        701: _Expr(is_syntaxic_terminal=False, expected=['instance+'], expr=True),
        702: _Expr(is_syntaxic_terminal=False, expected=['instances:instance+'], expr=True),
        703: _Expr(is_syntaxic_terminal=False, expected=['graph']),
        704: _Expr(is_syntaxic_terminal=False, expected=['graph:graph'], expr=True),
        705: _Expr(is_syntaxic_terminal=False, expected=['locations:locdef+ instances:instance+ graph:graph'], exprs=True),
        706: _Expr(is_syntaxic_terminal=False, expected=['locations:locdef+ instances:instance+ graph:graph'], expr=True),
        707: _Expr(is_syntaxic_terminal=False, expected=['AT']),
        708: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        709: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        710: _Expr(is_syntaxic_terminal=False, expected=['labels']),
        711: _Expr(is_syntaxic_terminal=False, expected=['labels?'], expr=True),
        712: _Expr(is_syntaxic_terminal=False, expected=['labels:labels?'], expr=True),
        713: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        714: _Expr(is_syntaxic_terminal=False, expected=['params']),
        715: _Expr(is_syntaxic_terminal=False, expected=['params?'], expr=True),
        716: _Expr(is_syntaxic_terminal=False, expected=['params:params?'], expr=True),
        717: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        718: _Expr(is_syntaxic_terminal=False, expected=['COLON']),
        719: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        720: _Expr(is_syntaxic_terminal=False, expected=['INDENT']),
        721: _Expr(is_syntaxic_terminal=False, expected=['location']),
        722: _Expr(is_syntaxic_terminal=False, expected=['location:location'], expr=True),
        723: _Expr(is_syntaxic_terminal=False, expected=['DEDENT']),
        724: _Expr(is_syntaxic_terminal=False, expected=['AT name:NAME labels:labels? LP params:params? RP COLON NL INDENT location:location DEDENT'], exprs=True),
        725: _Expr(is_syntaxic_terminal=False, expected=['AT name:NAME labels:labels? LP params:params? RP COLON NL INDENT location:location DEDENT'], expr=True),
        726: _Expr(is_syntaxic_terminal=False, expected=['vardef']),
        727: _Expr(is_syntaxic_terminal=False, expected=['vardef+'], expr=True),
        728: _Expr(is_syntaxic_terminal=False, expected=['variables:vardef+'], expr=True),
        729: _Expr(is_syntaxic_terminal=False, expected=['rule']),
        730: _Expr(is_syntaxic_terminal=False, expected=['rule+'], expr=True),
        731: _Expr(is_syntaxic_terminal=False, expected=['rules:rule+'], expr=True),
        732: _Expr(is_syntaxic_terminal=False, expected=['variables:vardef+ rules:rule+'], exprs=True),
        733: _Expr(is_syntaxic_terminal=False, expected=['variables:vardef+ rules:rule+'], expr=True),
        734: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        735: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        736: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        737: _Expr(is_syntaxic_terminal=False, expected=['COMMA NAME'], exprs=True),
        738: _Expr(is_syntaxic_terminal=False, expected=['( COMMA NAME )*'], expr=True),
        739: _Expr(is_syntaxic_terminal=False, expected=['NAME ( COMMA NAME )*'], exprs=True),
        740: _Expr(is_syntaxic_terminal=False, expected=['NAME ( COMMA NAME )*'], expr=True),
        741: _Expr(is_syntaxic_terminal=False, expected=['LCB']),
        742: _Expr(is_syntaxic_terminal=False, expected=['arguments']),
        743: _Expr(is_syntaxic_terminal=False, expected=['arguments?'], expr=True),
        744: _Expr(is_syntaxic_terminal=False, expected=['lbl:arguments?'], expr=True),
        745: _Expr(is_syntaxic_terminal=False, expected=['RCB']),
        746: _Expr(is_syntaxic_terminal=False, expected=['LCB lbl:arguments? RCB'], exprs=True),
        747: _Expr(is_syntaxic_terminal=False, expected=['LCB lbl:arguments? RCB'], expr=True),
        748: _Expr(is_syntaxic_terminal=False, expected=['arg']),
        749: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        750: _Expr(is_syntaxic_terminal=False, expected=['arg']),
        751: _Expr(is_syntaxic_terminal=False, expected=['COMMA arg'], exprs=True),
        752: _Expr(is_syntaxic_terminal=False, expected=['( COMMA arg )*'], expr=True),
        753: _Expr(is_syntaxic_terminal=False, expected=['arg ( COMMA arg )*'], exprs=True),
        754: _Expr(is_syntaxic_terminal=False, expected=['arg ( COMMA arg )*'], expr=True),
        755: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        756: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        757: _Expr(is_syntaxic_terminal=False, expected=['NUMBER / NAME'], exprs=True),
        758: _Expr(is_syntaxic_terminal=False, expected=['NUMBER / NAME'], expr=True),
        759: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        760: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        761: _Expr(is_syntaxic_terminal=False, expected=['boundaries']),
        762: _Expr(is_syntaxic_terminal=False, expected=['boundaries?'], expr=True),
        763: _Expr(is_syntaxic_terminal=False, expected=['bounds:boundaries?'], expr=True),
        764: _Expr(is_syntaxic_terminal=False, expected=['_']),
        765: _Expr(is_syntaxic_terminal=False, expected=['":="']),
        766: _Expr(is_syntaxic_terminal=False, expected=['_']),
        767: _Expr(is_syntaxic_terminal=False, expected=['expr']),
        768: _Expr(is_syntaxic_terminal=False, expected=['init:expr'], expr=True),
        769: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        770: _Expr(is_syntaxic_terminal=False, expected=['name:NAME bounds:boundaries? _ ":=" _ init:expr NL'], exprs=True),
        771: _Expr(is_syntaxic_terminal=False, expected=['name:NAME bounds:boundaries? _ ":=" _ init:expr NL'], expr=True),
        772: _Expr(is_syntaxic_terminal=False, expected=['COLON']),
        773: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        774: _Expr(is_syntaxic_terminal=False, expected=['lower:NUMBER'], expr=True),
        775: _Expr(is_syntaxic_terminal=False, expected=['_']),
        776: _Expr(is_syntaxic_terminal=False, expected=['".."']),
        777: _Expr(is_syntaxic_terminal=False, expected=['_']),
        778: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        779: _Expr(is_syntaxic_terminal=False, expected=['upper:NUMBER'], expr=True),
        780: _Expr(is_syntaxic_terminal=False, expected=['COLON lower:NUMBER _ ".." _ upper:NUMBER'], exprs=True),
        781: _Expr(is_syntaxic_terminal=False, expected=['COLON lower:NUMBER _ ".." _ upper:NUMBER'], expr=True),
        782: _Expr(is_syntaxic_terminal=False, expected=['conditions']),
        783: _Expr(is_syntaxic_terminal=False, expected=['conditions:conditions'], expr=True),
        784: _Expr(is_syntaxic_terminal=False, expected=['_']),
        785: _Expr(is_syntaxic_terminal=False, expected=['"=>"']),
        786: _Expr(is_syntaxic_terminal=False, expected=['"->"']),
        787: _Expr(is_syntaxic_terminal=False, expected=['"=>" / "->"'], exprs=True),
        788: _Expr(is_syntaxic_terminal=False, expected=['priority:( "=>" / "->" )'], expr=True),
        789: _Expr(is_syntaxic_terminal=False, expected=['_']),
        790: _Expr(is_syntaxic_terminal=False, expected=['assignments']),
        791: _Expr(is_syntaxic_terminal=False, expected=['assignments:assignments'], expr=True),
        792: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        793: _Expr(is_syntaxic_terminal=False, expected=['conditions:conditions _ priority:( "=>" / "->" ) _ assignments:assignments NL'], exprs=True),
        794: _Expr(is_syntaxic_terminal=False, expected=['conditions:conditions _ priority:( "=>" / "->" ) _ assignments:assignments NL'], expr=True),
        795: _Expr(is_syntaxic_terminal=False, expected=['cond']),
        796: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        797: _Expr(is_syntaxic_terminal=False, expected=['cond']),
        798: _Expr(is_syntaxic_terminal=False, expected=['COMMA cond'], exprs=True),
        799: _Expr(is_syntaxic_terminal=False, expected=['( COMMA cond )*'], expr=True),
        800: _Expr(is_syntaxic_terminal=False, expected=['cond ( COMMA cond )*'], exprs=True),
        801: _Expr(is_syntaxic_terminal=False, expected=['cond ( COMMA cond )*'], expr=True),
        802: _Expr(is_syntaxic_terminal=False, expected=['expr']),
        803: _Expr(is_syntaxic_terminal=False, expected=['left:expr'], expr=True),
        804: _Expr(is_syntaxic_terminal=False, expected=['_']),
        805: _Expr(is_syntaxic_terminal=False, expected=['"=="']),
        806: _Expr(is_syntaxic_terminal=False, expected=['"<="']),
        807: _Expr(is_syntaxic_terminal=False, expected=['">="']),
        808: _Expr(is_syntaxic_terminal=False, expected=['"<"']),
        809: _Expr(is_syntaxic_terminal=False, expected=['">"']),
        810: _Expr(is_syntaxic_terminal=False, expected=['"!="']),
        811: _Expr(is_syntaxic_terminal=False, expected=['"==" / "<=" / ">=" / "<" / ">" / "!="'], exprs=True),
        812: _Expr(is_syntaxic_terminal=False, expected=['op:( "==" / "<=" / ">=" / "<" / ">" / "!=" )'], expr=True),
        813: _Expr(is_syntaxic_terminal=False, expected=['_']),
        814: _Expr(is_syntaxic_terminal=False, expected=['expr']),
        815: _Expr(is_syntaxic_terminal=False, expected=['right:expr'], expr=True),
        816: _Expr(is_syntaxic_terminal=False, expected=['left:expr _ op:( "==" / "<=" / ">=" / "<" / ">" / "!=" ) _ right:expr'], exprs=True),
        817: _Expr(is_syntaxic_terminal=False, expected=['left:expr _ op:( "==" / "<=" / ">=" / "<" / ">" / "!=" ) _ right:expr'], expr=True),
        818: _Expr(is_syntaxic_terminal=False, expected=['assign']),
        819: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        820: _Expr(is_syntaxic_terminal=False, expected=['assign']),
        821: _Expr(is_syntaxic_terminal=False, expected=['COMMA assign'], exprs=True),
        822: _Expr(is_syntaxic_terminal=False, expected=['( COMMA assign )*'], expr=True),
        823: _Expr(is_syntaxic_terminal=False, expected=['assign ( COMMA assign )*'], exprs=True),
        824: _Expr(is_syntaxic_terminal=False, expected=['assign ( COMMA assign )*'], expr=True),
        825: _Expr(is_syntaxic_terminal=False, expected=['variable']),
        826: _Expr(is_syntaxic_terminal=False, expected=['target:variable'], expr=True),
        827: _Expr(is_syntaxic_terminal=False, expected=['_']),
        828: _Expr(is_syntaxic_terminal=False, expected=['"+="']),
        829: _Expr(is_syntaxic_terminal=False, expected=['"-="']),
        830: _Expr(is_syntaxic_terminal=False, expected=['":="']),
        831: _Expr(is_syntaxic_terminal=False, expected=['"+=" / "-=" / ":="'], exprs=True),
        832: _Expr(is_syntaxic_terminal=False, expected=['op:( "+=" / "-=" / ":=" )'], expr=True),
        833: _Expr(is_syntaxic_terminal=False, expected=['_']),
        834: _Expr(is_syntaxic_terminal=False, expected=['expr']),
        835: _Expr(is_syntaxic_terminal=False, expected=['expr:expr'], expr=True),
        836: _Expr(is_syntaxic_terminal=False, expected=['target:variable _ op:( "+=" / "-=" / ":=" ) _ expr:expr'], exprs=True),
        837: _Expr(is_syntaxic_terminal=False, expected=['target:variable _ op:( "+=" / "-=" / ":=" ) _ expr:expr'], expr=True),
        838: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        839: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        840: _Expr(is_syntaxic_terminal=False, expected=['atloc']),
        841: _Expr(is_syntaxic_terminal=False, expected=['atloc?'], expr=True),
        842: _Expr(is_syntaxic_terminal=False, expected=['location:atloc?'], expr=True),
        843: _Expr(is_syntaxic_terminal=False, expected=['name:NAME location:atloc?'], exprs=True),
        844: _Expr(is_syntaxic_terminal=False, expected=['LSB']),
        845: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        846: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        847: _Expr(is_syntaxic_terminal=False, expected=['AT']),
        848: _Expr(is_syntaxic_terminal=False, expected=['neighbor']),
        849: _Expr(is_syntaxic_terminal=False, expected=['neighbor+'], expr=True),
        850: _Expr(is_syntaxic_terminal=False, expected=['forall:neighbor+'], expr=True),
        851: _Expr(is_syntaxic_terminal=False, expected=['RSB']),
        852: _Expr(is_syntaxic_terminal=False, expected=['LSB name:NAME AT forall:neighbor+ RSB'], exprs=True),
        853: _Expr(is_syntaxic_terminal=False, expected=['( name:NAME location:atloc? ) / ( LSB name:NAME AT forall:neighbor+ RSB )'], exprs=True),
        854: _Expr(is_syntaxic_terminal=False, expected=['( name:NAME location:atloc? ) / ( LSB name:NAME AT forall:neighbor+ RSB )'], expr=True),
        855: _Expr(is_syntaxic_terminal=False, expected=['AT']),
        856: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        857: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        858: _Expr(is_syntaxic_terminal=False, expected=['neighbor']),
        859: _Expr(is_syntaxic_terminal=False, expected=['neighbor+'], expr=True),
        860: _Expr(is_syntaxic_terminal=False, expected=['path:neighbor+'], expr=True),
        861: _Expr(is_syntaxic_terminal=False, expected=['name:NAME / path:neighbor+'], exprs=True),
        862: _Expr(is_syntaxic_terminal=False, expected=['AT ( name:NAME / path:neighbor+ )'], exprs=True),
        863: _Expr(is_syntaxic_terminal=False, expected=['AT ( name:NAME / path:neighbor+ )'], expr=True),
        864: _Expr(is_syntaxic_terminal=False, expected=['term']),
        865: _Expr(is_syntaxic_terminal=False, expected=['first:term'], expr=True),
        866: _Expr(is_syntaxic_terminal=False, expected=['[+-]']),
        867: _Expr(is_syntaxic_terminal=False, expected=['term']),
        868: _Expr(is_syntaxic_terminal=False, expected=['[+-] term'], exprs=True),
        869: _Expr(is_syntaxic_terminal=False, expected=['( [+-] term )*'], expr=True),
        870: _Expr(is_syntaxic_terminal=False, expected=['rest:( [+-] term )*'], expr=True),
        871: _Expr(is_syntaxic_terminal=False, expected=['first:term rest:( [+-] term )*'], exprs=True),
        872: _Expr(is_syntaxic_terminal=False, expected=['first:term rest:( [+-] term )*'], expr=True),
        873: _Expr(is_syntaxic_terminal=False, expected=['fact']),
        874: _Expr(is_syntaxic_terminal=False, expected=['first:fact'], expr=True),
        875: _Expr(is_syntaxic_terminal=False, expected=['[*/%]']),
        876: _Expr(is_syntaxic_terminal=False, expected=['fact']),
        877: _Expr(is_syntaxic_terminal=False, expected=['[*/%] fact'], exprs=True),
        878: _Expr(is_syntaxic_terminal=False, expected=['( [*/%] fact )*'], expr=True),
        879: _Expr(is_syntaxic_terminal=False, expected=['rest:( [*/%] fact )*'], expr=True),
        880: _Expr(is_syntaxic_terminal=False, expected=['first:fact rest:( [*/%] fact )*'], exprs=True),
        881: _Expr(is_syntaxic_terminal=False, expected=['first:fact rest:( [*/%] fact )*'], expr=True),
        882: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        883: _Expr(is_syntaxic_terminal=False, expected=['expr']),
        884: _Expr(is_syntaxic_terminal=False, expected=['fact:expr'], expr=True),
        885: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        886: _Expr(is_syntaxic_terminal=False, expected=['LP fact:expr RP'], exprs=True),
        887: _Expr(is_syntaxic_terminal=False, expected=['atom']),
        888: _Expr(is_syntaxic_terminal=False, expected=['fact:atom'], expr=True),
        889: _Expr(is_syntaxic_terminal=False, expected=['( LP fact:expr RP ) / fact:atom'], exprs=True),
        890: _Expr(is_syntaxic_terminal=False, expected=['( LP fact:expr RP ) / fact:atom'], expr=True),
        891: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        892: _Expr(is_syntaxic_terminal=False, expected=['variable']),
        893: _Expr(is_syntaxic_terminal=False, expected=['NUMBER / variable'], exprs=True),
        894: _Expr(is_syntaxic_terminal=False, expected=['value:( NUMBER / variable )'], expr=True),
        895: _Expr(is_syntaxic_terminal=False, expected=['value:( NUMBER / variable )'], expr=True),
        896: _Expr(is_syntaxic_terminal=False, expected=['_']),
        897: _Expr(is_syntaxic_terminal=False, expected=['[?!]']),
        898: _Expr(is_syntaxic_terminal=False, expected=['direction:[?!]'], expr=True),
        899: _Expr(is_syntaxic_terminal=False, expected=['_']),
        900: _Expr(is_syntaxic_terminal=False, expected=['lblmatch']),
        901: _Expr(is_syntaxic_terminal=False, expected=['lblmatch?'], expr=True),
        902: _Expr(is_syntaxic_terminal=False, expected=['edge:lblmatch?'], expr=True),
        903: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        904: _Expr(is_syntaxic_terminal=False, expected=['STAR']),
        905: _Expr(is_syntaxic_terminal=False, expected=['NAME / STAR'], exprs=True),
        906: _Expr(is_syntaxic_terminal=False, expected=['name:( NAME / STAR )'], expr=True),
        907: _Expr(is_syntaxic_terminal=False, expected=['lblmatch']),
        908: _Expr(is_syntaxic_terminal=False, expected=['lblmatch?'], expr=True),
        909: _Expr(is_syntaxic_terminal=False, expected=['loc:lblmatch?'], expr=True),
        910: _Expr(is_syntaxic_terminal=False, expected=['_ direction:[?!] _ edge:lblmatch? name:( NAME / STAR ) loc:lblmatch?'], exprs=True),
        911: _Expr(is_syntaxic_terminal=False, expected=['_ direction:[?!] _ edge:lblmatch? name:( NAME / STAR ) loc:lblmatch?'], expr=True),
        912: _Expr(is_syntaxic_terminal=False, expected=['LCB']),
        913: _Expr(is_syntaxic_terminal=False, expected=['lblexpr']),
        914: _Expr(is_syntaxic_terminal=False, expected=['expr:lblexpr'], expr=True),
        915: _Expr(is_syntaxic_terminal=False, expected=['RCB']),
        916: _Expr(is_syntaxic_terminal=False, expected=['LCB expr:lblexpr RCB'], exprs=True),
        917: _Expr(is_syntaxic_terminal=False, expected=['LCB expr:lblexpr RCB'], expr=True),
        918: _Expr(is_syntaxic_terminal=False, expected=['lblterm']),
        919: _Expr(is_syntaxic_terminal=False, expected=['first:lblterm'], expr=True),
        920: _Expr(is_syntaxic_terminal=False, expected=['_']),
        921: _Expr(is_syntaxic_terminal=False, expected=['"|"']),
        922: _Expr(is_syntaxic_terminal=False, expected=['_']),
        923: _Expr(is_syntaxic_terminal=False, expected=['lblterm']),
        924: _Expr(is_syntaxic_terminal=False, expected=['_ "|" _ lblterm'], exprs=True),
        925: _Expr(is_syntaxic_terminal=False, expected=['( _ "|" _ lblterm )*'], expr=True),
        926: _Expr(is_syntaxic_terminal=False, expected=['rest:( _ "|" _ lblterm )*'], expr=True),
        927: _Expr(is_syntaxic_terminal=False, expected=['first:lblterm rest:( _ "|" _ lblterm )*'], exprs=True),
        928: _Expr(is_syntaxic_terminal=False, expected=['first:lblterm rest:( _ "|" _ lblterm )*'], expr=True),
        929: _Expr(is_syntaxic_terminal=False, expected=['lblfact']),
        930: _Expr(is_syntaxic_terminal=False, expected=['first:lblfact'], expr=True),
        931: _Expr(is_syntaxic_terminal=False, expected=['_']),
        932: _Expr(is_syntaxic_terminal=False, expected=['"&"']),
        933: _Expr(is_syntaxic_terminal=False, expected=['_']),
        934: _Expr(is_syntaxic_terminal=False, expected=['lblterm']),
        935: _Expr(is_syntaxic_terminal=False, expected=['_ "&" _ lblterm'], exprs=True),
        936: _Expr(is_syntaxic_terminal=False, expected=['( _ "&" _ lblterm )*'], expr=True),
        937: _Expr(is_syntaxic_terminal=False, expected=['rest:( _ "&" _ lblterm )*'], expr=True),
        938: _Expr(is_syntaxic_terminal=False, expected=['first:lblfact rest:( _ "&" _ lblterm )*'], exprs=True),
        939: _Expr(is_syntaxic_terminal=False, expected=['first:lblfact rest:( _ "&" _ lblterm )*'], expr=True),
        940: _Expr(is_syntaxic_terminal=False, expected=['TILDA']),
        941: _Expr(is_syntaxic_terminal=False, expected=['lblfact']),
        942: _Expr(is_syntaxic_terminal=False, expected=['neg:lblfact'], expr=True),
        943: _Expr(is_syntaxic_terminal=False, expected=['TILDA neg:lblfact'], exprs=True),
        944: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        945: _Expr(is_syntaxic_terminal=False, expected=['lblexpr']),
        946: _Expr(is_syntaxic_terminal=False, expected=['sub:lblexpr'], expr=True),
        947: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        948: _Expr(is_syntaxic_terminal=False, expected=['LP sub:lblexpr RP'], exprs=True),
        949: _Expr(is_syntaxic_terminal=False, expected=['arg']),
        950: _Expr(is_syntaxic_terminal=False, expected=['atom:arg'], expr=True),
        951: _Expr(is_syntaxic_terminal=False, expected=['( TILDA neg:lblfact ) / ( LP sub:lblexpr RP ) / atom:arg'], exprs=True),
        952: _Expr(is_syntaxic_terminal=False, expected=['( TILDA neg:lblfact ) / ( LP sub:lblexpr RP ) / atom:arg'], expr=True),
        953: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        954: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        955: _Expr(is_syntaxic_terminal=False, expected=['labels']),
        956: _Expr(is_syntaxic_terminal=False, expected=['labels?'], expr=True),
        957: _Expr(is_syntaxic_terminal=False, expected=['labels:labels?'], expr=True),
        958: _Expr(is_syntaxic_terminal=False, expected=['_']),
        959: _Expr(is_syntaxic_terminal=False, expected=['":="']),
        960: _Expr(is_syntaxic_terminal=False, expected=['_']),
        961: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        962: _Expr(is_syntaxic_terminal=False, expected=['location:NAME'], expr=True),
        963: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        964: _Expr(is_syntaxic_terminal=False, expected=['arguments']),
        965: _Expr(is_syntaxic_terminal=False, expected=['arguments?'], expr=True),
        966: _Expr(is_syntaxic_terminal=False, expected=['args:arguments?'], expr=True),
        967: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        968: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        969: _Expr(is_syntaxic_terminal=False, expected=['name:NAME labels:labels? _ ":=" _ location:NAME LP args:arguments? RP NL'], exprs=True),
        970: _Expr(is_syntaxic_terminal=False, expected=['name:NAME labels:labels? _ ":=" _ location:NAME LP args:arguments? RP NL'], expr=True),
        971: _Expr(is_syntaxic_terminal=False, expected=['subg']),
        972: _Expr(is_syntaxic_terminal=False, expected=['first:subg'], expr=True),
        973: _Expr(is_syntaxic_terminal=False, expected=['edge']),
        974: _Expr(is_syntaxic_terminal=False, expected=['edge?'], expr=True),
        975: _Expr(is_syntaxic_terminal=False, expected=['subg']),
        976: _Expr(is_syntaxic_terminal=False, expected=['edge? subg'], exprs=True),
        977: _Expr(is_syntaxic_terminal=False, expected=['( edge? subg )*'], expr=True),
        978: _Expr(is_syntaxic_terminal=False, expected=['rest:( edge? subg )*'], expr=True),
        979: _Expr(is_syntaxic_terminal=False, expected=['first:subg rest:( edge? subg )*'], exprs=True),
        980: _Expr(is_syntaxic_terminal=False, expected=['first:subg rest:( edge? subg )*'], expr=True),
        981: _Expr(is_syntaxic_terminal=False, expected=['__']),
        982: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        983: _Expr(is_syntaxic_terminal=False, expected=['node:NAME'], expr=True),
        984: _Expr(is_syntaxic_terminal=False, expected=['__']),
        985: _Expr(is_syntaxic_terminal=False, expected=['__ node:NAME __'], exprs=True),
        986: _Expr(is_syntaxic_terminal=False, expected=['__']),
        987: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        988: _Expr(is_syntaxic_terminal=False, expected=['graph']),
        989: _Expr(is_syntaxic_terminal=False, expected=['sub:graph'], expr=True),
        990: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        991: _Expr(is_syntaxic_terminal=False, expected=['__']),
        992: _Expr(is_syntaxic_terminal=False, expected=['__ "(" sub:graph ")" __'], exprs=True),
        993: _Expr(is_syntaxic_terminal=False, expected=['( __ node:NAME __ ) / ( __ "(" sub:graph ")" __ )'], exprs=True),
        994: _Expr(is_syntaxic_terminal=False, expected=['( __ node:NAME __ ) / ( __ "(" sub:graph ")" __ )'], expr=True),
        995: _Expr(is_syntaxic_terminal=False, expected=['ARC']),
        996: _Expr(is_syntaxic_terminal=False, expected=['left:ARC'], expr=True),
        997: _Expr(is_syntaxic_terminal=False, expected=['arguments']),
        998: _Expr(is_syntaxic_terminal=False, expected=['arguments?'], expr=True),
        999: _Expr(is_syntaxic_terminal=False, expected=['labels:arguments?'], expr=True),
        1000: _Expr(is_syntaxic_terminal=False, expected=['ARC']),
        1001: _Expr(is_syntaxic_terminal=False, expected=['right:ARC'], expr=True),
        1002: _Expr(is_syntaxic_terminal=False, expected=['left:ARC labels:arguments? right:ARC'], exprs=True),
        1003: _Expr(is_syntaxic_terminal=False, expected=['left:ARC labels:arguments? right:ARC'], expr=True),
        1004: _Expr(is_syntaxic_terminal=False, expected=['__']),
        1005: _Expr(is_syntaxic_terminal=False, expected=['[<>]']),
        1006: _Expr(is_syntaxic_terminal=False, expected=['arc:[<>]'], expr=True),
        1007: _Expr(is_syntaxic_terminal=False, expected=['__']),
        1008: _Expr(is_syntaxic_terminal=False, expected=['__ arc:[<>] __'], exprs=True),
        1009: _Expr(is_syntaxic_terminal=False, expected=['__ arc:[<>] __'], expr=True),
        1010: _Expr(is_syntaxic_terminal=False, expected=["~'([ \\t\\n\\r↦↤]*(#[^\\n]*)?)*'"]),
        1011: _Expr(is_syntaxic_terminal=False, expected=["~'([ \\t\\n\\r↦↤]*(#[^\\n]*)?)*'"], expr=True),
    }
