/* Generated by Cython 3.1.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "include/ddd/DDD.h",
            "include/ddd/SDD.h",
            "include/ddd/SHom.h",
            "include/dddwrap.h",
            "include/its/ITSModel.hh",
            "include/its/Instance.hh",
            "include/its/Type.hh"
        ],
        "include_dirs": [
            "../pyddd",
            "../libDDD",
            "../libITS",
            "include",
            "/home/franck/work/tools/ecco/ecco/include"
        ],
        "language": "c++",
        "name": "ecco.lrr.lts",
        "sources": [
            "ecco/lrr/lts.pyx"
        ]
    },
    "module_name": "ecco.lrr.lts"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_4"
#define CYTHON_HEX_VERSION 0x030104F0
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME
  #define CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME 100
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__ecco__lrr__lts
#define __PYX_HAVE_API__ecco__lrr__lts
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string_view>
#include <string>
#include "dddwrap.h"
#include "ddd/DDD.h"
#include "ddd/SDD.h"
#include "ddd/SHom.h"
#include <list>
#include <vector>
#include "its/Type.hh"
#include "its/Instance.hh"
#include "its/ITSModel.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "ecco/lrr/lts.pyx",
  "<stringsource>",
  "include/ddd.pxd",
  "include/its.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */

/* "ecco/lrr/lts.pyx":461
 *     EQUALS = 4
 * 
 * ctypedef unsigned long long CompoID             # <<<<<<<<<<<<<<
 * 
 * cdef dict _CompoCache = {}
*/
typedef unsigned PY_LONG_LONG __pyx_t_4ecco_3lrr_3lts_CompoID;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_3ddd_xdd;
struct __pyx_obj_3ddd_ddd;
struct __pyx_obj_3ddd_sdd;
struct __pyx_obj_3ddd_shom;
struct __pyx_obj_3its_model;
struct __pyx_obj_4ecco_3lrr_3lts_LTS;
struct __pyx_obj_4ecco_3lrr_3lts_Component;
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__;
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge;
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr;
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ;
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit;
struct __pyx_opt_args_3ddd_3ddd_pick;
struct __pyx_opt_args_3ddd_3ddd_print_stats;
struct __pyx_opt_args_3ddd_3ddd_dom;
struct __pyx_opt_args_3ddd_3sdd_pick;
struct __pyx_opt_args_3ddd_3sdd_print_stats;

/* "ddd.pxd":35
 *     cdef DDD d
 *     cpdef str varname (ddd self)
 *     cpdef ddd pick (ddd self, unsigned int count=*)             # <<<<<<<<<<<<<<
 *     cpdef dict dict_pick (ddd self)
 *     cpdef tuple vars (ddd self)
*/
struct __pyx_opt_args_3ddd_3ddd_pick {
  int __pyx_n;
  unsigned int count;
};

/* "ddd.pxd":40
 *     cpdef dict varmap (ddd self)
 *     cpdef bint stop (ddd self)
 *     cpdef void print_stats (self, bint reinit=*)             # <<<<<<<<<<<<<<
 *     cpdef void dot (ddd self, str path)
 *     cpdef ddd drop (ddd self, variables)
*/
struct __pyx_opt_args_3ddd_3ddd_print_stats {
  int __pyx_n;
  int reinit;
};

/* "ddd.pxd":44
 *     cpdef ddd drop (ddd self, variables)
 *     cdef ddd _drop (ddd self, set variables)
 *     cpdef dict dom (ddd self, dict d=*)             # <<<<<<<<<<<<<<
 *     cpdef str dumps (ddd self)
 *     cpdef void save (ddd self, str path)
*/
struct __pyx_opt_args_3ddd_3ddd_dom {
  int __pyx_n;
  PyObject *d;
};

/* "ddd.pxd":75
 *     cdef SDD s
 *     cpdef str varname (sdd self)
 *     cpdef sdd pick (sdd self, unsigned int count=*)             # <<<<<<<<<<<<<<
 *     cpdef dict dict_pick (sdd self)
 *     cpdef tuple vars (sdd self)
*/
struct __pyx_opt_args_3ddd_3sdd_pick {
  int __pyx_n;
  unsigned int count;
};

/* "ddd.pxd":79
 *     cpdef tuple vars (sdd self)
 *     cpdef bint stop (sdd self)
 *     cpdef void print_stats (self, bint reinit=*)             # <<<<<<<<<<<<<<
 *     cpdef void dot (sdd self, str path)
 *     cpdef sdd drop (sdd self, variables)
*/
struct __pyx_opt_args_3ddd_3sdd_print_stats {
  int __pyx_n;
  int reinit;
};
struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop;
struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split;
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form;

/* "ecco/lrr/lts.pyx":454
 *         return ret
 * 
 * cpdef enum setrel :             # <<<<<<<<<<<<<<
 *     HASNO = 0
 *     HAS = 1
*/
enum __pyx_t_4ecco_3lrr_3lts_setrel {
  __pyx_e_4ecco_3lrr_3lts_HASNO = 0,
  __pyx_e_4ecco_3lrr_3lts_HAS = 1,
  __pyx_e_4ecco_3lrr_3lts_CONTAINS = 2,
  __pyx_e_4ecco_3lrr_3lts_ISIN = 3,
  __pyx_e_4ecco_3lrr_3lts_EQUALS = 4
};

/* "ecco/lrr/lts.pyx":382
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :             # <<<<<<<<<<<<<<
 *         """adds a property to the LTS
 * 
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop {
  int __pyx_n;
  int __pyx_union;
  PyObject *alias;
};

/* "ecco/lrr/lts.pyx":413
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe a set of states by a Boolean formula
 * 
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form {
  int __pyx_n;
  PyObject *variables;
  PyObject *normalise;
};

/* "ecco/lrr/lts.pyx":542
 *         self.on = dump["on"]
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :             # <<<<<<<<<<<<<<
 *         cdef Component compo
 *         if lts is None :
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy {
  int __pyx_n;
  PyObject *lts;
};

/* "ecco/lrr/lts.pyx":571
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row {
  int __pyx_n;
  int alias;
};

/* "ecco/lrr/lts.pyx":608
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """check a split property on component
 * 
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check {
  int __pyx_n;
  PyObject *alias;
};

/* "ecco/lrr/lts.pyx":621
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """split component wrt a property
 * 
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split {
  int __pyx_n;
  PyObject *alias;
};

/* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split {
  int __pyx_n;
  int split_init;
  int split_entries;
  int split_exits;
  int split_hull;
  int split_dead;
};

/* "ecco/lrr/lts.pyx":828
 *                 on.add(var)
 *         return on, off
 *     cpdef object form (Component self, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe the component states states by a Boolean formula
 * 
*/
struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form {
  int __pyx_n;
  PyObject *variables;
  PyObject *normalise;
};

/* "ddd.pxd":4
 * from libcpp.string cimport string
 * 
 * cdef class xdd :             # <<<<<<<<<<<<<<
 *     cdef void _dot (self, str ext, list files)
 * 
*/
struct __pyx_obj_3ddd_xdd {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ddd_xdd *__pyx_vtab;
};


/* "ddd.pxd":32
 *         void pstats (bint reinit)
 * 
 * cdef class ddd (xdd) :             # <<<<<<<<<<<<<<
 *     cdef DDD d
 *     cpdef str varname (ddd self)
*/
struct __pyx_obj_3ddd_ddd {
  struct __pyx_obj_3ddd_xdd __pyx_base;
  DDD d;
};


/* "ddd.pxd":72
 *         void pstats (bint reinit)
 * 
 * cdef class sdd (xdd) :             # <<<<<<<<<<<<<<
 *     cdef SDD s
 *     cpdef str varname (sdd self)
*/
struct __pyx_obj_3ddd_sdd {
  struct __pyx_obj_3ddd_xdd __pyx_base;
  SDD s;
};


/* "ddd.pxd":100
 *         size_t hash() const
 * 
 * cdef class shom :             # <<<<<<<<<<<<<<
 *     cdef Shom h
 *     cpdef shom fixpoint (shom self)
*/
struct __pyx_obj_3ddd_shom {
  PyObject_HEAD
  struct __pyx_vtabstruct_3ddd_shom *__pyx_vtab;
  Shom h;
};


/* "its.pxd":28
 *         Instance* getInstance()
 * 
 * cdef class model :             # <<<<<<<<<<<<<<
 *     cdef ITSModel i
 *     cdef readonly str path, fmt
*/
struct __pyx_obj_3its_model {
  PyObject_HEAD
  struct __pyx_vtabstruct_3its_model *__pyx_vtab;
  its::ITSModel i;
  PyObject *path;
  PyObject *fmt;
};


/* "ecco/lrr/lts.pyx":22
 *     return sdd.mkz(d)
 * 
 * cdef class LTS (object) :             # <<<<<<<<<<<<<<
 *     """a Labelled Transition System
 * 
*/
struct __pyx_obj_4ecco_3lrr_3lts_LTS {
  PyObject_HEAD
  struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *__pyx_vtab;
  PyObject *path;
  struct __pyx_obj_3its_model *gal;
  struct __pyx_obj_3ddd_sdd *init;
  struct __pyx_obj_3ddd_sdd *states;
  struct __pyx_obj_3ddd_sdd *dead;
  struct __pyx_obj_3ddd_sdd *hull;
  struct __pyx_obj_3ddd_shom *succ;
  struct __pyx_obj_3ddd_shom *pred;
  struct __pyx_obj_3ddd_shom *succ_o;
  struct __pyx_obj_3ddd_shom *pred_o;
  struct __pyx_obj_3ddd_shom *succ_s;
  struct __pyx_obj_3ddd_shom *pred_s;
  PyObject *props;
  PyObject *alias;
  PyObject *tsucc;
  PyObject *tpred;
  PyObject *vars;
  PyObject *_var2sdd;
  int compact;
  struct __pyx_obj_3ddd_shom *constraints;
  struct __pyx_obj_3ddd_sdd *transient;
};


/* "ecco/lrr/lts.pyx":465
 * cdef dict _CompoCache = {}
 * 
 * cdef class Component (object) :             # <<<<<<<<<<<<<<
 *     """a set of states with properties
 * 
*/
struct __pyx_obj_4ecco_3lrr_3lts_Component {
  PyObject_HEAD
  struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *__pyx_vtab;
  __pyx_t_4ecco_3lrr_3lts_CompoID num;
  struct __pyx_obj_3ddd_sdd *states;
  PyObject *graph_props;
  PyObject *split_props;
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *lts;
  PyObject *on;
  PyObject *off;
};


/* "ecco/lrr/lts.pyx":563
 *     def __eq__ (Component self, Component other) :
 *         return self.states == other.states and self.lts == other.lts
 *     @property             # <<<<<<<<<<<<<<
 *     def props (Component self) :
 *         """an iterator over the graph and split properties
*/
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ {
  PyObject_HEAD
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self;
};


/* "ecco/lrr/lts.pyx":660
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :             # <<<<<<<<<<<<<<
 *         """merge a component with others
 * 
*/
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge {
  PyObject_HEAD
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self;
};


/* "ecco/lrr/lts.pyx":667
 *         """
 *         cdef Component oth
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :             # <<<<<<<<<<<<<<
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
*/
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *__pyx_outer_scope;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_oth;
};


/* "ecco/lrr/lts.pyx":686
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
 *     def succ (Component self, *others) :             # <<<<<<<<<<<<<<
 *         """computes the transitions from a component to others
 * 
*/
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ {
  PyObject_HEAD
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_c;
  struct __pyx_obj_3ddd_shom *__pyx_v_h;
  PyObject *__pyx_v_others;
  PyObject *__pyx_v_s;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self;
  PyObject *__pyx_v_t;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
};


/* "ecco/lrr/lts.pyx":702
 *                     yield t, c
 *         return s
 *     def explicit (Component self) :             # <<<<<<<<<<<<<<
 *         """splits a component into one-state sub-components
 * 
*/
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit {
  PyObject_HEAD
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self;
  struct __pyx_obj_3ddd_ddd *__pyx_v_state;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "ddd.pxd":4
 * from libcpp.string cimport string
 * 
 * cdef class xdd :             # <<<<<<<<<<<<<<
 *     cdef void _dot (self, str ext, list files)
 * 
*/

struct __pyx_vtabstruct_3ddd_xdd {
  void (*_dot)(struct __pyx_obj_3ddd_xdd *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_3ddd_xdd *__pyx_vtabptr_3ddd_xdd;


/* "ddd.pxd":32
 *         void pstats (bint reinit)
 * 
 * cdef class ddd (xdd) :             # <<<<<<<<<<<<<<
 *     cdef DDD d
 *     cpdef str varname (ddd self)
*/

struct __pyx_vtabstruct_3ddd_ddd {
  struct __pyx_vtabstruct_3ddd_xdd __pyx_base;
  PyObject *(*varname)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_ddd *(*pick)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ddd_3ddd_pick *__pyx_optional_args);
  PyObject *(*dict_pick)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  PyObject *(*vars)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  PyObject *(*varmap)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  int (*stop)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  void (*print_stats)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ddd_3ddd_print_stats *__pyx_optional_args);
  void (*dot)(struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_ddd *(*drop)(struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_ddd *(*_drop)(struct __pyx_obj_3ddd_ddd *, PyObject *);
  PyObject *(*dom)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ddd_3ddd_dom *__pyx_optional_args);
  PyObject *(*dumps)(struct __pyx_obj_3ddd_ddd *, int __pyx_skip_dispatch);
  void (*save)(struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*to_csv)(struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_csv)(struct __pyx_obj_3ddd_ddd *, PyObject *, DDD, PyObject *);
};
static struct __pyx_vtabstruct_3ddd_ddd *__pyx_vtabptr_3ddd_ddd;


/* "ddd.pxd":72
 *         void pstats (bint reinit)
 * 
 * cdef class sdd (xdd) :             # <<<<<<<<<<<<<<
 *     cdef SDD s
 *     cpdef str varname (sdd self)
*/

struct __pyx_vtabstruct_3ddd_sdd {
  struct __pyx_vtabstruct_3ddd_xdd __pyx_base;
  PyObject *(*varname)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_sdd *(*pick)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ddd_3sdd_pick *__pyx_optional_args);
  PyObject *(*dict_pick)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  PyObject *(*vars)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*stop)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  void (*print_stats)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_3ddd_3sdd_print_stats *__pyx_optional_args);
  void (*dot)(struct __pyx_obj_3ddd_sdd *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_sdd *(*drop)(struct __pyx_obj_3ddd_sdd *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_sdd *(*_drop)(struct __pyx_obj_3ddd_sdd *, PyObject *);
  PyObject *(*dumps)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  PyObject *(*varmap)(struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3ddd_sdd *__pyx_vtabptr_3ddd_sdd;


/* "ddd.pxd":100
 *         size_t hash() const
 * 
 * cdef class shom :             # <<<<<<<<<<<<<<
 *     cdef Shom h
 *     cpdef shom fixpoint (shom self)
*/

struct __pyx_vtabstruct_3ddd_shom {
  struct __pyx_obj_3ddd_shom *(*fixpoint)(struct __pyx_obj_3ddd_shom *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_shom *(*lfp)(struct __pyx_obj_3ddd_shom *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_shom *(*gfp)(struct __pyx_obj_3ddd_shom *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_shom *(*invert)(struct __pyx_obj_3ddd_shom *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  PyObject *(*dumps)(struct __pyx_obj_3ddd_shom *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3ddd_shom *__pyx_vtabptr_3ddd_shom;


/* "its.pxd":28
 *         Instance* getInstance()
 * 
 * cdef class model :             # <<<<<<<<<<<<<<
 *     cdef ITSModel i
 *     cdef readonly str path, fmt
*/

struct __pyx_vtabstruct_3its_model {
  struct __pyx_obj_3ddd_sdd *(*initial)(struct __pyx_obj_3its_model *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_shom *(*succ)(struct __pyx_obj_3its_model *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_shom *(*pred)(struct __pyx_obj_3its_model *, int __pyx_skip_dispatch);
  PyObject *(*transitions)(struct __pyx_obj_3its_model *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3its_model *__pyx_vtabptr_3its_model;


/* "ecco/lrr/lts.pyx":22
 *     return sdd.mkz(d)
 * 
 * cdef class LTS (object) :             # <<<<<<<<<<<<<<
 *     """a Labelled Transition System
 * 
*/

struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS {
  void (*save_file)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*dump)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, int __pyx_skip_dispatch);
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *(*copy)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, int __pyx_skip_dispatch);
  void (*_build_succ)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  void (*_build_initial_states)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *);
  struct __pyx_obj_3ddd_sdd *(*_build_initial_states_one)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *);
  void (*_build_reachable_states)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  void (*_build_compact)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  void (*_build_pred)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  void (*_build_dead_states)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  void (*_build_hull_states)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *);
  PyObject *(*graph_props)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*is_dead)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*isin_dead)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*has_dead)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*is_init)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*isin_init)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*has_init)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*is_hull)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  int (*is_scc)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch);
  struct __pyx_obj_3ddd_sdd *(*add_prop)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop *__pyx_optional_args);
  struct __pyx_obj_3ddd_sdd *(*var2sdd)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*form)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form *__pyx_optional_args);
  PyObject *(*_form)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_ddd *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *__pyx_vtabptr_4ecco_3lrr_3lts_LTS;


/* "ecco/lrr/lts.pyx":465
 * cdef dict _CompoCache = {}
 * 
 * cdef class Component (object) :             # <<<<<<<<<<<<<<
 *     """a set of states with properties
 * 
*/

struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component {
  PyObject *(*dump)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch);
  void (*_load)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *);
  struct __pyx_obj_4ecco_3lrr_3lts_Component *(*copy)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy *__pyx_optional_args);
  void (*_copy)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_4ecco_3lrr_3lts_Component *);
  PyObject *(*props_row)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row *__pyx_optional_args);
  void (*_update_prop)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, PyObject *, struct __pyx_obj_3ddd_sdd *);
  void (*tag)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, int __pyx_skip_dispatch);
  enum __pyx_t_4ecco_3lrr_3lts_setrel (*check)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check *__pyx_optional_args);
  PyObject *(*split)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split *__pyx_optional_args);
  struct __pyx_obj_4ecco_3lrr_3lts_Component *(*_make_split)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *);
  PyObject *(*_copy_graph_props)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *);
  struct __pyx_obj_4ecco_3lrr_3lts_Component *(*_merge)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *);
  struct __pyx_obj_4ecco_3lrr_3lts_Component *(*_explicit)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *);
  PyObject *(*topo_split)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split *__pyx_optional_args);
  PyObject *(*count)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch);
  PyObject *(*_count)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*on_off)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch);
  PyObject *(*form)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form *__pyx_optional_args);
};
static struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *__pyx_vtabptr_4ecco_3lrr_3lts_Component;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* CallUnboundCMethod1.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(
    PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple);
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* DictGetItem.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* unicode_tailmatch.proto */
static int __Pyx_PyUnicode_Tailmatch(
    PyObject* s, PyObject* substr, Py_ssize_t start, Py_ssize_t end, int direction);

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* CallUnboundCMethod0.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* IterNextPlain.proto */
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator);
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void);
#endif

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && !CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CommonTypesMetaclass.proto */
static int __pyx_CommonTypesMetaclass_init(PyObject *module);
#define __Pyx_CommonTypesMetaclass_USED

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* ReturnWithStopIteration.proto */
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    __Pyx_pyiter_sendfunc yieldfrom_am_send;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
#if CYTHON_USE_SYS_MONITORING && (CYTHON_PROFILE || CYTHON_TRACE)
    PyMonitoringState __pyx_pymonitoring_state[__Pyx_MonitoringEventTypes_CyGen_count];
    uint64_t __pyx_pymonitoring_version;
#endif
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static __Pyx_PySendResult __Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static __Pyx_PySendResult __Pyx_Coroutine_Close(PyObject *self, PyObject **retval);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen);
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen);
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen);
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure);
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send);
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);
static CYTHON_INLINE PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self);

/* GeneratorYieldFrom.proto */
static CYTHON_INLINE __Pyx_PySendResult __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source, PyObject **retval);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyObjectVectorCallMethodKwBuilder.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_VectorcallMethod_CallFromBuilder PyObject_VectorcallMethod
#else
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* RaiseUnboundLocalError.proto */
static void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseClosureNameError.proto */
static void __Pyx_RaiseClosureNameError(const char *varname);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_4
#define __PYX_HAVE_RT_ImportType_proto_3_1_4
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_4(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_4(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_4 {
   __Pyx_ImportType_CheckSize_Error_3_1_4 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_4 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_4 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_4(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_4 check_size);
#endif

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* PyObjectDelAttr.proto */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
#define __Pyx_PyObject_DelAttr(o, n) PyObject_SetAttr(o, n, NULL)
#else
#define __Pyx_PyObject_DelAttr(o, n) PyObject_DelAttr(o, n)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   __Pyx_PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
#include "descrobject.h"
#endif
CYTHON_UNUSED static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE val_t __Pyx_PyLong_As_val_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyLong_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum __pyx_t_4ecco_3lrr_3lts_setrel __Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(enum __pyx_t_4ecco_3lrr_3lts_setrel value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

static void __pyx_f_4ecco_3lrr_3lts_3LTS_save_file(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_dump(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_f_4ecco_3lrr_3lts_3LTS_copy(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_succ(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_init); /* proto*/
static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states_one(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_init); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_reachable_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_compact(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_pred(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_dead_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_hull_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_graph_props(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_isin_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_has_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_isin_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_has_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_hull(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_scc(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS_add_prop(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop *__pyx_optional_args); /* proto*/
static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS_var2sdd(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS__form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen, PyObject *__pyx_v_keep); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_dump(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_9Component__load(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_dump); /* proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component_copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy *__pyx_optional_args); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_9Component__copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_other); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_props_row(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row *__pyx_optional_args); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_9Component__update_prop(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_pdict, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto*/
static void __pyx_f_4ecco_3lrr_3lts_9Component_tag(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_skip_dispatch); /* proto*/
static enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_f_4ecco_3lrr_3lts_9Component_check(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split *__pyx_optional_args); /* proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__make_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_part); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component__copy_graph_props(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__merge(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_others); /* proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__explicit(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_state); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_topo_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component__count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_on_off(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_form(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form *__pyx_optional_args); /* proto*/

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string_view" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "ddd" */

/* Module declarations from "libcpp.pair" */

/* Module declarations from "libcpp.list" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "its" */

/* Module declarations from "ecco.lrr.lts" */
static PyObject *__pyx_v_4ecco_3lrr_3lts__CompoCache = 0;
static PyObject *__Pyx_EnumBase = 0;
static PyObject *__Pyx_FlagBase = 0;
static CYTHON_INLINE struct __pyx_obj_3ddd_ddd *__pyx_f_4ecco_3lrr_3lts_s2d(struct __pyx_obj_3ddd_sdd *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_d2s(struct __pyx_obj_3ddd_ddd *); /*proto*/
static PyObject *__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(enum __pyx_t_4ecco_3lrr_3lts_setrel); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "ecco.lrr.lts"
extern int __pyx_module_is_main_ecco__lrr__lts;
int __pyx_module_is_main_ecco__lrr__lts = 0;

/* Implementation of "ecco.lrr.lts" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_map;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_A[] = "\200A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_Q[] = "\260Q";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_Or[] = "Or";
static const char __pyx_k__2[] = "*";
static const char __pyx_k__3[] = "+";
static const char __pyx_k__4[] = "-";
static const char __pyx_k__5[] = ",";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_gp[] = "gp";
static const char __pyx_k_is[] = "is_";
static const char __pyx_k_on[] = "on";
static const char __pyx_k_sp[] = "sp";
static const char __pyx_k_DDD[] = "DDD";
static const char __pyx_k_GAL[] = "GAL";
static const char __pyx_k_HAS[] = "HAS";
static const char __pyx_k_LTS[] = "LTS";
static const char __pyx_k_Not[] = "Not";
static const char __pyx_k_Q_2[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k__10[] = ".";
static const char __pyx_k__11[] = "?";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_ddd[] = "ddd";
static const char __pyx_k_fmt[] = "fmt";
static const char __pyx_k_get[] = "__get__";
static const char __pyx_k_has[] = "has_";
static const char __pyx_k_lfp[] = "lfp";
static const char __pyx_k_lts[] = "lts";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_mkz[] = "mkz";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_off[] = "off";
static const char __pyx_k_one[] = "one";
static const char __pyx_k_oth[] = "oth";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_ISIN[] = "ISIN";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_ddds[] = "ddds";
static const char __pyx_k_dead[] = "dead";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dump[] = "dump";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_form[] = "form";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_head[] = "head";
static const char __pyx_k_hull[] = "hull";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_isin[] = "isin_";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prop[] = "prop";
static const char __pyx_k_rest[] = "rest";
static const char __pyx_k_seen[] = "seen";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_succ[] = "succ";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_true[] = "true";
static const char __pyx_k_vars[] = "vars";
static const char __pyx_k_A_U_T[] = "\200A\360\014\000\t\032\230\024\230U\240!\330\010\031\230\024\230T\240\021\240!\330\010\020\220\001\220\027\230\010\240\001";
static const char __pyx_k_HASNO[] = "HASNO";
static const char __pyx_k_alias[] = "alias";
static const char __pyx_k_check[] = "check";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_compo[] = "compo";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_get_2[] = "get";
static const char __pyx_k_ident[] = "ident";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_merge[] = "merge";
static const char __pyx_k_props[] = "props";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_sympy[] = "sympy";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_A_wb_A[] = "\200A\360\016\000\t\020\210w\220b\230\004\230A";
static const char __pyx_k_A_wc_Q[] = "\200A\360\016\000\t\020\210w\220c\230\024\230Q";
static const char __pyx_k_EQUALS[] = "EQUALS";
static const char __pyx_k_Symbol[] = "Symbol";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_is_scc[] = "is_scc";
static const char __pyx_k_module[] = "module";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_on_off[] = "on_off";
static const char __pyx_k_others[] = "others";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_setrel[] = "setrel";
static const char __pyx_k_states[] = "states";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_A_t1G2T[] = "\200A\360\016\000\t\020\210t\2201\220G\2302\230T\240\021";
static const char __pyx_k_IntEnum[] = "IntEnum";
static const char __pyx_k_IntFlag[] = "IntFlag";
static const char __pyx_k_compact[] = "compact";
static const char __pyx_k_count_2[] = "_count";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_is_dead[] = "is_dead";
static const char __pyx_k_is_hull[] = "is_hull";
static const char __pyx_k_is_init[] = "is_init";
static const char __pyx_k_members[] = "__members__";
static const char __pyx_k_var2sdd[] = "var2sdd";
static const char __pyx_k_CONTAINS[] = "CONTAINS";
static const char __pyx_k_LTS_copy[] = "LTS.copy";
static const char __pyx_k_LTS_dump[] = "LTS.dump";
static const char __pyx_k_LTS_form[] = "LTS.form";
static const char __pyx_k_LTS_load[] = "LTS.load";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_add_prop[] = "add_prop";
static const char __pyx_k_callable[] = "callable";
static const char __pyx_k_ddd_load[] = "ddd_load";
static const char __pyx_k_ddd_save[] = "ddd_save";
static const char __pyx_k_explicit[] = "explicit";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_has_dead[] = "has_dead";
static const char __pyx_k_has_init[] = "has_init";
static const char __pyx_k_module_2[] = "__module__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Component[] = "Component";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_isin_dead[] = "isin_dead";
static const char __pyx_k_isin_init[] = "isin_init";
static const char __pyx_k_load_file[] = "load_file";
static const char __pyx_k_normalise[] = "normalise";
static const char __pyx_k_props_row[] = "props_row";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_save_file[] = "save_file";
static const char __pyx_k_transient[] = "transient";
static const char __pyx_k_variables[] = "variables";
static const char __pyx_k_A_D_O1_L_q[] = "\200A\360\022\000\t\r\210D\220\t\230\021\230&\240\004\240O\2601\330\010\014\210L\230\001\230\036\240q";
static const char __pyx_k_LTS_is_scc[] = "LTS.is_scc";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_from_range[] = "from_range";
static const char __pyx_k_getmembers[] = "getmembers";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_split_dead[] = "split_dead";
static const char __pyx_k_split_hull[] = "split_hull";
static const char __pyx_k_split_init[] = "split_init";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_topo_split[] = "topo_split";
static const char __pyx_k_11A_t4uAT_Q[] = "\320\0041\3201A\300\021\360\026\000\t\020\210t\2204\220u\230A\230T\240\031\250+\260Q";
static const char __pyx_k_A_S_Q_t7_3a[] = "\200A\340\010\031\230\021\330\010\025\220S\230\001\230\024\230Q\330\010\017\210t\2207\230!\2303\230a";
static const char __pyx_k_LTS_is_dead[] = "LTS.is_dead";
static const char __pyx_k_LTS_is_hull[] = "LTS.is_hull";
static const char __pyx_k_LTS_is_init[] = "LTS.is_init";
static const char __pyx_k_LTS_var2sdd[] = "LTS.var2sdd";
static const char __pyx_k_graph_props[] = "graph_props";
static const char __pyx_k_split_exits[] = "split_exits";
static const char __pyx_k_split_props[] = "split_props";
static const char __pyx_k_LTS_add_prop[] = "LTS.add_prop";
static const char __pyx_k_LTS_has_dead[] = "LTS.has_dead";
static const char __pyx_k_LTS_has_init[] = "LTS.has_init";
static const char __pyx_k_ecco_lrr_lts[] = "ecco.lrr.lts";
static const char __pyx_k_ecco_lts_lTS[] = "ecco.lts.lTS";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_member_names[] = "_member_names_";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_Component_tag[] = "Component.tag";
static const char __pyx_k_LTS_isin_dead[] = "LTS.isin_dead";
static const char __pyx_k_LTS_isin_init[] = "LTS.isin_init";
static const char __pyx_k_LTS_load_file[] = "LTS.load_file";
static const char __pyx_k_LTS_save_file[] = "LTS.save_file";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_split_entries[] = "split_entries";
static const char __pyx_k_A_gXQa_AYa_s_q[] = "\200A\360\024\000\t\017\210g\220X\230Q\230a\330\010\014\210A\210Y\220a\330\010\017\210s\220%\220q\230\001";
static const char __pyx_k_Component_copy[] = "Component.copy";
static const char __pyx_k_Component_dump[] = "Component.dump";
static const char __pyx_k_Component_form[] = "Component.form";
static const char __pyx_k_Component_load[] = "Component.load";
static const char __pyx_k_Component_succ[] = "Component.succ";
static const char __pyx_k_simplify_logic[] = "simplify_logic";
static const char __pyx_k_A_AT_A_A_A_t1_A[] = "\200A\330\010\020\220\010\230\001\230\023\230A\230T\240\021\330\020\030\230\004\230A\330\020 \240\004\240A\330\020 \240\004\240A\330\020\027\220t\2301\330\020\030\230\004\230A";
static const char __pyx_k_Component___get[] = "Component.__get__";
static const char __pyx_k_Component_check[] = "Component.check";
static const char __pyx_k_Component_count[] = "Component.count";
static const char __pyx_k_Component_merge[] = "Component.merge";
static const char __pyx_k_Component_split[] = "Component.split";
static const char __pyx_k_LTS_graph_props[] = "LTS.graph_props";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_A_WBd_G1Cr_WAT_A[] = "\200A\360\016\000\t\026\220W\230B\230d\240!\330\010\020\220\004\220G\2301\230C\230r\240\024\240W\250A\250T\260\023\260A";
static const char __pyx_k_Component__count[] = "Component._count";
static const char __pyx_k_Component_on_off[] = "Component.on_off";
static const char __pyx_k_ecco_lrr_lts_pyx[] = "ecco/lrr/lts.pyx";
static const char __pyx_k_unknown_variable[] = "unknown variable ";
static const char __pyx_k_Component_explicit[] = "Component.explicit";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Component_props_row[] = "Component.props_row";
static const char __pyx_k_LTS___reduce_cython[] = "LTS.__reduce_cython__";
static const char __pyx_k_Component_topo_split[] = "Component.topo_split";
static const char __pyx_k_H_4t9AV86_M_nF_a_t_q[] = "\320\004H\310\001\360\024\000\t\034\2304\230t\2409\250A\250V\2608\2706\300\021\330\010\014\210M\230\021\230$\230n\250F\260$\260a\330\010\017\210t\220<\230q\240\001";
static const char __pyx_k_merge_locals_genexpr[] = "merge.<locals>.genexpr";
static const char __pyx_k_LTS___setstate_cython[] = "LTS.__setstate_cython__";
static const char __pyx_k_invalid_initial_state[] = "invalid initial state ";
static const char __pyx_k_77Gq_S_1Jc_Q_uO1D_as_uA[] = "\320\0047\3207G\300q\360\030\000\t\032\230\021\330\010\025\220S\230\001\230\021\330\010\030\230\003\2301\230J\240c\250\024\250Q\330\010\017\210u\220O\2401\240D\250\006\250a\250s\260&\270\007\270u\300A";
static const char __pyx_k_A_4uCuE_5Q_AQ_t7_1G2Qk_T[] = "\200A\360\016\000\t\014\2104\210u\220C\220u\230E\240\023\320$5\260Q\330\014\022\220*\230A\230Q\330\010\017\210t\2207\230!\2301\230G\2402\240Q\240k\260\024\260T\270\027\300\001";
static const char __pyx_k_A_y_1214AT_15Qa15Qa_V1A_q[] = "\200A\340\010\037\230y\250\010\260\001\260\021\33012\33014\260A\260T\270\021\270&\300\001\300\021\33015\260Q\260a\33015\260Q\260a\330\010\r\210V\2201\220A\330\010\017\210q";
static const char __pyx_k_Component___reduce_cython[] = "Component.__reduce_cython__";
static const char __pyx_k_A_WBd_3as_Q_1_AU_G1Cr_WAT_A[] = "\200A\360\016\000\t\026\220W\230B\230d\240!\340\010\013\2103\210a\210s\220#\220Q\330\014\023\2201\330\010\014\210A\210U\220!\330\010\020\220\004\220G\2301\230C\230r\240\024\240W\250A\250T\260\023\260A";
static const char __pyx_k_Component___setstate_cython[] = "Component.__setstate_cython__";
static const char __pyx_k_A_q_F_F_7_QfA_Kq_4_1_4_1_86_q[] = "\200A\330\010\027\220q\330\010\014\210F\220*\230F\240!\2407\250+\260Q\260f\270A\330\014\020\220\004\220K\230q\240\001\330\020\023\2204\220{\240!\2401\330\020\023\2204\220{\240!\2401\330\020\022\220!\2208\2306\240\021\240!\330\010\017\210q";
static const char __pyx_k_a_4s_IXQk_V4q_A_IXQk_d_A_V1A_q[] = "\320\004.\250a\340\010\013\2104\210s\220!\330\014\024\220I\230X\240Q\240k\260\024\260V\2704\270q\330&*\250.\270\004\270A\340\014\024\220I\230X\240Q\240k\260\025\260d\270!\330&*\250.\270\004\270A\330\010\r\210V\2201\220A\330\010\017\210q";
static const char __pyx_k_6a_c_U_CuD_F_q_Qb_AT_V4q_1_Qb_A[] = "\320\0046\260a\360\006\000\t\033\230$\230c\240\024\240U\250!\330\010\014\210C\210u\220D\230\014\240F\250!\330\014\017\210q\330\020\025\220Q\220b\230\004\230A\230T\240\024\240V\2504\250q\260\003\2601\340\020\025\220Q\220b\230\004\230A\230Q\330\010\017\210u\220A\220S\230\001\230\033\240A";
static const char __pyx_k_A_0_4_A_1_5_d_A_3fA_1_d_e1D_E_A[] = "\200A\330,-\330/0\330-.\330,-\330,-\3604\000\t\031\230\004\230A\340\010\013\2101\330\014\023\2205\230\002\230$\230d\240!\330\014\024\220A\340\014\023\2203\220f\230A\330\010\013\2101\330\014\026\220d\230$\230e\2401\240D\250\004\250E\260\021\260&\270\002\270&\300\002\300!\330\014\024\220A\340\014\026\220c\230\026\230q\330\010\013\2101\330\014\024\220D\230\004\230E\240\021\240$\240d\250%\250q\260\006\260b\270\006\270b\300\001\330\014\024\220A\340\014\024\220C\220v\230Q\330\010\013\2101\330\014\023\2204\220t\2307\240!\2406\250\022\2504\250t\2607\270!\2701\330\014\024\220A\340\014\023\2203\220f\230A\330\010\013\210;\220d\230!\330\014\024\220D\230\004\230F\240\"\240E\250\024\250R\250q\260\005\260R\260t\2704\270q\330\014\024\220A\340\014\023\2203\220f\230A\330\010\020\220\004\220L\240\001\240\031\250*\260A\330\020\024\220L\240\001\240\034\250]\270!\330\020\024\220L\240\001\240\032\250;\260a\330\020\024\220L\240\001\240\031\250*\260A\330\020\024\220L\240\001\240\031\250*\260A\330\020\024\220L\240\001\240\031\250*\260A";
static const char __pyx_k_A_F_s_4q_G4t1_4q_Q_r_A_4q_3a_aq[] = "\200A\340\010\030\230\004\230F\240!\330\010\031\230\021\330\010\032\230!\340\010\017\210s\220!\2204\220q\330\010\014\210G\2204\220t\2301\330\014\020\220\003\2204\220q\230\005\230Q\330\014\017\210r\220\023\220A\330\020\023\2204\220q\230\001\330\021\023\2203\220a\330\020\022\220$\220a\220q\330\010\017\210t\2201";
static const char __pyx_k_CCTTU_WBd_1_axq_6_e3d_ay_4vQa_a[] = "\320\004C\320CT\320TU\360\024\000\t\026\220W\230B\230d\240!\330\010\013\2101\330\014\020\220\006\220a\220x\230q\330\010\013\2106\220\025\220e\2303\230d\240!\330\014\020\220\006\220a\220y\240\001\330\014\023\2204\220v\230Q\230a\340\014\020\220\006\220a\220x\230q\330\014\023\2201";
static const char __pyx_k_Gq_4t9AV86_HBa_HBa_M_nF_a_5_A_4[] = "\320\004G\300q\360\032\000\t\034\2304\230t\2409\250A\250V\2608\2706\300\021\330\010\030\230\004\230H\240B\240a\330\010\030\230\004\230H\240B\240a\330\010\014\210M\230\021\230$\230n\250F\260$\260a\330\010\013\2105\220\004\220A\330\014\023\2204\220|\2401\240G\2504\250|\2701\270A\330\r\016\330\014\023\2206\230\021\340\014\023\2206\230\021";
static const char __pyx_k_components_do_not_belong_to_the[] = "components do not belong to the same LTS";
static const char __pyx_k_A_5_t1_4q_XQd_2S_avS_1_as_S_Qa_t[] = "\200A\360\006\000\t\014\2105\220\007\220t\2301\330\014\020\220\003\2204\220q\330\014\020\220\005\220X\230Q\230d\240!\330\020\023\2202\220S\230\001\330\024\030\230\003\230;\240a\240v\250S\260\003\2601\340\024\030\230\003\230;\240a\240s\250#\250S\260\001\330\014\020\220\t\230\021\230(\240#\240Q\240a\330\010\017\210t\2209\230A\230Q";
static const char __pyx_k_A_AXV1_4uA_1_E_e9D_a_vS_d_1_d_9D[] = "\200A\360\014\000\t\r\210A\210X\220V\2301\330\010\013\2104\210u\220A\330\014\023\2201\330\010\014\210E\220\025\220e\2309\240D\250\006\250a\330\014\017\210v\220S\230\001\330\020\026\220d\230!\2301\340\020\026\220d\230!\2309\240D\250\007\250q\260\007\260q\330\014\017\210q\330\020\023\2201\220G\2303\230a\230q\330\014\020\220\003\2205\230\003\2306\240\021\330\020\023\2201\220E\230\023\230D\240\001\240\023\240C\240r\250\023\250A\250Q\330\010\017\210q";
static const char __pyx_k_A_Qd_Qd_Qd_Qd_Qd_CuD_fA_q_1A_Q_a[] = "\200A\330\010\031\230\021\230#\230Q\230d\240(\250#\250Q\250d\260!\330\032\035\230Q\230d\240(\250#\250Q\250d\260!\330\032\035\230Q\230d\240!\330\010\032\230!\360\006\000\t\r\210C\210u\220D\230\006\230f\240A\330\014\021\220\027\230\001\230\021\330\014\020\220\007\220q\230\003\2301\230A\330\010\020\220\t\230\024\230Q\330\020\032\230!\330\020\032\230$\230a\330\020\031\230\024\230Q\330\020\034\230D\240\001\330\020\030\230\001";
static const char __pyx_k_A_hfF_hd_1_c_t1A_7_q_7_a_84q_d_1[] = "\200A\360\014\000\t\017\210h\220f\230F\240,\250h\260d\270!\2701\330\010\016\210c\220\030\230\021\230%\230t\2401\240A\330\010\013\2107\220%\220q\230\003\2307\240$\240a\330\010\013\2108\2204\220q\230\001\330\010\013\210;\220d\230!\2301\330\010\013\2109\220D\230\001\230\021\330\010\013\2108\2203\220a\220q\330\010\013\210:\220S\230\001\230\021\330\010\013\2108\2203\220a\220q\330\010\013\2108\2203\220a\220q\330\010\013\210=\230\003\2301\230A\330\010\014\210C\210u\220C\220q\230\004\230A\230Z\240q\330\014\017\210v\220Q\220e\2303\230a\230q\330\010\013\210<\220q\330\010\013\2103\210a\330\014\017\210\177\230a\330\010\013\210<\220q\330\010\017\210q";
static const char __pyx_k_A_s_5_A_7_a_84q_T_84q_84q_84q_84[] = "\200A\330\010\027\220s\230(\240!\2405\250\004\250A\330\010\013\2107\220$\220a\330\010\013\2108\2204\220q\330\010\013\210:\220T\230\021\330\010\013\2108\2204\220q\330\010\013\2108\2204\220q\330\010\013\2108\2204\220q\330\010\013\2108\2204\220q\330\010\013\210:\220T\230\021\330\010\013\210:\220T\230\021\330\010\013\210:\220T\230\021\330\010\013\210:\220T\230\021\330\010\013\2106\220\027\230\001\230\024\230Q\330\010\013\2106\220\027\230\001\230\024\230Q\330\010\013\2109\220D\230\001\330\010\013\2109\220D\230\001\330\010\013\2108\2204\220q\330\010\013\210<\220t\2301\330\010\013\210;\220d\230!\330\010\013\210?\230$\230a\330\010\013\210=\230\004\230A\330\010\017\210q";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_save_file(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_2dump(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4load(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dump); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6load_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_path); /* proto */
static int __pyx_pf_4ecco_3lrr_3lts_3LTS_8__cinit__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_init, int __pyx_v_compact); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_10copy(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_12__eq__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static Py_hash_t __pyx_pf_4ecco_3lrr_3lts_3LTS_14__hash__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static int __pyx_pf_4ecco_3lrr_3lts_3LTS_16__init__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_init, CYTHON_UNUSED int __pyx_v_compact); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_18graph_props(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_20is_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_22isin_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_24has_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_26is_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_28isin_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_30has_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_32is_hull(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_34is_scc(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_36add_prop(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_v_union, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_38var2sdd(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_40form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_variables, PyObject *__pyx_v_normalise); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4path___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_3gal___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4init___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6states___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4dead___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4hull___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4succ___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4pred___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_o___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_o___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_s___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_s___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5props___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5alias___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5tsucc___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5tpred___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4vars___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_7compact___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_11constraints___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_9transient___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4ecco_3lrr_3lts_9Component___cinit__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_gp, PyObject *__pyx_v_sp); /* proto */
static int __pyx_pf_4ecco_3lrr_3lts_9Component_2__init__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts, struct __pyx_obj_3ddd_sdd *__pyx_v_states, CYTHON_UNUSED PyObject *__pyx_v_gp, CYTHON_UNUSED PyObject *__pyx_v_sp); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_4dump(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_6load(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dump, PyObject *__pyx_v_lts); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_8copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_lts); /* proto */
static Py_ssize_t __pyx_pf_4ecco_3lrr_3lts_9Component_10__len__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_4ecco_3lrr_3lts_9Component_12__hash__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_14__eq__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_5props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_16props_row(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_v_alias); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_18tag(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_20check(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_22split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_5merge_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_24merge(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_first, PyObject *__pyx_v_rest); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_26__or__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_28succ(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_others); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_31explicit(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_34topo_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_v_split_init, int __pyx_v_split_entries, int __pyx_v_split_exits, int __pyx_v_split_hull, int __pyx_v_split_dead); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_36count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_38_count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_40on_off(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_42form(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_variables, PyObject *__pyx_v_normalise); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3num___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_6states___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_11graph_props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_11split_props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3lts___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_2on___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3off___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts_LTS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts_Component(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct____get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_3_succ(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_3ddd_xdd;
  PyTypeObject *__pyx_ptype_3ddd_ddd;
  PyTypeObject *__pyx_ptype_3ddd_sdd;
  PyTypeObject *__pyx_ptype_3ddd_shom;
  PyTypeObject *__pyx_ptype_3its_model;
  PyObject *__pyx_type_4ecco_3lrr_3lts_LTS;
  PyObject *__pyx_type_4ecco_3lrr_3lts_Component;
  PyObject *__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get__;
  PyObject *__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge;
  PyObject *__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr;
  PyObject *__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ;
  PyObject *__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts_LTS;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts_Component;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ;
  PyTypeObject *__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values;
  __Pyx_CachedCFunction __pyx_umethod_PySet_Type__update;
  PyObject *__pyx_k__6;
  PyObject *__pyx_k__7;
  PyObject *__pyx_k__8;
  PyObject *__pyx_k__9;
  PyObject *__pyx_tuple[10];
  PyObject *__pyx_codeobj_tab[38];
  PyObject *__pyx_string_tab[213];
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
/* #### Code section: module_state_contents ### */
/* IterNextPlain.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
PyObject *__Pyx_GetBuiltinNext_LimitedAPI_cache;
#endif

/* CommonTypesMetaclass.module_state_decls */
PyTypeObject *__pyx_CommonTypesMetaclassType;


#if CYTHON_USE_FREELISTS
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct____get__[8];
int __pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct____get__;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_1_merge[8];
int __pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_1_merge;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr[8];
int __pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_3_succ[8];
int __pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_3_succ;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit[8];
int __pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit;
#endif
/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_n_u_C __pyx_string_tab[1]
#define __pyx_n_u_CONTAINS __pyx_string_tab[2]
#define __pyx_n_u_Component __pyx_string_tab[3]
#define __pyx_n_u_Component___get __pyx_string_tab[4]
#define __pyx_n_u_Component___reduce_cython __pyx_string_tab[5]
#define __pyx_n_u_Component___setstate_cython __pyx_string_tab[6]
#define __pyx_n_u_Component__count __pyx_string_tab[7]
#define __pyx_n_u_Component_check __pyx_string_tab[8]
#define __pyx_n_u_Component_copy __pyx_string_tab[9]
#define __pyx_n_u_Component_count __pyx_string_tab[10]
#define __pyx_n_u_Component_dump __pyx_string_tab[11]
#define __pyx_n_u_Component_explicit __pyx_string_tab[12]
#define __pyx_n_u_Component_form __pyx_string_tab[13]
#define __pyx_n_u_Component_load __pyx_string_tab[14]
#define __pyx_n_u_Component_merge __pyx_string_tab[15]
#define __pyx_n_u_Component_on_off __pyx_string_tab[16]
#define __pyx_n_u_Component_props_row __pyx_string_tab[17]
#define __pyx_n_u_Component_split __pyx_string_tab[18]
#define __pyx_n_u_Component_succ __pyx_string_tab[19]
#define __pyx_n_u_Component_tag __pyx_string_tab[20]
#define __pyx_n_u_Component_topo_split __pyx_string_tab[21]
#define __pyx_n_u_DDD __pyx_string_tab[22]
#define __pyx_n_u_EQUALS __pyx_string_tab[23]
#define __pyx_n_u_GAL __pyx_string_tab[24]
#define __pyx_n_u_HAS __pyx_string_tab[25]
#define __pyx_n_u_HASNO __pyx_string_tab[26]
#define __pyx_n_u_ISIN __pyx_string_tab[27]
#define __pyx_n_u_IntEnum __pyx_string_tab[28]
#define __pyx_n_u_IntFlag __pyx_string_tab[29]
#define __pyx_n_u_LTS __pyx_string_tab[30]
#define __pyx_n_u_LTS___reduce_cython __pyx_string_tab[31]
#define __pyx_n_u_LTS___setstate_cython __pyx_string_tab[32]
#define __pyx_n_u_LTS_add_prop __pyx_string_tab[33]
#define __pyx_n_u_LTS_copy __pyx_string_tab[34]
#define __pyx_n_u_LTS_dump __pyx_string_tab[35]
#define __pyx_n_u_LTS_form __pyx_string_tab[36]
#define __pyx_n_u_LTS_graph_props __pyx_string_tab[37]
#define __pyx_n_u_LTS_has_dead __pyx_string_tab[38]
#define __pyx_n_u_LTS_has_init __pyx_string_tab[39]
#define __pyx_n_u_LTS_is_dead __pyx_string_tab[40]
#define __pyx_n_u_LTS_is_hull __pyx_string_tab[41]
#define __pyx_n_u_LTS_is_init __pyx_string_tab[42]
#define __pyx_n_u_LTS_is_scc __pyx_string_tab[43]
#define __pyx_n_u_LTS_isin_dead __pyx_string_tab[44]
#define __pyx_n_u_LTS_isin_init __pyx_string_tab[45]
#define __pyx_n_u_LTS_load __pyx_string_tab[46]
#define __pyx_n_u_LTS_load_file __pyx_string_tab[47]
#define __pyx_n_u_LTS_save_file __pyx_string_tab[48]
#define __pyx_n_u_LTS_var2sdd __pyx_string_tab[49]
#define __pyx_n_u_Not __pyx_string_tab[50]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[51]
#define __pyx_n_u_Or __pyx_string_tab[52]
#define __pyx_n_u_Symbol __pyx_string_tab[53]
#define __pyx_n_u_TypeError __pyx_string_tab[54]
#define __pyx_n_u_ValueError __pyx_string_tab[55]
#define __pyx_kp_u__10 __pyx_string_tab[56]
#define __pyx_kp_u__11 __pyx_string_tab[57]
#define __pyx_kp_u__2 __pyx_string_tab[58]
#define __pyx_kp_u__3 __pyx_string_tab[59]
#define __pyx_kp_u__4 __pyx_string_tab[60]
#define __pyx_kp_u__5 __pyx_string_tab[61]
#define __pyx_n_u_add __pyx_string_tab[62]
#define __pyx_kp_u_add_note __pyx_string_tab[63]
#define __pyx_n_u_add_prop __pyx_string_tab[64]
#define __pyx_n_u_alias __pyx_string_tab[65]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[66]
#define __pyx_n_u_c __pyx_string_tab[67]
#define __pyx_n_u_callable __pyx_string_tab[68]
#define __pyx_n_u_check __pyx_string_tab[69]
#define __pyx_n_u_class_getitem __pyx_string_tab[70]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[71]
#define __pyx_n_u_close __pyx_string_tab[72]
#define __pyx_n_u_cls __pyx_string_tab[73]
#define __pyx_n_u_compact __pyx_string_tab[74]
#define __pyx_n_u_compo __pyx_string_tab[75]
#define __pyx_kp_u_components_do_not_belong_to_the __pyx_string_tab[76]
#define __pyx_n_u_copy __pyx_string_tab[77]
#define __pyx_n_u_count __pyx_string_tab[78]
#define __pyx_n_u_count_2 __pyx_string_tab[79]
#define __pyx_n_u_d __pyx_string_tab[80]
#define __pyx_n_u_ddd __pyx_string_tab[81]
#define __pyx_n_u_ddd_load __pyx_string_tab[82]
#define __pyx_n_u_ddd_save __pyx_string_tab[83]
#define __pyx_n_u_ddds __pyx_string_tab[84]
#define __pyx_n_u_dead __pyx_string_tab[85]
#define __pyx_n_u_dict __pyx_string_tab[86]
#define __pyx_kp_u_disable __pyx_string_tab[87]
#define __pyx_n_u_dump __pyx_string_tab[88]
#define __pyx_n_u_ecco_lrr_lts __pyx_string_tab[89]
#define __pyx_kp_u_ecco_lrr_lts __pyx_string_tab[90]
#define __pyx_kp_u_ecco_lrr_lts_pyx __pyx_string_tab[91]
#define __pyx_kp_u_ecco_lts_lTS __pyx_string_tab[92]
#define __pyx_n_u_edges __pyx_string_tab[93]
#define __pyx_n_u_empty __pyx_string_tab[94]
#define __pyx_kp_u_enable __pyx_string_tab[95]
#define __pyx_n_u_enum __pyx_string_tab[96]
#define __pyx_n_u_explicit __pyx_string_tab[97]
#define __pyx_n_u_first __pyx_string_tab[98]
#define __pyx_n_u_fmt __pyx_string_tab[99]
#define __pyx_n_u_form __pyx_string_tab[100]
#define __pyx_n_u_from_range __pyx_string_tab[101]
#define __pyx_n_u_func __pyx_string_tab[102]
#define __pyx_kp_u_gc __pyx_string_tab[103]
#define __pyx_n_u_genexpr __pyx_string_tab[104]
#define __pyx_n_u_get __pyx_string_tab[105]
#define __pyx_n_u_get_2 __pyx_string_tab[106]
#define __pyx_n_u_getmembers __pyx_string_tab[107]
#define __pyx_n_u_getstate __pyx_string_tab[108]
#define __pyx_n_u_gp __pyx_string_tab[109]
#define __pyx_n_u_graph_props __pyx_string_tab[110]
#define __pyx_n_u_h __pyx_string_tab[111]
#define __pyx_n_u_has __pyx_string_tab[112]
#define __pyx_n_u_has_dead __pyx_string_tab[113]
#define __pyx_n_u_has_init __pyx_string_tab[114]
#define __pyx_n_u_head __pyx_string_tab[115]
#define __pyx_n_u_hull __pyx_string_tab[116]
#define __pyx_n_u_ident __pyx_string_tab[117]
#define __pyx_n_u_init __pyx_string_tab[118]
#define __pyx_n_u_initializing __pyx_string_tab[119]
#define __pyx_n_u_inspect __pyx_string_tab[120]
#define __pyx_kp_u_invalid_initial_state __pyx_string_tab[121]
#define __pyx_n_u_is __pyx_string_tab[122]
#define __pyx_n_u_is_coroutine __pyx_string_tab[123]
#define __pyx_n_u_is_dead __pyx_string_tab[124]
#define __pyx_n_u_is_hull __pyx_string_tab[125]
#define __pyx_n_u_is_init __pyx_string_tab[126]
#define __pyx_n_u_is_scc __pyx_string_tab[127]
#define __pyx_kp_u_isenabled __pyx_string_tab[128]
#define __pyx_n_u_isin __pyx_string_tab[129]
#define __pyx_n_u_isin_dead __pyx_string_tab[130]
#define __pyx_n_u_isin_init __pyx_string_tab[131]
#define __pyx_n_u_items __pyx_string_tab[132]
#define __pyx_n_u_lfp __pyx_string_tab[133]
#define __pyx_n_u_load __pyx_string_tab[134]
#define __pyx_n_u_load_file __pyx_string_tab[135]
#define __pyx_n_u_lts __pyx_string_tab[136]
#define __pyx_n_u_main __pyx_string_tab[137]
#define __pyx_n_u_map __pyx_string_tab[138]
#define __pyx_n_u_member_names __pyx_string_tab[139]
#define __pyx_n_u_members __pyx_string_tab[140]
#define __pyx_n_u_merge __pyx_string_tab[141]
#define __pyx_n_u_merge_locals_genexpr __pyx_string_tab[142]
#define __pyx_n_u_mkz __pyx_string_tab[143]
#define __pyx_n_u_module __pyx_string_tab[144]
#define __pyx_n_u_module_2 __pyx_string_tab[145]
#define __pyx_n_u_name __pyx_string_tab[146]
#define __pyx_n_u_name_2 __pyx_string_tab[147]
#define __pyx_n_u_next __pyx_string_tab[148]
#define __pyx_kp_u_no_default___reduce___due_to_non __pyx_string_tab[149]
#define __pyx_n_u_normalise __pyx_string_tab[150]
#define __pyx_n_u_num __pyx_string_tab[151]
#define __pyx_n_u_off __pyx_string_tab[152]
#define __pyx_n_u_on __pyx_string_tab[153]
#define __pyx_n_u_on_off __pyx_string_tab[154]
#define __pyx_n_u_one __pyx_string_tab[155]
#define __pyx_n_u_oth __pyx_string_tab[156]
#define __pyx_n_u_others __pyx_string_tab[157]
#define __pyx_n_u_p __pyx_string_tab[158]
#define __pyx_n_u_path __pyx_string_tab[159]
#define __pyx_n_u_pop __pyx_string_tab[160]
#define __pyx_n_u_prop __pyx_string_tab[161]
#define __pyx_n_u_props __pyx_string_tab[162]
#define __pyx_n_u_props_row __pyx_string_tab[163]
#define __pyx_n_u_pyx_state __pyx_string_tab[164]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[165]
#define __pyx_n_u_qualname __pyx_string_tab[166]
#define __pyx_n_u_reduce __pyx_string_tab[167]
#define __pyx_n_u_reduce_cython __pyx_string_tab[168]
#define __pyx_n_u_reduce_ex __pyx_string_tab[169]
#define __pyx_n_u_rest __pyx_string_tab[170]
#define __pyx_n_u_reversed __pyx_string_tab[171]
#define __pyx_n_u_s __pyx_string_tab[172]
#define __pyx_n_u_save_file __pyx_string_tab[173]
#define __pyx_n_u_seen __pyx_string_tab[174]
#define __pyx_n_u_self __pyx_string_tab[175]
#define __pyx_n_u_send __pyx_string_tab[176]
#define __pyx_n_u_set_name __pyx_string_tab[177]
#define __pyx_n_u_setrel __pyx_string_tab[178]
#define __pyx_n_u_setstate __pyx_string_tab[179]
#define __pyx_n_u_setstate_cython __pyx_string_tab[180]
#define __pyx_n_u_simplify_logic __pyx_string_tab[181]
#define __pyx_n_u_sp __pyx_string_tab[182]
#define __pyx_n_u_spec __pyx_string_tab[183]
#define __pyx_n_u_split __pyx_string_tab[184]
#define __pyx_n_u_split_dead __pyx_string_tab[185]
#define __pyx_n_u_split_entries __pyx_string_tab[186]
#define __pyx_n_u_split_exits __pyx_string_tab[187]
#define __pyx_n_u_split_hull __pyx_string_tab[188]
#define __pyx_n_u_split_init __pyx_string_tab[189]
#define __pyx_n_u_split_props __pyx_string_tab[190]
#define __pyx_n_u_startswith __pyx_string_tab[191]
#define __pyx_n_u_state __pyx_string_tab[192]
#define __pyx_n_u_states __pyx_string_tab[193]
#define __pyx_kp_u_stringsource __pyx_string_tab[194]
#define __pyx_n_u_succ __pyx_string_tab[195]
#define __pyx_n_u_sympy __pyx_string_tab[196]
#define __pyx_n_u_t __pyx_string_tab[197]
#define __pyx_n_u_tag __pyx_string_tab[198]
#define __pyx_n_u_test __pyx_string_tab[199]
#define __pyx_n_u_throw __pyx_string_tab[200]
#define __pyx_n_u_topo_split __pyx_string_tab[201]
#define __pyx_n_u_transient __pyx_string_tab[202]
#define __pyx_n_u_true __pyx_string_tab[203]
#define __pyx_n_u_union __pyx_string_tab[204]
#define __pyx_kp_u_unknown_variable __pyx_string_tab[205]
#define __pyx_n_u_update __pyx_string_tab[206]
#define __pyx_n_u_value __pyx_string_tab[207]
#define __pyx_n_u_values __pyx_string_tab[208]
#define __pyx_n_u_var2sdd __pyx_string_tab[209]
#define __pyx_n_u_variables __pyx_string_tab[210]
#define __pyx_n_u_vars __pyx_string_tab[211]
#define __pyx_n_u_zip __pyx_string_tab[212]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_3ddd_xdd);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ddd_ddd);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ddd_sdd);
  Py_CLEAR(clear_module_state->__pyx_ptype_3ddd_shom);
  Py_CLEAR(clear_module_state->__pyx_ptype_3its_model);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts_LTS);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts_LTS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts_Component);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts_Component);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get__);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ);
  Py_CLEAR(clear_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit);
  Py_CLEAR(clear_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit);
  Py_CLEAR(clear_module_state->__pyx_k__6);
  Py_CLEAR(clear_module_state->__pyx_k__7);
  Py_CLEAR(clear_module_state->__pyx_k__8);
  Py_CLEAR(clear_module_state->__pyx_k__9);
  for (int i=0; i<10; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<38; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<213; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_3ddd_xdd);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ddd_ddd);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ddd_sdd);
  Py_VISIT(traverse_module_state->__pyx_ptype_3ddd_shom);
  Py_VISIT(traverse_module_state->__pyx_ptype_3its_model);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts_LTS);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts_LTS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts_Component);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts_Component);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get__);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ);
  Py_VISIT(traverse_module_state->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit);
  Py_VISIT(traverse_module_state->__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit);
  Py_VISIT(traverse_module_state->__pyx_k__6);
  Py_VISIT(traverse_module_state->__pyx_k__7);
  Py_VISIT(traverse_module_state->__pyx_k__8);
  Py_VISIT(traverse_module_state->__pyx_k__9);
  for (int i=0; i<10; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<38; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<213; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "EnumTypeToPy":2
 * 
 * @cname("__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py")             # <<<<<<<<<<<<<<
 * cdef __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(setrel c_val):
 *     cdef object __pyx_enum
*/

static PyObject *__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_v_c_val) {
  PyObject *__pyx_v___pyx_enum = 0;
  int __pyx_v_underlying_c_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py", 0);

  /* "EnumTypeToPy":5
 * cdef __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(setrel c_val):
 *     cdef object __pyx_enum
 *     __pyx_enum = setrel             # <<<<<<<<<<<<<<
 * 
 *     if 0:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_setrel); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v___pyx_enum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "EnumTypeToPy":7
 *     __pyx_enum = setrel
 * 
 *     if 0:             # <<<<<<<<<<<<<<
 *         pass
 *     elif c_val == setrel.HASNO:
*/
  switch (__pyx_v_c_val) {
    case __pyx_e_4ecco_3lrr_3lts_HASNO:

    /* "EnumTypeToPy":10
 *         pass
 *     elif c_val == setrel.HASNO:
 *         return __pyx_enum.HASNO             # <<<<<<<<<<<<<<
 *     elif c_val == setrel.HAS:
 *         return __pyx_enum.HAS
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_mstate_global->__pyx_n_u_HASNO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":9
 *     if 0:
 *         pass
 *     elif c_val == setrel.HASNO:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.HASNO
 *     elif c_val == setrel.HAS:
*/
    break;
    case __pyx_e_4ecco_3lrr_3lts_HAS:

    /* "EnumTypeToPy":12
 *         return __pyx_enum.HASNO
 *     elif c_val == setrel.HAS:
 *         return __pyx_enum.HAS             # <<<<<<<<<<<<<<
 *     elif c_val == setrel.CONTAINS:
 *         return __pyx_enum.CONTAINS
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_mstate_global->__pyx_n_u_HAS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":11
 *     elif c_val == setrel.HASNO:
 *         return __pyx_enum.HASNO
 *     elif c_val == setrel.HAS:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.HAS
 *     elif c_val == setrel.CONTAINS:
*/
    break;
    case __pyx_e_4ecco_3lrr_3lts_CONTAINS:

    /* "EnumTypeToPy":14
 *         return __pyx_enum.HAS
 *     elif c_val == setrel.CONTAINS:
 *         return __pyx_enum.CONTAINS             # <<<<<<<<<<<<<<
 *     elif c_val == setrel.ISIN:
 *         return __pyx_enum.ISIN
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_mstate_global->__pyx_n_u_CONTAINS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":13
 *     elif c_val == setrel.HAS:
 *         return __pyx_enum.HAS
 *     elif c_val == setrel.CONTAINS:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.CONTAINS
 *     elif c_val == setrel.ISIN:
*/
    break;
    case __pyx_e_4ecco_3lrr_3lts_ISIN:

    /* "EnumTypeToPy":16
 *         return __pyx_enum.CONTAINS
 *     elif c_val == setrel.ISIN:
 *         return __pyx_enum.ISIN             # <<<<<<<<<<<<<<
 *     elif c_val == setrel.EQUALS:
 *         return __pyx_enum.EQUALS
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_mstate_global->__pyx_n_u_ISIN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":15
 *     elif c_val == setrel.CONTAINS:
 *         return __pyx_enum.CONTAINS
 *     elif c_val == setrel.ISIN:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.ISIN
 *     elif c_val == setrel.EQUALS:
*/
    break;
    case __pyx_e_4ecco_3lrr_3lts_EQUALS:

    /* "EnumTypeToPy":18
 *         return __pyx_enum.ISIN
 *     elif c_val == setrel.EQUALS:
 *         return __pyx_enum.EQUALS             # <<<<<<<<<<<<<<
 *     else:
 *         underlying_c_val = <int>c_val
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v___pyx_enum, __pyx_mstate_global->__pyx_n_u_EQUALS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "EnumTypeToPy":17
 *     elif c_val == setrel.ISIN:
 *         return __pyx_enum.ISIN
 *     elif c_val == setrel.EQUALS:             # <<<<<<<<<<<<<<
 *         return __pyx_enum.EQUALS
 *     else:
*/
    break;
    default:

    /* "EnumTypeToPy":20
 *         return __pyx_enum.EQUALS
 *     else:
 *         underlying_c_val = <int>c_val             # <<<<<<<<<<<<<<
 *         return __pyx_enum(underlying_c_val)
 * 
*/
    __pyx_v_underlying_c_val = ((int)__pyx_v_c_val);

    /* "EnumTypeToPy":21
 *     else:
 *         underlying_c_val = <int>c_val
 *         return __pyx_enum(underlying_c_val)             # <<<<<<<<<<<<<<
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v___pyx_enum);
    __pyx_t_3 = __pyx_v___pyx_enum; 
    __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_underlying_c_val); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
      __pyx_t_5 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
  }

  /* "EnumTypeToPy":2
 * 
 * @cname("__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py")             # <<<<<<<<<<<<<<
 * cdef __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(setrel c_val):
 *     cdef object __pyx_enum
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EnumTypeToPy.__Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_enum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":15
 *     ctypedef short val_t
 * 
 * cdef inline ddd s2d (sdd s) :             # <<<<<<<<<<<<<<
 *     for t in s.edges() :
 *         return t.value
*/

static CYTHON_INLINE struct __pyx_obj_3ddd_ddd *__pyx_f_4ecco_3lrr_3lts_s2d(struct __pyx_obj_3ddd_sdd *__pyx_v_s) {
  PyObject *__pyx_v_t = NULL;
  struct __pyx_obj_3ddd_ddd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("s2d", 0);

  /* "ecco/lrr/lts.pyx":16
 * 
 * cdef inline ddd s2d (sdd s) :
 *     for t in s.edges() :             # <<<<<<<<<<<<<<
 *         return t.value
 * 
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_s);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_edges, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 16, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_4);
        ++__pyx_t_4;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 16, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_4);
        #endif
        ++__pyx_t_4;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 16, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_t = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":17
 * cdef inline ddd s2d (sdd s) :
 *     for t in s.edges() :
 *         return t.value             # <<<<<<<<<<<<<<
 * 
 * cdef inline sdd d2s (ddd d) :
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 17, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":16
 * 
 * cdef inline ddd s2d (sdd s) :
 *     for t in s.edges() :             # <<<<<<<<<<<<<<
 *         return t.value
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":15
 *     ctypedef short val_t
 * 
 * cdef inline ddd s2d (sdd s) :             # <<<<<<<<<<<<<<
 *     for t in s.edges() :
 *         return t.value
*/

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_3ddd_ddd *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.s2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":19
 *         return t.value
 * 
 * cdef inline sdd d2s (ddd d) :             # <<<<<<<<<<<<<<
 *     return sdd.mkz(d)
 * 
*/

static CYTHON_INLINE struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_d2s(struct __pyx_obj_3ddd_ddd *__pyx_v_d) {
  struct __pyx_obj_3ddd_sdd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("d2s", 0);

  /* "ecco/lrr/lts.pyx":20
 * 
 * cdef inline sdd d2s (ddd d) :
 *     return sdd.mkz(d)             # <<<<<<<<<<<<<<
 * 
 * cdef class LTS (object) :
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_d)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_mkz, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":19
 *         return t.value
 * 
 * cdef inline sdd d2s (ddd d) :             # <<<<<<<<<<<<<<
 *     return sdd.mkz(d)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.d2s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":56
 *     cdef readonly shom constraints
 *     cdef readonly sdd transient
 *     cpdef void save_file (LTS self, str path) :             # <<<<<<<<<<<<<<
 *         """save LTS to file `path`
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_1save_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_4ecco_3lrr_3lts_3LTS_save_file(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_dump = 0;
  PyObject *__pyx_v_ddds = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_file", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_save_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_1save_file)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_path};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":62
 *          - `path` (`str`): path where to save the LTS
 *         """
 *         cdef dict dump = self.dump()             # <<<<<<<<<<<<<<
 *         cdef list ddds = dump.pop("DDD")
 *         ddd_save(path, *ddds, **dump)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->dump(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dump = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":63
 *         """
 *         cdef dict dump = self.dump()
 *         cdef list ddds = dump.pop("DDD")             # <<<<<<<<<<<<<<
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Pop(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_DDD, ((PyObject *)NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_v_ddds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":64
 *         cdef dict dump = self.dump()
 *         cdef list ddds = dump.pop("DDD")
 *         ddd_save(path, *ddds, **dump)             # <<<<<<<<<<<<<<
 *     cpdef dict dump (LTS self) :
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_ddd_save); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_path) != (0)) __PYX_ERR(0, 64, __pyx_L1_error);
  __pyx_t_4 = PySequence_Tuple(__pyx_v_ddds); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_t_4 = PyDict_Copy(__pyx_v_dump); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":56
 *     cdef readonly shom constraints
 *     cdef readonly sdd transient
 *     cpdef void save_file (LTS self, str path) :             # <<<<<<<<<<<<<<
 *         """save LTS to file `path`
 * 
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.save_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dump);
  __Pyx_XDECREF(__pyx_v_ddds);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_1save_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_save_file, "save LTS to file `path`\n\n        Parameters:\n         - `path` (`str`): path where to save the LTS\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_1save_file = {"save_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_1save_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_save_file};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_1save_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 56, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 56, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "save_file", 0) < 0) __PYX_ERR(0, 56, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("save_file", 1, 1, 1, i); __PYX_ERR(0, 56, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 56, __pyx_L3_error)
    }
    __pyx_v_path = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.save_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyUnicode_Type), 1, "path", 1))) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_save_file(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_save_file(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_file", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_4ecco_3lrr_3lts_3LTS_save_file(__pyx_v_self, __pyx_v_path, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.save_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":65
 *         cdef list ddds = dump.pop("DDD")
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
 *                           s2d(self.dead), s2d(self.hull),
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_3dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_dump(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ddds = 0;
  PyObject *__pyx_v_props = 0;
  PyObject *__pyx_v_p = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_dump); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_3dump)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 65, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":66
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :
 *         cdef list ddds = [s2d(self.init), s2d(self.states),             # <<<<<<<<<<<<<<
 *                           s2d(self.dead), s2d(self.hull),
 *                           s2d(self.transient)]
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->init);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":67
 *     cpdef dict dump (LTS self) :
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
 *                           s2d(self.dead), s2d(self.hull),             # <<<<<<<<<<<<<<
 *                           s2d(self.transient)]
 *         cdef list props = []
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->dead);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_v_self->hull);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":68
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
 *                           s2d(self.dead), s2d(self.hull),
 *                           s2d(self.transient)]             # <<<<<<<<<<<<<<
 *         cdef list props = []
 *         cdef str p
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->transient);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_7 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":66
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :
 *         cdef list ddds = [s2d(self.init), s2d(self.states),             # <<<<<<<<<<<<<<
 *                           s2d(self.dead), s2d(self.hull),
 *                           s2d(self.transient)]
*/
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2) != (0)) __PYX_ERR(0, 66, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_4) != (0)) __PYX_ERR(0, 66, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_3) != (0)) __PYX_ERR(0, 66, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_6) != (0)) __PYX_ERR(0, 66, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_7) != (0)) __PYX_ERR(0, 66, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_v_ddds = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":69
 *                           s2d(self.dead), s2d(self.hull),
 *                           s2d(self.transient)]
 *         cdef list props = []             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef sdd s
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":72
 *         cdef str p
 *         cdef sdd s
 *         for p, s in self.props.items() :             # <<<<<<<<<<<<<<
 *             props.append(p)
 *             ddds.append(s2d(s))
*/
  __pyx_t_8 = 0;
  if (unlikely(__pyx_v_self->props == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_self->props, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_9, &__pyx_t_8, &__pyx_t_7, &__pyx_t_6, NULL, __pyx_t_10);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_7))) __PYX_ERR(0, 72, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_s, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":73
 *         cdef sdd s
 *         for p, s in self.props.items() :
 *             props.append(p)             # <<<<<<<<<<<<<<
 *             ddds.append(s2d(s))
 *         return {"path" : self.path,
*/
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_props, __pyx_v_p); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 73, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":74
 *         for p, s in self.props.items() :
 *             props.append(p)
 *             ddds.append(s2d(s))             # <<<<<<<<<<<<<<
 *         return {"path" : self.path,
 *                 "props" : props,
*/
    __pyx_t_6 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(__pyx_v_s)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_ddds, __pyx_t_6); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":75
 *             props.append(p)
 *             ddds.append(s2d(s))
 *         return {"path" : self.path,             # <<<<<<<<<<<<<<
 *                 "props" : props,
 *                 "alias" : self.alias,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_path, __pyx_v_self->path) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":76
 *             ddds.append(s2d(s))
 *         return {"path" : self.path,
 *                 "props" : props,             # <<<<<<<<<<<<<<
 *                 "alias" : self.alias,
 *                 "vars" : self.vars,
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_props, __pyx_v_props) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":77
 *         return {"path" : self.path,
 *                 "props" : props,
 *                 "alias" : self.alias,             # <<<<<<<<<<<<<<
 *                 "vars" : self.vars,
 *                 "compact" : self.compact,
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_alias, __pyx_v_self->alias) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":78
 *                 "props" : props,
 *                 "alias" : self.alias,
 *                 "vars" : self.vars,             # <<<<<<<<<<<<<<
 *                 "compact" : self.compact,
 *                 "DDD" : ddds}
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_vars, __pyx_v_self->vars) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":79
 *                 "alias" : self.alias,
 *                 "vars" : self.vars,
 *                 "compact" : self.compact,             # <<<<<<<<<<<<<<
 *                 "DDD" : ddds}
 *     @classmethod
*/
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->compact); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_compact, __pyx_t_6) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "ecco/lrr/lts.pyx":80
 *                 "vars" : self.vars,
 *                 "compact" : self.compact,
 *                 "DDD" : ddds}             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def load (cls, dict dump) :
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_DDD, __pyx_v_ddds) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":65
 *         cdef list ddds = dump.pop("DDD")
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
 *                           s2d(self.dead), s2d(self.hull),
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ddds);
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_3dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_3dump = {"dump", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_3dump, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_3dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("dump", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("dump", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_2dump(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_2dump(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_dump(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":81
 *                 "compact" : self.compact,
 *                 "DDD" : ddds}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dict dump) :
 *         cdef list props
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5load(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_5load = {"load", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_5load, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5load(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dump = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_dump,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 81, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 81, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "load", 0) < 0) __PYX_ERR(0, 81, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("load", 1, 1, 1, i); __PYX_ERR(0, 81, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 81, __pyx_L3_error)
    }
    __pyx_v_dump = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 81, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dump), (&PyDict_Type), 1, "dump", 1))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4load(((PyTypeObject*)__pyx_v_cls), __pyx_v_dump);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4load(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dump) {
  PyObject *__pyx_v_props = 0;
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts = 0;
  PyObject *__pyx_v_p = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_d = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_init = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_states = 0;
  CYTHON_UNUSED struct __pyx_obj_3ddd_ddd *__pyx_v_dead = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_hull = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_transient = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "ecco/lrr/lts.pyx":87
 *         cdef str p
 *         cdef ddd d, init, states, dead, hull, transient
 *         init, states, dead, hull, transient, *props = dump["DDD"]             # <<<<<<<<<<<<<<
 *         lts = LTS.__new__(LTS, dump["path"])
 *         lts.gal = model(lts.path, fmt="GAL")
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_DDD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
    for (index=0; index < 5; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 87, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 87, __pyx_L1_error)
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 87, __pyx_L1_error)
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 87, __pyx_L1_error)
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 87, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __pyx_t_9 = PySequence_List(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_init = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_states = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_dead = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_v_hull = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_v_transient = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_v_props = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ecco/lrr/lts.pyx":88
 *         cdef ddd d, init, states, dead, hull, transient
 *         init, states, dead, hull, transient, *props = dump["DDD"]
 *         lts = LTS.__new__(LTS, dump["path"])             # <<<<<<<<<<<<<<
 *         lts.gal = model(lts.path, fmt="GAL")
 *         lts.vars = dump["vars"]
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 88, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4ecco_3lrr_3lts_LTS(((PyTypeObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS), __pyx_t_9, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":89
 *         init, states, dead, hull, transient, *props = dump["DDD"]
 *         lts = LTS.__new__(LTS, dump["path"])
 *         lts.gal = model(lts.path, fmt="GAL")             # <<<<<<<<<<<<<<
 *         lts.vars = dump["vars"]
 *         lts.compact = dump["compact"]
*/
  __pyx_t_9 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_3its_model);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3its_model); 
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_9, __pyx_v_lts->path};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_fmt, __pyx_mstate_global->__pyx_n_u_GAL, __pyx_t_5, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_6, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->gal);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->gal);
  __pyx_v_lts->gal = ((struct __pyx_obj_3its_model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":90
 *         lts = LTS.__new__(LTS, dump["path"])
 *         lts.gal = model(lts.path, fmt="GAL")
 *         lts.vars = dump["vars"]             # <<<<<<<<<<<<<<
 *         lts.compact = dump["compact"]
 *         lts.alias = dump["alias"]
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_lts->vars);
  __Pyx_DECREF(__pyx_v_lts->vars);
  __pyx_v_lts->vars = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":91
 *         lts.gal = model(lts.path, fmt="GAL")
 *         lts.vars = dump["vars"]
 *         lts.compact = dump["compact"]             # <<<<<<<<<<<<<<
 *         lts.alias = dump["alias"]
 *         lts.init = d2s(init)
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_compact); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lts->compact = __pyx_t_11;

  /* "ecco/lrr/lts.pyx":92
 *         lts.vars = dump["vars"]
 *         lts.compact = dump["compact"]
 *         lts.alias = dump["alias"]             # <<<<<<<<<<<<<<
 *         lts.init = d2s(init)
 *         lts.states = d2s(states)
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 92, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_alias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_lts->alias);
  __Pyx_DECREF(__pyx_v_lts->alias);
  __pyx_v_lts->alias = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":93
 *         lts.compact = dump["compact"]
 *         lts.alias = dump["alias"]
 *         lts.init = d2s(init)             # <<<<<<<<<<<<<<
 *         lts.states = d2s(states)
 *         lts.dead = d2s(states)
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_init)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->init);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->init);
  __pyx_v_lts->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":94
 *         lts.alias = dump["alias"]
 *         lts.init = d2s(init)
 *         lts.states = d2s(states)             # <<<<<<<<<<<<<<
 *         lts.dead = d2s(states)
 *         lts.hull = d2s(hull)
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->states);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->states);
  __pyx_v_lts->states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":95
 *         lts.init = d2s(init)
 *         lts.states = d2s(states)
 *         lts.dead = d2s(states)             # <<<<<<<<<<<<<<
 *         lts.hull = d2s(hull)
 *         lts.transient = d2s(transient)
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->dead);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->dead);
  __pyx_v_lts->dead = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":96
 *         lts.states = d2s(states)
 *         lts.dead = d2s(states)
 *         lts.hull = d2s(hull)             # <<<<<<<<<<<<<<
 *         lts.transient = d2s(transient)
 *         for p, d in zip(dump["props"], props) :
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_hull)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->hull);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->hull);
  __pyx_v_lts->hull = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":97
 *         lts.dead = d2s(states)
 *         lts.hull = d2s(hull)
 *         lts.transient = d2s(transient)             # <<<<<<<<<<<<<<
 *         for p, d in zip(dump["props"], props) :
 *             lts.props[p] = d2s(d)
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_transient)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->transient);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->transient);
  __pyx_v_lts->transient = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":98
 *         lts.hull = d2s(hull)
 *         lts.transient = d2s(transient)
 *         for p, d in zip(dump["props"], props) :             # <<<<<<<<<<<<<<
 *             lts.props[p] = d2s(d)
 *         lts._build_succ()
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_5 = __pyx_builtin_zip; 
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_props); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_9, __pyx_v_props};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5);
    __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 98, __pyx_L1_error)
          #endif
          if (__pyx_t_12 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_12);
        ++__pyx_t_12;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 98, __pyx_L1_error)
          #endif
          if (__pyx_t_12 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_12);
        #endif
        ++__pyx_t_12;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_13(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 98, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 98, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_6);
      } else {
        __pyx_t_9 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_9);
        __pyx_t_6 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_6);
      }
      #else
      __pyx_t_9 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_9 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 98, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_9))) __PYX_ERR(0, 98, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":99
 *         lts.transient = d2s(transient)
 *         for p, d in zip(dump["props"], props) :
 *             lts.props[p] = d2s(d)             # <<<<<<<<<<<<<<
 *         lts._build_succ()
 *         if lts.compact :
*/
    __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_lts->props == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 99, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_lts->props, __pyx_v_p, __pyx_t_1) < 0))) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":98
 *         lts.hull = d2s(hull)
 *         lts.transient = d2s(transient)
 *         for p, d in zip(dump["props"], props) :             # <<<<<<<<<<<<<<
 *             lts.props[p] = d2s(d)
 *         lts._build_succ()
*/
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ecco/lrr/lts.pyx":100
 *         for p, d in zip(dump["props"], props) :
 *             lts.props[p] = d2s(d)
 *         lts._build_succ()             # <<<<<<<<<<<<<<
 *         if lts.compact :
 *             lts._build_compact()
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_lts->__pyx_vtab)->_build_succ(__pyx_v_lts); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":101
 *             lts.props[p] = d2s(d)
 *         lts._build_succ()
 *         if lts.compact :             # <<<<<<<<<<<<<<
 *             lts._build_compact()
 *         lts._build_pred()
*/
  if (__pyx_v_lts->compact) {

    /* "ecco/lrr/lts.pyx":102
 *         lts._build_succ()
 *         if lts.compact :
 *             lts._build_compact()             # <<<<<<<<<<<<<<
 *         lts._build_pred()
 *         return lts
*/
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_lts->__pyx_vtab)->_build_compact(__pyx_v_lts); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":101
 *             lts.props[p] = d2s(d)
 *         lts._build_succ()
 *         if lts.compact :             # <<<<<<<<<<<<<<
 *             lts._build_compact()
 *         lts._build_pred()
*/
  }

  /* "ecco/lrr/lts.pyx":103
 *         if lts.compact :
 *             lts._build_compact()
 *         lts._build_pred()             # <<<<<<<<<<<<<<
 *         return lts
 *     @classmethod
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_lts->__pyx_vtab)->_build_pred(__pyx_v_lts); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":104
 *             lts._build_compact()
 *         lts._build_pred()
 *         return lts             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def load_file (cls, str path) :
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_lts);
  __pyx_r = ((PyObject *)__pyx_v_lts);
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":81
 *                 "compact" : self.compact,
 *                 "DDD" : ddds}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dict dump) :
 *         cdef list props
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_XDECREF((PyObject *)__pyx_v_lts);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_init);
  __Pyx_XDECREF((PyObject *)__pyx_v_states);
  __Pyx_XDECREF((PyObject *)__pyx_v_dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_hull);
  __Pyx_XDECREF((PyObject *)__pyx_v_transient);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":105
 *         lts._build_pred()
 *         return lts
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load_file (cls, str path) :
 *         """load a previously saved LTS
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_7load_file(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_6load_file, "load a previously saved LTS\n\n        Parameters:\n         - `path` (`str`): path from which the LTS is loaded\n        Returns: an instance of `LTS`\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_7load_file = {"load_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_7load_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_6load_file};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_7load_file(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 105, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 105, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "load_file", 0) < 0) __PYX_ERR(0, 105, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("load_file", 1, 1, 1, i); __PYX_ERR(0, 105, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 105, __pyx_L3_error)
    }
    __pyx_v_path = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 105, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.load_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyUnicode_Type), 1, "path", 1))) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6load_file(((PyTypeObject*)__pyx_v_cls), __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6load_file(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_path) {
  PyObject *__pyx_v_dump = 0;
  PyObject *__pyx_v_ddds = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_file", 0);

  /* "ecco/lrr/lts.pyx":115
 *         cdef dict dump
 *         cdef list ddds
 *         dump, ddds = ddd_load(path)             # <<<<<<<<<<<<<<
 *         dump["DDD"] = ddds
 *         return cls.load(dump)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ddd_load); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 115, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_3 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_2);
    }
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 115, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_3))) __PYX_ERR(0, 115, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_2))) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_v_dump = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_ddds = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":116
 *         cdef list ddds
 *         dump, ddds = ddd_load(path)
 *         dump["DDD"] = ddds             # <<<<<<<<<<<<<<
 *         return cls.load(dump)
 *     def __cinit__ (self, str path, object init="", bint compact=True) :
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 116, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_DDD, __pyx_v_ddds) < 0))) __PYX_ERR(0, 116, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":117
 *         dump, ddds = ddd_load(path)
 *         dump["DDD"] = ddds
 *         return cls.load(dump)             # <<<<<<<<<<<<<<
 *     def __cinit__ (self, str path, object init="", bint compact=True) :
 *         self.path = path
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_cls);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_dump};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_load, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":105
 *         lts._build_pred()
 *         return lts
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load_file (cls, str path) :
 *         """load a previously saved LTS
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.load_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dump);
  __Pyx_XDECREF(__pyx_v_ddds);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":118
 *         dump["DDD"] = ddds
 *         return cls.load(dump)
 *     def __cinit__ (self, str path, object init="", bint compact=True) :             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.compact = compact
*/

/* Python wrapper */
static int __pyx_pw_4ecco_3lrr_3lts_3LTS_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4ecco_3lrr_3lts_3LTS_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  CYTHON_UNUSED PyObject *__pyx_v_init = 0;
  int __pyx_v_compact;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,&__pyx_mstate_global->__pyx_n_u_init,&__pyx_mstate_global->__pyx_n_u_compact,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 118, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 118, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 118, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 118, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 118, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u_));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, i); __PYX_ERR(0, 118, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 118, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 118, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 118, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u_));
    }
    __pyx_v_path = ((PyObject*)values[0]);
    __pyx_v_init = values[1];
    if (values[2]) {
      __pyx_v_compact = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_compact == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L3_error)
    } else {
      __pyx_v_compact = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 118, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyUnicode_Type), 1, "path", 1))) __PYX_ERR(0, 118, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_8__cinit__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_path, __pyx_v_init, __pyx_v_compact);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ecco_3lrr_3lts_3LTS_8__cinit__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_init, int __pyx_v_compact) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ecco/lrr/lts.pyx":119
 *         return cls.load(dump)
 *     def __cinit__ (self, str path, object init="", bint compact=True) :
 *         self.path = path             # <<<<<<<<<<<<<<
 *         self.compact = compact
 *         self.props = {}
*/
  __Pyx_INCREF(__pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  __Pyx_GOTREF(__pyx_v_self->path);
  __Pyx_DECREF(__pyx_v_self->path);
  __pyx_v_self->path = __pyx_v_path;

  /* "ecco/lrr/lts.pyx":120
 *     def __cinit__ (self, str path, object init="", bint compact=True) :
 *         self.path = path
 *         self.compact = compact             # <<<<<<<<<<<<<<
 *         self.props = {}
 *         self.alias = {}
*/
  __pyx_v_self->compact = __pyx_v_compact;

  /* "ecco/lrr/lts.pyx":121
 *         self.path = path
 *         self.compact = compact
 *         self.props = {}             # <<<<<<<<<<<<<<
 *         self.alias = {}
 *         self.tsucc = {}
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->props);
  __Pyx_DECREF(__pyx_v_self->props);
  __pyx_v_self->props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":122
 *         self.compact = compact
 *         self.props = {}
 *         self.alias = {}             # <<<<<<<<<<<<<<
 *         self.tsucc = {}
 *         self.tpred = {}
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->alias);
  __Pyx_DECREF(__pyx_v_self->alias);
  __pyx_v_self->alias = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":123
 *         self.props = {}
 *         self.alias = {}
 *         self.tsucc = {}             # <<<<<<<<<<<<<<
 *         self.tpred = {}
 *         self._var2sdd = {}
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tsucc);
  __Pyx_DECREF(__pyx_v_self->tsucc);
  __pyx_v_self->tsucc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":124
 *         self.alias = {}
 *         self.tsucc = {}
 *         self.tpred = {}             # <<<<<<<<<<<<<<
 *         self._var2sdd = {}
 *     cpdef LTS copy (LTS self) :
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tpred);
  __Pyx_DECREF(__pyx_v_self->tpred);
  __pyx_v_self->tpred = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":125
 *         self.tsucc = {}
 *         self.tpred = {}
 *         self._var2sdd = {}             # <<<<<<<<<<<<<<
 *     cpdef LTS copy (LTS self) :
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_var2sdd);
  __Pyx_DECREF(__pyx_v_self->_var2sdd);
  __pyx_v_self->_var2sdd = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":118
 *         dump["DDD"] = ddds
 *         return cls.load(dump)
 *     def __cinit__ (self, str path, object init="", bint compact=True) :             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.compact = compact
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":126
 *         self.tpred = {}
 *         self._var2sdd = {}
 *     cpdef LTS copy (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
 *         lts.gal = self.gal
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_f_4ecco_3lrr_3lts_3LTS_copy(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts = 0;
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_11copy)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS))))) __PYX_ERR(0, 126, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":127
 *         self._var2sdd = {}
 *     cpdef LTS copy (LTS self) :
 *         cdef LTS lts = LTS.__new__(LTS, self.path)             # <<<<<<<<<<<<<<
 *         lts.gal = self.gal
 *         lts.init = self.init
*/
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->path);
  __Pyx_GIVEREF(__pyx_v_self->path);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->path) != (0)) __PYX_ERR(0, 127, __pyx_L1_error);
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_4ecco_3lrr_3lts_LTS(((PyTypeObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":128
 *     cpdef LTS copy (LTS self) :
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
 *         lts.gal = self.gal             # <<<<<<<<<<<<<<
 *         lts.init = self.init
 *         lts.states = self.states
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->gal);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->gal);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->gal);
  __pyx_v_lts->gal = ((struct __pyx_obj_3its_model *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":129
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
 *         lts.gal = self.gal
 *         lts.init = self.init             # <<<<<<<<<<<<<<
 *         lts.states = self.states
 *         lts.dead = self.dead
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->init);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->init);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->init);
  __pyx_v_lts->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":130
 *         lts.gal = self.gal
 *         lts.init = self.init
 *         lts.states = self.states             # <<<<<<<<<<<<<<
 *         lts.dead = self.dead
 *         lts.hull = self.hull
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->states);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->states);
  __pyx_v_lts->states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":131
 *         lts.init = self.init
 *         lts.states = self.states
 *         lts.dead = self.dead             # <<<<<<<<<<<<<<
 *         lts.hull = self.hull
 *         lts.succ = self.succ
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->dead);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->dead);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->dead);
  __pyx_v_lts->dead = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":132
 *         lts.states = self.states
 *         lts.dead = self.dead
 *         lts.hull = self.hull             # <<<<<<<<<<<<<<
 *         lts.succ = self.succ
 *         lts.pred = self.pred
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->hull);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->hull);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->hull);
  __pyx_v_lts->hull = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":133
 *         lts.dead = self.dead
 *         lts.hull = self.hull
 *         lts.succ = self.succ             # <<<<<<<<<<<<<<
 *         lts.pred = self.pred
 *         lts.succ_o = self.succ_o
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->succ);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->succ);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->succ);
  __pyx_v_lts->succ = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":134
 *         lts.hull = self.hull
 *         lts.succ = self.succ
 *         lts.pred = self.pred             # <<<<<<<<<<<<<<
 *         lts.succ_o = self.succ_o
 *         lts.pred_o = self.pred_o
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->pred);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->pred);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->pred);
  __pyx_v_lts->pred = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":135
 *         lts.succ = self.succ
 *         lts.pred = self.pred
 *         lts.succ_o = self.succ_o             # <<<<<<<<<<<<<<
 *         lts.pred_o = self.pred_o
 *         lts.succ_s = self.succ_s
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->succ_o);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->succ_o);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->succ_o);
  __pyx_v_lts->succ_o = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":136
 *         lts.pred = self.pred
 *         lts.succ_o = self.succ_o
 *         lts.pred_o = self.pred_o             # <<<<<<<<<<<<<<
 *         lts.succ_s = self.succ_s
 *         lts.pred_s = self.pred_s
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->pred_o);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->pred_o);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->pred_o);
  __pyx_v_lts->pred_o = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":137
 *         lts.succ_o = self.succ_o
 *         lts.pred_o = self.pred_o
 *         lts.succ_s = self.succ_s             # <<<<<<<<<<<<<<
 *         lts.pred_s = self.pred_s
 *         lts.props.update(self.props) # not shared among instances
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->succ_s);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->succ_s);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->succ_s);
  __pyx_v_lts->succ_s = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":138
 *         lts.pred_o = self.pred_o
 *         lts.succ_s = self.succ_s
 *         lts.pred_s = self.pred_s             # <<<<<<<<<<<<<<
 *         lts.props.update(self.props) # not shared among instances
 *         lts.alias.update(self.alias) # not shared among instances
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->pred_s);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->pred_s);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->pred_s);
  __pyx_v_lts->pred_s = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":139
 *         lts.succ_s = self.succ_s
 *         lts.pred_s = self.pred_s
 *         lts.props.update(self.props) # not shared among instances             # <<<<<<<<<<<<<<
 *         lts.alias.update(self.alias) # not shared among instances
 *         lts.tsucc = self.tsucc
*/
  __pyx_t_1 = __pyx_v_lts->props;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_self->props};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_update, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":140
 *         lts.pred_s = self.pred_s
 *         lts.props.update(self.props) # not shared among instances
 *         lts.alias.update(self.alias) # not shared among instances             # <<<<<<<<<<<<<<
 *         lts.tsucc = self.tsucc
 *         lts.tpred = self.tpred
*/
  __pyx_t_1 = __pyx_v_lts->alias;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_self->alias};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_update, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":141
 *         lts.props.update(self.props) # not shared among instances
 *         lts.alias.update(self.alias) # not shared among instances
 *         lts.tsucc = self.tsucc             # <<<<<<<<<<<<<<
 *         lts.tpred = self.tpred
 *         lts.vars = self.vars
*/
  __pyx_t_2 = __pyx_v_self->tsucc;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_lts->tsucc);
  __Pyx_DECREF(__pyx_v_lts->tsucc);
  __pyx_v_lts->tsucc = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":142
 *         lts.alias.update(self.alias) # not shared among instances
 *         lts.tsucc = self.tsucc
 *         lts.tpred = self.tpred             # <<<<<<<<<<<<<<
 *         lts.vars = self.vars
 *         lts._var2sdd = self._var2sdd
*/
  __pyx_t_2 = __pyx_v_self->tpred;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_lts->tpred);
  __Pyx_DECREF(__pyx_v_lts->tpred);
  __pyx_v_lts->tpred = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":143
 *         lts.tsucc = self.tsucc
 *         lts.tpred = self.tpred
 *         lts.vars = self.vars             # <<<<<<<<<<<<<<
 *         lts._var2sdd = self._var2sdd
 *         lts.compact = self.compact
*/
  __pyx_t_2 = __pyx_v_self->vars;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_lts->vars);
  __Pyx_DECREF(__pyx_v_lts->vars);
  __pyx_v_lts->vars = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":144
 *         lts.tpred = self.tpred
 *         lts.vars = self.vars
 *         lts._var2sdd = self._var2sdd             # <<<<<<<<<<<<<<
 *         lts.compact = self.compact
 *         lts.constraints = self.constraints
*/
  __pyx_t_2 = __pyx_v_self->_var2sdd;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_lts->_var2sdd);
  __Pyx_DECREF(__pyx_v_lts->_var2sdd);
  __pyx_v_lts->_var2sdd = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":145
 *         lts.vars = self.vars
 *         lts._var2sdd = self._var2sdd
 *         lts.compact = self.compact             # <<<<<<<<<<<<<<
 *         lts.constraints = self.constraints
 *         lts.transient = self.transient
*/
  __pyx_t_6 = __pyx_v_self->compact;
  __pyx_v_lts->compact = __pyx_t_6;

  /* "ecco/lrr/lts.pyx":146
 *         lts._var2sdd = self._var2sdd
 *         lts.compact = self.compact
 *         lts.constraints = self.constraints             # <<<<<<<<<<<<<<
 *         lts.transient = self.transient
 *         return lts
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->constraints);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->constraints);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->constraints);
  __pyx_v_lts->constraints = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":147
 *         lts.compact = self.compact
 *         lts.constraints = self.constraints
 *         lts.transient = self.transient             # <<<<<<<<<<<<<<
 *         return lts
 *     def __eq__ (self, other) :
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->transient);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_lts->transient);
  __Pyx_DECREF((PyObject *)__pyx_v_lts->transient);
  __pyx_v_lts->transient = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":148
 *         lts.constraints = self.constraints
 *         lts.transient = self.transient
 *         return lts             # <<<<<<<<<<<<<<
 *     def __eq__ (self, other) :
 *         return (self.path == other.path
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_lts);
  __pyx_r = __pyx_v_lts;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":126
 *         self.tpred = {}
 *         self._var2sdd = {}
 *     cpdef LTS copy (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
 *         lts.gal = self.gal
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lts);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_11copy = {"copy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_11copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_11copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("copy", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_10copy(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_10copy(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_3LTS_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":149
 *         lts.transient = self.transient
 *         return lts
 *     def __eq__ (self, other) :             # <<<<<<<<<<<<<<
 *         return (self.path == other.path
 *                 and self.init == other.init)
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_13__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_12__eq__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_12__eq__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "ecco/lrr/lts.pyx":150
 *         return lts
 *     def __eq__ (self, other) :
 *         return (self.path == other.path             # <<<<<<<<<<<<<<
 *                 and self.init == other.init)
 *     def __hash__ (self) :
*/
  __Pyx_XDECREF(__pyx_r);

  /* "ecco/lrr/lts.pyx":151
 *     def __eq__ (self, other) :
 *         return (self.path == other.path
 *                 and self.init == other.init)             # <<<<<<<<<<<<<<
 *     def __hash__ (self) :
 *         return hash(("ecco.lts.lTS", self.path, self.init))
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_mstate_global->__pyx_n_u_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->path, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 150, __pyx_L1_error)
  if (__pyx_t_4) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_mstate_global->__pyx_n_u_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->init), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":149
 *         lts.transient = self.transient
 *         return lts
 *     def __eq__ (self, other) :             # <<<<<<<<<<<<<<
 *         return (self.path == other.path
 *                 and self.init == other.init)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":152
 *         return (self.path == other.path
 *                 and self.init == other.init)
 *     def __hash__ (self) :             # <<<<<<<<<<<<<<
 *         return hash(("ecco.lts.lTS", self.path, self.init))
 *     def __init__ (self, str path, object init="", bint compact=True) :
*/

/* Python wrapper */
static Py_hash_t __pyx_pw_4ecco_3lrr_3lts_3LTS_15__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_4ecco_3lrr_3lts_3LTS_15__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_14__hash__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_4ecco_3lrr_3lts_3LTS_14__hash__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "ecco/lrr/lts.pyx":153
 *                 and self.init == other.init)
 *     def __hash__ (self) :
 *         return hash(("ecco.lts.lTS", self.path, self.init))             # <<<<<<<<<<<<<<
 *     def __init__ (self, str path, object init="", bint compact=True) :
 *         """creates an LTS instance
*/
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u_ecco_lts_lTS);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_u_ecco_lts_lTS);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_mstate_global->__pyx_kp_u_ecco_lts_lTS) != (0)) __PYX_ERR(0, 153, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->path);
  __Pyx_GIVEREF(__pyx_v_self->path);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->path) != (0)) __PYX_ERR(0, 153, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self->init);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->init);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->init)) != (0)) __PYX_ERR(0, 153, __pyx_L1_error);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":152
 *         return (self.path == other.path
 *                 and self.init == other.init)
 *     def __hash__ (self) :             # <<<<<<<<<<<<<<
 *         return hash(("ecco.lts.lTS", self.path, self.init))
 *     def __init__ (self, str path, object init="", bint compact=True) :
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":154
 *     def __hash__ (self) :
 *         return hash(("ecco.lts.lTS", self.path, self.init))
 *     def __init__ (self, str path, object init="", bint compact=True) :             # <<<<<<<<<<<<<<
 *         """creates an LTS instance
 * 
*/

/* Python wrapper */
static int __pyx_pw_4ecco_3lrr_3lts_3LTS_17__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_16__init__, "creates an LTS instance\n\n        Parameters:\n         - `path` (`str`): path of a GAL file from which the LTS has to be created\n         - `init` (`str=\"\"` or `list[str]`): initial set of states\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_4ecco_3lrr_3lts_3LTS_16__init__;
#endif
static int __pyx_pw_4ecco_3lrr_3lts_3LTS_17__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_init = 0;
  CYTHON_UNUSED int __pyx_v_compact;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,&__pyx_mstate_global->__pyx_n_u_init,&__pyx_mstate_global->__pyx_n_u_compact,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 154, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 154, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u_));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, i); __PYX_ERR(0, 154, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 154, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_kp_u_));
    }
    __pyx_v_path = ((PyObject*)values[0]);
    __pyx_v_init = values[1];
    if (values[2]) {
      __pyx_v_compact = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_compact == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
    } else {
      __pyx_v_compact = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyUnicode_Type), 1, "path", 1))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_16__init__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_path, __pyx_v_init, __pyx_v_compact);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ecco_3lrr_3lts_3LTS_16__init__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_init, CYTHON_UNUSED int __pyx_v_compact) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ecco/lrr/lts.pyx":161
 *          - `init` (`str=""` or `list[str]`): initial set of states
 *         """
 *         self.gal = model(path, fmt="GAL")             # <<<<<<<<<<<<<<
 *         self.vars = s2d(self.gal.initial()).vars()
 *         self._build_succ()
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_3its_model);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3its_model); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_v_path};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_fmt, __pyx_mstate_global->__pyx_n_u_GAL, __pyx_t_5, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->gal);
  __Pyx_DECREF((PyObject *)__pyx_v_self->gal);
  __pyx_v_self->gal = ((struct __pyx_obj_3its_model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":162
 *         """
 *         self.gal = model(path, fmt="GAL")
 *         self.vars = s2d(self.gal.initial()).vars()             # <<<<<<<<<<<<<<
 *         self._build_succ()
 *         if isinstance(init, str) :
*/
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3its_model *)__pyx_v_self->gal->__pyx_vtab)->initial(__pyx_v_self->gal, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_3ddd_ddd *)((struct __pyx_obj_3ddd_ddd *)__pyx_t_3)->__pyx_base.__pyx_vtab)->vars(((struct __pyx_obj_3ddd_ddd *)__pyx_t_3), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->vars);
  __Pyx_DECREF(__pyx_v_self->vars);
  __pyx_v_self->vars = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":163
 *         self.gal = model(path, fmt="GAL")
 *         self.vars = s2d(self.gal.initial()).vars()
 *         self._build_succ()             # <<<<<<<<<<<<<<
 *         if isinstance(init, str) :
 *             self._build_initial_states([init])
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_succ(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":164
 *         self.vars = s2d(self.gal.initial()).vars()
 *         self._build_succ()
 *         if isinstance(init, str) :             # <<<<<<<<<<<<<<
 *             self._build_initial_states([init])
 *         else :
*/
  __pyx_t_6 = PyUnicode_Check(__pyx_v_init); 
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":165
 *         self._build_succ()
 *         if isinstance(init, str) :
 *             self._build_initial_states([init])             # <<<<<<<<<<<<<<
 *         else :
 *             self._build_initial_states(list(init))
*/
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_init);
    __Pyx_GIVEREF(__pyx_v_init);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_init) != (0)) __PYX_ERR(0, 165, __pyx_L1_error);
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_initial_states(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":164
 *         self.vars = s2d(self.gal.initial()).vars()
 *         self._build_succ()
 *         if isinstance(init, str) :             # <<<<<<<<<<<<<<
 *             self._build_initial_states([init])
 *         else :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":167
 *             self._build_initial_states([init])
 *         else :
 *             self._build_initial_states(list(init))             # <<<<<<<<<<<<<<
 *         if init == "*" :
 *             self.states = self.init
*/
  /*else*/ {
    __pyx_t_1 = PySequence_List(__pyx_v_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_initial_states(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "ecco/lrr/lts.pyx":168
 *         else :
 *             self._build_initial_states(list(init))
 *         if init == "*" :             # <<<<<<<<<<<<<<
 *             self.states = self.init
 *         else :
*/
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_init, __pyx_mstate_global->__pyx_kp_u__2, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 168, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":169
 *             self._build_initial_states(list(init))
 *         if init == "*" :
 *             self.states = self.init             # <<<<<<<<<<<<<<
 *         else :
 *             self._build_reachable_states()
*/
    __pyx_t_1 = ((PyObject *)__pyx_v_self->init);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
    __Pyx_DECREF((PyObject *)__pyx_v_self->states);
    __pyx_v_self->states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":168
 *         else :
 *             self._build_initial_states(list(init))
 *         if init == "*" :             # <<<<<<<<<<<<<<
 *             self.states = self.init
 *         else :
*/
    goto __pyx_L4;
  }

  /* "ecco/lrr/lts.pyx":171
 *             self.states = self.init
 *         else :
 *             self._build_reachable_states()             # <<<<<<<<<<<<<<
 *         if self.compact :
 *             self._build_compact()
*/
  /*else*/ {
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_reachable_states(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "ecco/lrr/lts.pyx":172
 *         else :
 *             self._build_reachable_states()
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             self._build_compact()
 *         self._build_pred()
*/
  if (__pyx_v_self->compact) {

    /* "ecco/lrr/lts.pyx":173
 *             self._build_reachable_states()
 *         if self.compact :
 *             self._build_compact()             # <<<<<<<<<<<<<<
 *         self._build_pred()
 *         self._build_dead_states()
*/
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_compact(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":172
 *         else :
 *             self._build_reachable_states()
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             self._build_compact()
 *         self._build_pred()
*/
  }

  /* "ecco/lrr/lts.pyx":174
 *         if self.compact :
 *             self._build_compact()
 *         self._build_pred()             # <<<<<<<<<<<<<<
 *         self._build_dead_states()
 *         self._build_hull_states()
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_pred(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":175
 *             self._build_compact()
 *         self._build_pred()
 *         self._build_dead_states()             # <<<<<<<<<<<<<<
 *         self._build_hull_states()
 *     cdef void _build_succ (LTS self) :
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_dead_states(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":176
 *         self._build_pred()
 *         self._build_dead_states()
 *         self._build_hull_states()             # <<<<<<<<<<<<<<
 *     cdef void _build_succ (LTS self) :
 *         # build the successor relations
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_hull_states(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":154
 *     def __hash__ (self) :
 *         return hash(("ecco.lts.lTS", self.path, self.init))
 *     def __init__ (self, str path, object init="", bint compact=True) :             # <<<<<<<<<<<<<<
 *         """creates an LTS instance
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":177
 *         self._build_dead_states()
 *         self._build_hull_states()
 *     cdef void _build_succ (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the successor relations
 *         cdef dict d = self.gal.transitions()
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_succ(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_v_t = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_h = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_c = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_succ", 0);

  /* "ecco/lrr/lts.pyx":179
 *     cdef void _build_succ (LTS self) :
 *         # build the successor relations
 *         cdef dict d = self.gal.transitions()             # <<<<<<<<<<<<<<
 *         cdef list constraints = []
 *         cdef str t
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_3its_model *)__pyx_v_self->gal->__pyx_vtab)->transitions(__pyx_v_self->gal, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":180
 *         # build the successor relations
 *         cdef dict d = self.gal.transitions()
 *         cdef list constraints = []             # <<<<<<<<<<<<<<
 *         cdef str t
 *         cdef shom h, c
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_constraints = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":183
 *         cdef str t
 *         cdef shom h, c
 *         for t, h in d.items() :             # <<<<<<<<<<<<<<
 *             if t.startswith("C") :
 *                 constraints.append(h)
*/
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 183, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 183, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_3ddd_shom *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":184
 *         cdef shom h, c
 *         for t, h in d.items() :
 *             if t.startswith("C") :             # <<<<<<<<<<<<<<
 *                 constraints.append(h)
 *                 if not self.compact :
*/
    if (unlikely(__pyx_v_t == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "startswith");
      __PYX_ERR(0, 184, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyUnicode_Tailmatch(__pyx_v_t, __pyx_mstate_global->__pyx_n_u_C, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 184, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "ecco/lrr/lts.pyx":185
 *         for t, h in d.items() :
 *             if t.startswith("C") :
 *                 constraints.append(h)             # <<<<<<<<<<<<<<
 *                 if not self.compact :
 *                     self.tsucc[t] = h
*/
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_constraints, ((PyObject *)__pyx_v_h)); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 185, __pyx_L1_error)

      /* "ecco/lrr/lts.pyx":186
 *             if t.startswith("C") :
 *                 constraints.append(h)
 *                 if not self.compact :             # <<<<<<<<<<<<<<
 *                     self.tsucc[t] = h
 *             else :
*/
      __pyx_t_8 = (!__pyx_v_self->compact);
      if (__pyx_t_8) {

        /* "ecco/lrr/lts.pyx":187
 *                 constraints.append(h)
 *                 if not self.compact :
 *                     self.tsucc[t] = h             # <<<<<<<<<<<<<<
 *             else :
 *                 self.tsucc[t] = h
*/
        if (unlikely(__pyx_v_self->tsucc == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 187, __pyx_L1_error)
        }
        if (unlikely((PyDict_SetItem(__pyx_v_self->tsucc, __pyx_v_t, ((PyObject *)__pyx_v_h)) < 0))) __PYX_ERR(0, 187, __pyx_L1_error)

        /* "ecco/lrr/lts.pyx":186
 *             if t.startswith("C") :
 *                 constraints.append(h)
 *                 if not self.compact :             # <<<<<<<<<<<<<<
 *                     self.tsucc[t] = h
 *             else :
*/
      }

      /* "ecco/lrr/lts.pyx":184
 *         cdef shom h, c
 *         for t, h in d.items() :
 *             if t.startswith("C") :             # <<<<<<<<<<<<<<
 *                 constraints.append(h)
 *                 if not self.compact :
*/
      goto __pyx_L5;
    }

    /* "ecco/lrr/lts.pyx":189
 *                     self.tsucc[t] = h
 *             else :
 *                 self.tsucc[t] = h             # <<<<<<<<<<<<<<
 *         self.constraints = shom.union(*constraints)
 *         if self.compact :
*/
    /*else*/ {
      if (unlikely(__pyx_v_self->tsucc == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 189, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_self->tsucc, __pyx_v_t, ((PyObject *)__pyx_v_h)) < 0))) __PYX_ERR(0, 189, __pyx_L1_error)
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":190
 *             else :
 *                 self.tsucc[t] = h
 *         self.constraints = shom.union(*constraints)             # <<<<<<<<<<<<<<
 *         if self.compact :
 *             c = self.constraints.lfp()
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_shom), __pyx_mstate_global->__pyx_n_u_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PySequence_Tuple(__pyx_v_constraints); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->constraints);
  __Pyx_DECREF((PyObject *)__pyx_v_self->constraints);
  __pyx_v_self->constraints = ((struct __pyx_obj_3ddd_shom *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ecco/lrr/lts.pyx":191
 *                 self.tsucc[t] = h
 *         self.constraints = shom.union(*constraints)
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             c = self.constraints.lfp()
 *             self.succ = c * shom.union(*self.tsucc.values())
*/
  if (__pyx_v_self->compact) {

    /* "ecco/lrr/lts.pyx":192
 *         self.constraints = shom.union(*constraints)
 *         if self.compact :
 *             c = self.constraints.lfp()             # <<<<<<<<<<<<<<
 *             self.succ = c * shom.union(*self.tsucc.values())
 *             for t, h in self.tsucc.items() :
*/
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->constraints->__pyx_vtab)->lfp(__pyx_v_self->constraints, 0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_c = ((struct __pyx_obj_3ddd_shom *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ecco/lrr/lts.pyx":193
 *         if self.compact :
 *             c = self.constraints.lfp()
 *             self.succ = c * shom.union(*self.tsucc.values())             # <<<<<<<<<<<<<<
 *             for t, h in self.tsucc.items() :
 *                 self.tsucc[t] = c * h
*/
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_shom), __pyx_mstate_global->__pyx_n_u_union); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__pyx_v_self->tsucc == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 193, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_Values(__pyx_v_self->tsucc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_c), __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->succ);
    __Pyx_DECREF((PyObject *)__pyx_v_self->succ);
    __pyx_v_self->succ = ((struct __pyx_obj_3ddd_shom *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":194
 *             c = self.constraints.lfp()
 *             self.succ = c * shom.union(*self.tsucc.values())
 *             for t, h in self.tsucc.items() :             # <<<<<<<<<<<<<<
 *                 self.tsucc[t] = c * h
 *         else :
*/
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->tsucc == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 194, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->tsucc, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_2), (&__pyx_t_4)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_3, &__pyx_t_6, &__pyx_t_5, NULL, __pyx_t_4);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_6))) __PYX_ERR(0, 194, __pyx_L1_error)
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_3ddd_shom *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "ecco/lrr/lts.pyx":195
 *             self.succ = c * shom.union(*self.tsucc.values())
 *             for t, h in self.tsucc.items() :
 *                 self.tsucc[t] = c * h             # <<<<<<<<<<<<<<
 *         else :
 *             self.succ = shom.union(*self.tsucc.values())
*/
      __pyx_t_5 = PyNumber_Multiply(((PyObject *)__pyx_v_c), ((PyObject *)__pyx_v_h)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_self->tsucc == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 195, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_self->tsucc, __pyx_v_t, __pyx_t_5) < 0))) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":191
 *                 self.tsucc[t] = h
 *         self.constraints = shom.union(*constraints)
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             c = self.constraints.lfp()
 *             self.succ = c * shom.union(*self.tsucc.values())
*/
    goto __pyx_L7;
  }

  /* "ecco/lrr/lts.pyx":197
 *                 self.tsucc[t] = c * h
 *         else :
 *             self.succ = shom.union(*self.tsucc.values())             # <<<<<<<<<<<<<<
 *         self.succ_o = self.succ.gfp()
 *         self.succ_s = self.succ.lfp()
*/
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_shom), __pyx_mstate_global->__pyx_n_u_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->tsucc == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 197, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_Values(__pyx_v_self->tsucc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PySequence_Tuple(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->succ);
    __Pyx_DECREF((PyObject *)__pyx_v_self->succ);
    __pyx_v_self->succ = ((struct __pyx_obj_3ddd_shom *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L7:;

  /* "ecco/lrr/lts.pyx":198
 *         else :
 *             self.succ = shom.union(*self.tsucc.values())
 *         self.succ_o = self.succ.gfp()             # <<<<<<<<<<<<<<
 *         self.succ_s = self.succ.lfp()
 *     cdef void _build_initial_states (LTS self, list init) except * :
*/
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->succ->__pyx_vtab)->gfp(__pyx_v_self->succ, 0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->succ_o);
  __Pyx_DECREF((PyObject *)__pyx_v_self->succ_o);
  __pyx_v_self->succ_o = ((struct __pyx_obj_3ddd_shom *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ecco/lrr/lts.pyx":199
 *             self.succ = shom.union(*self.tsucc.values())
 *         self.succ_o = self.succ.gfp()
 *         self.succ_s = self.succ.lfp()             # <<<<<<<<<<<<<<
 *     cdef void _build_initial_states (LTS self, list init) except * :
 *         cdef str s
*/
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->succ->__pyx_vtab)->lfp(__pyx_v_self->succ, 0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->succ_s);
  __Pyx_DECREF((PyObject *)__pyx_v_self->succ_s);
  __pyx_v_self->succ_s = ((struct __pyx_obj_3ddd_shom *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ecco/lrr/lts.pyx":177
 *         self._build_dead_states()
 *         self._build_hull_states()
 *     cdef void _build_succ (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the successor relations
 *         cdef dict d = self.gal.transitions()
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_succ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_constraints);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":200
 *         self.succ_o = self.succ.gfp()
 *         self.succ_s = self.succ.lfp()
 *     cdef void _build_initial_states (LTS self, list init) except * :             # <<<<<<<<<<<<<<
 *         cdef str s
 *         cdef shom t
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_init) {
  PyObject *__pyx_v_s = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_t = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_initial_states", 0);

  /* "ecco/lrr/lts.pyx":203
 *         cdef str s
 *         cdef shom t
 *         self.init = sdd.empty()             # <<<<<<<<<<<<<<
 *         for s in init :
 *             self.init |= self._build_initial_states_one(s)
*/
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->init);
  __Pyx_DECREF((PyObject *)__pyx_v_self->init);
  __pyx_v_self->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":204
 *         cdef shom t
 *         self.init = sdd.empty()
 *         for s in init :             # <<<<<<<<<<<<<<
 *             self.init |= self._build_initial_states_one(s)
 *         if self.compact :
*/
  if (unlikely(__pyx_v_init == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 204, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_init; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 204, __pyx_L1_error)
      #endif
      if (__pyx_t_4 >= __pyx_temp) break;
    }
    __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_4);
    ++__pyx_t_4;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":205
 *         self.init = sdd.empty()
 *         for s in init :
 *             self.init |= self._build_initial_states_one(s)             # <<<<<<<<<<<<<<
 *         if self.compact :
 *             t = self.constraints.lfp()
*/
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_build_initial_states_one(__pyx_v_self, __pyx_v_s)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_InPlaceOr(((PyObject *)__pyx_v_self->init), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->init);
    __Pyx_DECREF((PyObject *)__pyx_v_self->init);
    __pyx_v_self->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ecco/lrr/lts.pyx":204
 *         cdef shom t
 *         self.init = sdd.empty()
 *         for s in init :             # <<<<<<<<<<<<<<
 *             self.init |= self._build_initial_states_one(s)
 *         if self.compact :
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":206
 *         for s in init :
 *             self.init |= self._build_initial_states_one(s)
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             t = self.constraints.lfp()
 *             self.init = t(self.init)
*/
  if (__pyx_v_self->compact) {

    /* "ecco/lrr/lts.pyx":207
 *             self.init |= self._build_initial_states_one(s)
 *         if self.compact :
 *             t = self.constraints.lfp()             # <<<<<<<<<<<<<<
 *             self.init = t(self.init)
 *     cdef sdd _build_initial_states_one (LTS self, str init) :
*/
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->constraints->__pyx_vtab)->lfp(__pyx_v_self->constraints, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_t = ((struct __pyx_obj_3ddd_shom *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":208
 *         if self.compact :
 *             t = self.constraints.lfp()
 *             self.init = t(self.init)             # <<<<<<<<<<<<<<
 *     cdef sdd _build_initial_states_one (LTS self, str init) :
 *         cdef ddd d
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_t);
    __pyx_t_2 = ((PyObject *)__pyx_v_t); 
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self->init)};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->init);
    __Pyx_DECREF((PyObject *)__pyx_v_self->init);
    __pyx_v_self->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":206
 *         for s in init :
 *             self.init |= self._build_initial_states_one(s)
 *         if self.compact :             # <<<<<<<<<<<<<<
 *             t = self.constraints.lfp()
 *             self.init = t(self.init)
*/
  }

  /* "ecco/lrr/lts.pyx":200
 *         self.succ_o = self.succ.gfp()
 *         self.succ_s = self.succ.lfp()
 *     cdef void _build_initial_states (LTS self, list init) except * :             # <<<<<<<<<<<<<<
 *         cdef str s
 *         cdef shom t
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_initial_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":209
 *             t = self.constraints.lfp()
 *             self.init = t(self.init)
 *     cdef sdd _build_initial_states_one (LTS self, str init) :             # <<<<<<<<<<<<<<
 *         cdef ddd d
 *         cdef str v, s
*/

static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states_one(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_init) {
  struct __pyx_obj_3ddd_ddd *__pyx_v_d = 0;
  PyObject *__pyx_v_v = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_i = 0;
  int __pyx_v_a;
  int __pyx_v_b;
  PyObject *__pyx_7genexpr__pyx_v_v = NULL;
  int __pyx_7genexpr__pyx_v_a;
  struct __pyx_obj_3ddd_sdd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_initial_states_one", 0);

  /* "ecco/lrr/lts.pyx":214
 *         cdef dict i
 *         cdef int a, b
 *         if init == "" :             # <<<<<<<<<<<<<<
 *             return self.gal.initial()
 *         elif init == "*" :
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_init, __pyx_mstate_global->__pyx_kp_u_, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 214, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ecco/lrr/lts.pyx":215
 *         cdef int a, b
 *         if init == "" :
 *             return self.gal.initial()             # <<<<<<<<<<<<<<
 *         elif init == "*" :
 *             d = ddd.one()
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3its_model *)__pyx_v_self->gal->__pyx_vtab)->initial(__pyx_v_self->gal, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":214
 *         cdef dict i
 *         cdef int a, b
 *         if init == "" :             # <<<<<<<<<<<<<<
 *             return self.gal.initial()
 *         elif init == "*" :
*/
  }

  /* "ecco/lrr/lts.pyx":216
 *         if init == "" :
 *             return self.gal.initial()
 *         elif init == "*" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_init, __pyx_mstate_global->__pyx_kp_u__2, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 216, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ecco/lrr/lts.pyx":217
 *             return self.gal.initial()
 *         elif init == "*" :
 *             d = ddd.one()             # <<<<<<<<<<<<<<
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 1, d)
*/
    __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_one, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":218
 *         elif init == "*" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 0, 1, d)
 *             return d2s(d)
*/
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->vars; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 218, __pyx_L1_error)
    #endif
    --__pyx_t_5;
    for (;;) {
      if (__pyx_t_5 < 0) break;
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 218, __pyx_L1_error)
        #endif
        if (__pyx_t_5 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5));
      #else
      __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5);
      #endif
      --__pyx_t_5;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_3))) __PYX_ERR(0, 218, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":219
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 1, d)             # <<<<<<<<<<<<<<
 *             return d2s(d)
 *         elif init == "+" :
*/
      __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = 0;
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_v, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_1, ((PyObject *)__pyx_v_d)};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_4, (5-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 219, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":218
 *         elif init == "*" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 0, 1, d)
 *             return d2s(d)
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":220
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 1, d)
 *             return d2s(d)             # <<<<<<<<<<<<<<
 *         elif init == "+" :
 *             d = ddd.one()
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":216
 *         if init == "" :
 *             return self.gal.initial()
 *         elif init == "*" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  }

  /* "ecco/lrr/lts.pyx":221
 *                 d = ddd.from_range(v, 0, 1, d)
 *             return d2s(d)
 *         elif init == "+" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_init, __pyx_mstate_global->__pyx_kp_u__3, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 221, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ecco/lrr/lts.pyx":222
 *             return d2s(d)
 *         elif init == "+" :
 *             d = ddd.one()             # <<<<<<<<<<<<<<
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 1, 1, d)
*/
    __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_one, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 222, __pyx_L1_error)
    __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":223
 *         elif init == "+" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 1, 1, d)
 *             return d2s(d)
*/
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 223, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->vars; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 223, __pyx_L1_error)
    #endif
    --__pyx_t_5;
    for (;;) {
      if (__pyx_t_5 < 0) break;
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 223, __pyx_L1_error)
        #endif
        if (__pyx_t_5 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5));
      #else
      __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5);
      #endif
      --__pyx_t_5;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_3))) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":224
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 1, 1, d)             # <<<<<<<<<<<<<<
 *             return d2s(d)
 *         elif init == "-" :
*/
      __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = 0;
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_v, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_1, ((PyObject *)__pyx_v_d)};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_4, (5-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":223
 *         elif init == "+" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 1, 1, d)
 *             return d2s(d)
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":225
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 1, 1, d)
 *             return d2s(d)             # <<<<<<<<<<<<<<
 *         elif init == "-" :
 *             d = ddd.one()
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":221
 *                 d = ddd.from_range(v, 0, 1, d)
 *             return d2s(d)
 *         elif init == "+" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  }

  /* "ecco/lrr/lts.pyx":226
 *                 d = ddd.from_range(v, 1, 1, d)
 *             return d2s(d)
 *         elif init == "-" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_init, __pyx_mstate_global->__pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ecco/lrr/lts.pyx":227
 *             return d2s(d)
 *         elif init == "-" :
 *             d = ddd.one()             # <<<<<<<<<<<<<<
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 0, d)
*/
    __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_one, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 227, __pyx_L1_error)
    __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":228
 *         elif init == "-" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 0, 0, d)
 *             return d2s(d)
*/
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 228, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->vars; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 228, __pyx_L1_error)
    #endif
    --__pyx_t_5;
    for (;;) {
      if (__pyx_t_5 < 0) break;
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 228, __pyx_L1_error)
        #endif
        if (__pyx_t_5 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5));
      #else
      __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5);
      #endif
      --__pyx_t_5;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_3))) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":229
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 0, d)             # <<<<<<<<<<<<<<
 *             return d2s(d)
 *         else :
*/
      __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = 0;
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_v, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_0, ((PyObject *)__pyx_v_d)};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_4, (5-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":228
 *         elif init == "-" :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, 0, 0, d)
 *             return d2s(d)
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":230
 *             for v in reversed(self.vars) :
 *                 d = ddd.from_range(v, 0, 0, d)
 *             return d2s(d)             # <<<<<<<<<<<<<<
 *         else :
 *             # note that GAL has a unique initial state
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":226
 *                 d = ddd.from_range(v, 1, 1, d)
 *             return d2s(d)
 *         elif init == "-" :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  }

  /* "ecco/lrr/lts.pyx":234
 *             # note that GAL has a unique initial state
 *             # but init is set appropriately from ComponentGraph.from_model
 *             i = {v : (a, a) for v, a in next(s2d(self.gal.initial()).items()).items()}             # <<<<<<<<<<<<<<
 *             for s in init.split(",") :
 *                 if s == "" :
*/
  /*else*/ {
    { /* enter inner scope */
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = 0;
      __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_3its_model *)__pyx_v_self->gal->__pyx_vtab)->initial(__pyx_v_self->gal, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 234, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_10))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 234, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = __pyx_t_11;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_4 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_items, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __pyx_t_11 = __Pyx_PyIter_Next(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 234, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__pyx_t_11 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(0, 234, __pyx_L15_error)
      }
      __pyx_t_6 = __Pyx_dict_iterator(__pyx_t_11, 0, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L15_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_6;
      __pyx_t_6 = 0;
      while (1) {
        __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_7, &__pyx_t_5, &__pyx_t_6, &__pyx_t_11, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_12 == 0)) break;
        if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_11);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_6))) __PYX_ERR(0, 234, __pyx_L15_error)
        __pyx_t_12 = __Pyx_PyLong_As_int(__pyx_t_11); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_v, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;
        __pyx_7genexpr__pyx_v_a = __pyx_t_12;
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_7genexpr__pyx_v_a); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_7genexpr__pyx_v_a); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_11);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11) != (0)) __PYX_ERR(0, 234, __pyx_L15_error);
        __Pyx_GIVEREF(__pyx_t_6);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6) != (0)) __PYX_ERR(0, 234, __pyx_L15_error);
        __pyx_t_11 = 0;
        __pyx_t_6 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_7genexpr__pyx_v_v, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 234, __pyx_L15_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L18_exit_scope;
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L1_error;
      __pyx_L18_exit_scope:;
    } /* exit inner scope */
    __pyx_v_i = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":235
 *             # but init is set appropriately from ComponentGraph.from_model
 *             i = {v : (a, a) for v, a in next(s2d(self.gal.initial()).items()).items()}
 *             for s in init.split(",") :             # <<<<<<<<<<<<<<
 *                 if s == "" :
 *                     pass
*/
    if (unlikely(__pyx_v_init == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_Split(__pyx_v_init, __Pyx_NoneAsNull(__pyx_mstate_global->__pyx_kp_u__5), -1L); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 235, __pyx_L1_error)
        #endif
        if (__pyx_t_7 >= __pyx_temp) break;
      }
      __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_7);
      ++__pyx_t_7;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "ecco/lrr/lts.pyx":236
 *             i = {v : (a, a) for v, a in next(s2d(self.gal.initial()).items()).items()}
 *             for s in init.split(",") :
 *                 if s == "" :             # <<<<<<<<<<<<<<
 *                     pass
 *                 elif s == "*" :
*/
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u_, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 236, __pyx_L1_error)
      if (__pyx_t_1) {
        goto __pyx_L21;
      }

      /* "ecco/lrr/lts.pyx":238
 *                 if s == "" :
 *                     pass
 *                 elif s == "*" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (0,1)
*/
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__2, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 238, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ecco/lrr/lts.pyx":239
 *                     pass
 *                 elif s == "*" :
 *                     for v in i :             # <<<<<<<<<<<<<<
 *                         i[v] = (0,1)
 *                 elif s == "+" :
*/
        __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_i, 1, ((PyObject *)NULL), (&__pyx_t_13), (&__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_t_9;
        __pyx_t_9 = 0;
        while (1) {
          __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_13, &__pyx_t_5, &__pyx_t_9, NULL, NULL, __pyx_t_8);
          if (unlikely(__pyx_t_12 == 0)) break;
          if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 239, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_9))) __PYX_ERR(0, 239, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_9));
          __pyx_t_9 = 0;

          /* "ecco/lrr/lts.pyx":240
 *                 elif s == "*" :
 *                     for v in i :
 *                         i[v] = (0,1)             # <<<<<<<<<<<<<<
 *                 elif s == "+" :
 *                     for v in i :
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[0]) < 0))) __PYX_ERR(0, 240, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ecco/lrr/lts.pyx":238
 *                 if s == "" :
 *                     pass
 *                 elif s == "*" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (0,1)
*/
        goto __pyx_L21;
      }

      /* "ecco/lrr/lts.pyx":241
 *                     for v in i :
 *                         i[v] = (0,1)
 *                 elif s == "+" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (1,1)
*/
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__3, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 241, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ecco/lrr/lts.pyx":242
 *                         i[v] = (0,1)
 *                 elif s == "+" :
 *                     for v in i :             # <<<<<<<<<<<<<<
 *                         i[v] = (1,1)
 *                 elif s == "-" :
*/
        __pyx_t_13 = 0;
        __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_i, 1, ((PyObject *)NULL), (&__pyx_t_5), (&__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_t_9;
        __pyx_t_9 = 0;
        while (1) {
          __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_5, &__pyx_t_13, &__pyx_t_9, NULL, NULL, __pyx_t_8);
          if (unlikely(__pyx_t_12 == 0)) break;
          if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_9))) __PYX_ERR(0, 242, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_9));
          __pyx_t_9 = 0;

          /* "ecco/lrr/lts.pyx":243
 *                 elif s == "+" :
 *                     for v in i :
 *                         i[v] = (1,1)             # <<<<<<<<<<<<<<
 *                 elif s == "-" :
 *                     for v in i :
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[1]) < 0))) __PYX_ERR(0, 243, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ecco/lrr/lts.pyx":241
 *                     for v in i :
 *                         i[v] = (0,1)
 *                 elif s == "+" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (1,1)
*/
        goto __pyx_L21;
      }

      /* "ecco/lrr/lts.pyx":244
 *                     for v in i :
 *                         i[v] = (1,1)
 *                 elif s == "-" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (0,0)
*/
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__4, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 244, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ecco/lrr/lts.pyx":245
 *                         i[v] = (1,1)
 *                 elif s == "-" :
 *                     for v in i :             # <<<<<<<<<<<<<<
 *                         i[v] = (0,0)
 *                 else :
*/
        __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_i, 1, ((PyObject *)NULL), (&__pyx_t_13), (&__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_t_9;
        __pyx_t_9 = 0;
        while (1) {
          __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_13, &__pyx_t_5, &__pyx_t_9, NULL, NULL, __pyx_t_8);
          if (unlikely(__pyx_t_12 == 0)) break;
          if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_9))) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_9));
          __pyx_t_9 = 0;

          /* "ecco/lrr/lts.pyx":246
 *                 elif s == "-" :
 *                     for v in i :
 *                         i[v] = (0,0)             # <<<<<<<<<<<<<<
 *                 else :
 *                     v = s[:-1]
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[2]) < 0))) __PYX_ERR(0, 246, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "ecco/lrr/lts.pyx":244
 *                     for v in i :
 *                         i[v] = (1,1)
 *                 elif s == "-" :             # <<<<<<<<<<<<<<
 *                     for v in i :
 *                         i[v] = (0,0)
*/
        goto __pyx_L21;
      }

      /* "ecco/lrr/lts.pyx":248
 *                         i[v] = (0,0)
 *                 else :
 *                     v = s[:-1]             # <<<<<<<<<<<<<<
 *                     if v not in i :
 *                         raise ValueError(f"unknown variable {v!r}")
*/
      /*else*/ {
        if (unlikely(__pyx_v_s == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 248, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyUnicode_Substring(__pyx_v_s, 0, -1L); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "ecco/lrr/lts.pyx":249
 *                 else :
 *                     v = s[:-1]
 *                     if v not in i :             # <<<<<<<<<<<<<<
 *                         raise ValueError(f"unknown variable {v!r}")
 *                     if s.endswith("*") :
*/
        __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_v, __pyx_v_i, Py_NE)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 249, __pyx_L1_error)
        if (unlikely(__pyx_t_1)) {

          /* "ecco/lrr/lts.pyx":250
 *                     v = s[:-1]
 *                     if v not in i :
 *                         raise ValueError(f"unknown variable {v!r}")             # <<<<<<<<<<<<<<
 *                     if s.endswith("*") :
 *                         i[v] = (0, 1)
*/
          __pyx_t_9 = NULL;
          __Pyx_INCREF(__pyx_builtin_ValueError);
          __pyx_t_6 = __pyx_builtin_ValueError; 
          __pyx_t_11 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_v), __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 250, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_unknown_variable, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 250, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_4 = 1;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 250, __pyx_L1_error)

          /* "ecco/lrr/lts.pyx":249
 *                 else :
 *                     v = s[:-1]
 *                     if v not in i :             # <<<<<<<<<<<<<<
 *                         raise ValueError(f"unknown variable {v!r}")
 *                     if s.endswith("*") :
*/
        }

        /* "ecco/lrr/lts.pyx":251
 *                     if v not in i :
 *                         raise ValueError(f"unknown variable {v!r}")
 *                     if s.endswith("*") :             # <<<<<<<<<<<<<<
 *                         i[v] = (0, 1)
 *                     elif s.endswith("+") :
*/
        if (unlikely(__pyx_v_s == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
          __PYX_ERR(0, 251, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 251, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "ecco/lrr/lts.pyx":252
 *                         raise ValueError(f"unknown variable {v!r}")
 *                     if s.endswith("*") :
 *                         i[v] = (0, 1)             # <<<<<<<<<<<<<<
 *                     elif s.endswith("+") :
 *                         i[v] = (1, 1)
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[0]) < 0))) __PYX_ERR(0, 252, __pyx_L1_error)

          /* "ecco/lrr/lts.pyx":251
 *                     if v not in i :
 *                         raise ValueError(f"unknown variable {v!r}")
 *                     if s.endswith("*") :             # <<<<<<<<<<<<<<
 *                         i[v] = (0, 1)
 *                     elif s.endswith("+") :
*/
          goto __pyx_L29;
        }

        /* "ecco/lrr/lts.pyx":253
 *                     if s.endswith("*") :
 *                         i[v] = (0, 1)
 *                     elif s.endswith("+") :             # <<<<<<<<<<<<<<
 *                         i[v] = (1, 1)
 *                     elif s.endswith("-") :
*/
        if (unlikely(__pyx_v_s == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
          __PYX_ERR(0, 253, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__3, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 253, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "ecco/lrr/lts.pyx":254
 *                         i[v] = (0, 1)
 *                     elif s.endswith("+") :
 *                         i[v] = (1, 1)             # <<<<<<<<<<<<<<
 *                     elif s.endswith("-") :
 *                         i[v] = (0, 0)
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[1]) < 0))) __PYX_ERR(0, 254, __pyx_L1_error)

          /* "ecco/lrr/lts.pyx":253
 *                     if s.endswith("*") :
 *                         i[v] = (0, 1)
 *                     elif s.endswith("+") :             # <<<<<<<<<<<<<<
 *                         i[v] = (1, 1)
 *                     elif s.endswith("-") :
*/
          goto __pyx_L29;
        }

        /* "ecco/lrr/lts.pyx":255
 *                     elif s.endswith("+") :
 *                         i[v] = (1, 1)
 *                     elif s.endswith("-") :             # <<<<<<<<<<<<<<
 *                         i[v] = (0, 0)
 *                     else :
*/
        if (unlikely(__pyx_v_s == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
          __PYX_ERR(0, 255, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_s, __pyx_mstate_global->__pyx_kp_u__4, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 255, __pyx_L1_error)
        if (likely(__pyx_t_1)) {

          /* "ecco/lrr/lts.pyx":256
 *                         i[v] = (1, 1)
 *                     elif s.endswith("-") :
 *                         i[v] = (0, 0)             # <<<<<<<<<<<<<<
 *                     else :
 *                         raise ValueError(f"invalid initial state {v!r}")
*/
          if (unlikely((PyDict_SetItem(__pyx_v_i, __pyx_v_v, __pyx_mstate_global->__pyx_tuple[2]) < 0))) __PYX_ERR(0, 256, __pyx_L1_error)

          /* "ecco/lrr/lts.pyx":255
 *                     elif s.endswith("+") :
 *                         i[v] = (1, 1)
 *                     elif s.endswith("-") :             # <<<<<<<<<<<<<<
 *                         i[v] = (0, 0)
 *                     else :
*/
          goto __pyx_L29;
        }

        /* "ecco/lrr/lts.pyx":258
 *                         i[v] = (0, 0)
 *                     else :
 *                         raise ValueError(f"invalid initial state {v!r}")             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
        /*else*/ {
          __pyx_t_6 = NULL;
          __Pyx_INCREF(__pyx_builtin_ValueError);
          __pyx_t_10 = __pyx_builtin_ValueError; 
          __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_v), __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 258, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_invalid_initial_state, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 258, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_4 = 1;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_11};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 258, __pyx_L1_error)
        }
        __pyx_L29:;
      }
      __pyx_L21:;

      /* "ecco/lrr/lts.pyx":235
 *             # but init is set appropriately from ComponentGraph.from_model
 *             i = {v : (a, a) for v, a in next(s2d(self.gal.initial()).items()).items()}
 *             for s in init.split(",") :             # <<<<<<<<<<<<<<
 *                 if s == "" :
 *                     pass
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":259
 *                     else :
 *                         raise ValueError(f"invalid initial state {v!r}")
 *             d = ddd.one()             # <<<<<<<<<<<<<<
 *             for v in reversed(self.vars) :
 *                 a, b = i[v]
*/
    __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_one, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 259, __pyx_L1_error)
    __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":260
 *                         raise ValueError(f"invalid initial state {v!r}")
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 a, b = i[v]
 *                 d = ddd.from_range(v, a, b, d)
*/
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 260, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_v_self->vars; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 260, __pyx_L1_error)
    #endif
    --__pyx_t_7;
    for (;;) {
      if (__pyx_t_7 < 0) break;
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 260, __pyx_L1_error)
        #endif
        if (__pyx_t_7 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7));
      #else
      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7);
      #endif
      --__pyx_t_7;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "ecco/lrr/lts.pyx":261
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 a, b = i[v]             # <<<<<<<<<<<<<<
 *                 d = ddd.from_range(v, a, b, d)
 *             return d2s(d)
*/
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_i, __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 261, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0);
          __Pyx_INCREF(__pyx_t_10);
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1);
          __Pyx_INCREF(__pyx_t_11);
        } else {
          __pyx_t_10 = __Pyx_PyList_GetItemRef(sequence, 0);
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 261, __pyx_L1_error)
          __Pyx_XGOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyList_GetItemRef(sequence, 1);
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 261, __pyx_L1_error)
          __Pyx_XGOTREF(__pyx_t_11);
        }
        #else
        __pyx_t_10 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
        index = 0; __pyx_t_10 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_10)) goto __pyx_L33_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        index = 1; __pyx_t_11 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_11)) goto __pyx_L33_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_6), 2) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L34_unpacking_done;
        __pyx_L33_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 261, __pyx_L1_error)
        __pyx_L34_unpacking_done:;
      }
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_10); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = __Pyx_PyLong_As_int(__pyx_t_11); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_a = __pyx_t_8;
      __pyx_v_b = __pyx_t_12;

      /* "ecco/lrr/lts.pyx":262
 *             for v in reversed(self.vars) :
 *                 a, b = i[v]
 *                 d = ddd.from_range(v, a, b, d)             # <<<<<<<<<<<<<<
 *             return d2s(d)
 *     cdef void _build_reachable_states (LTS self) :
*/
      __pyx_t_11 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyLong_From_int(__pyx_v_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_v_b); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = 0;
      {
        PyObject *__pyx_callargs[5] = {__pyx_t_11, __pyx_v_v, __pyx_t_10, __pyx_t_6, ((PyObject *)__pyx_v_d)};
        __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_4, (5-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "ecco/lrr/lts.pyx":260
 *                         raise ValueError(f"invalid initial state {v!r}")
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 a, b = i[v]
 *                 d = ddd.from_range(v, a, b, d)
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":263
 *                 a, b = i[v]
 *                 d = ddd.from_range(v, a, b, d)
 *             return d2s(d)             # <<<<<<<<<<<<<<
 *     cdef void _build_reachable_states (LTS self) :
 *         # build the set of reachable states
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "ecco/lrr/lts.pyx":209
 *             t = self.constraints.lfp()
 *             self.init = t(self.init)
 *     cdef sdd _build_initial_states_one (LTS self, str init) :             # <<<<<<<<<<<<<<
 *         cdef ddd d
 *         cdef str v, s
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_initial_states_one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":264
 *                 d = ddd.from_range(v, a, b, d)
 *             return d2s(d)
 *     cdef void _build_reachable_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of reachable states
 *         cdef sdd reach
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_reachable_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_reach = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_succ = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_pred_u = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_reachable_states", 0);

  /* "ecco/lrr/lts.pyx":268
 *         cdef sdd reach
 *         cdef shom succ, pred_u
 *         reach = self.init             # <<<<<<<<<<<<<<
 *         self.states = sdd.empty()
 *         succ = self.succ | shom.ident()
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->init);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_reach = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":269
 *         cdef shom succ, pred_u
 *         reach = self.init
 *         self.states = sdd.empty()             # <<<<<<<<<<<<<<
 *         succ = self.succ | shom.ident()
 *         while True :
*/
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
  __Pyx_DECREF((PyObject *)__pyx_v_self->states);
  __pyx_v_self->states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":270
 *         reach = self.init
 *         self.states = sdd.empty()
 *         succ = self.succ | shom.ident()             # <<<<<<<<<<<<<<
 *         while True :
 *             reach = succ(reach)
*/
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_shom);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_ident, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_2 = PyNumber_Or(((PyObject *)__pyx_v_self->succ), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_v_succ = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":271
 *         self.states = sdd.empty()
 *         succ = self.succ | shom.ident()
 *         while True :             # <<<<<<<<<<<<<<
 *             reach = succ(reach)
 *             if reach == self.states :
*/
  while (1) {

    /* "ecco/lrr/lts.pyx":272
 *         succ = self.succ | shom.ident()
 *         while True :
 *             reach = succ(reach)             # <<<<<<<<<<<<<<
 *             if reach == self.states :
 *                 break
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_succ);
    __pyx_t_4 = ((PyObject *)__pyx_v_succ); 
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_1);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_reach)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_reach, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":273
 *         while True :
 *             reach = succ(reach)
 *             if reach == self.states :             # <<<<<<<<<<<<<<
 *                 break
 *             self.states = reach
*/
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_reach), ((PyObject *)__pyx_v_self->states), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "ecco/lrr/lts.pyx":274
 *             reach = succ(reach)
 *             if reach == self.states :
 *                 break             # <<<<<<<<<<<<<<
 *             self.states = reach
 *         pred_u = self.constraints.invert(self.states)
*/
      goto __pyx_L4_break;

      /* "ecco/lrr/lts.pyx":273
 *         while True :
 *             reach = succ(reach)
 *             if reach == self.states :             # <<<<<<<<<<<<<<
 *                 break
 *             self.states = reach
*/
    }

    /* "ecco/lrr/lts.pyx":275
 *             if reach == self.states :
 *                 break
 *             self.states = reach             # <<<<<<<<<<<<<<
 *         pred_u = self.constraints.invert(self.states)
 *         self.transient = pred_u(self.states)
*/
    __Pyx_INCREF((PyObject *)__pyx_v_reach);
    __Pyx_GIVEREF((PyObject *)__pyx_v_reach);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
    __Pyx_DECREF((PyObject *)__pyx_v_self->states);
    __pyx_v_self->states = __pyx_v_reach;
  }
  __pyx_L4_break:;

  /* "ecco/lrr/lts.pyx":276
 *                 break
 *             self.states = reach
 *         pred_u = self.constraints.invert(self.states)             # <<<<<<<<<<<<<<
 *         self.transient = pred_u(self.states)
 *     cdef void _build_compact (LTS self) :
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->constraints->__pyx_vtab)->invert(__pyx_v_self->constraints, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2), 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pred_u = ((struct __pyx_obj_3ddd_shom *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":277
 *             self.states = reach
 *         pred_u = self.constraints.invert(self.states)
 *         self.transient = pred_u(self.states)             # <<<<<<<<<<<<<<
 *     cdef void _build_compact (LTS self) :
 *         # remove transient states from sdd and shom
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_pred_u);
  __pyx_t_1 = ((PyObject *)__pyx_v_pred_u); 
  __pyx_t_3 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);
    __pyx_t_3 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self->states)};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->transient);
  __Pyx_DECREF((PyObject *)__pyx_v_self->transient);
  __pyx_v_self->transient = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":264
 *                 d = ddd.from_range(v, a, b, d)
 *             return d2s(d)
 *     cdef void _build_reachable_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of reachable states
 *         cdef sdd reach
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_reachable_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reach);
  __Pyx_XDECREF((PyObject *)__pyx_v_succ);
  __Pyx_XDECREF((PyObject *)__pyx_v_pred_u);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":278
 *         pred_u = self.constraints.invert(self.states)
 *         self.transient = pred_u(self.states)
 *     cdef void _build_compact (LTS self) :             # <<<<<<<<<<<<<<
 *         # remove transient states from sdd and shom
 *         cdef shom h
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_compact(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  struct __pyx_obj_3ddd_shom *__pyx_v_h = 0;
  PyObject *__pyx_v_t = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_compact", 0);

  /* "ecco/lrr/lts.pyx":282
 *         cdef shom h
 *         cdef str t
 *         self.states -= self.transient             # <<<<<<<<<<<<<<
 *         self.init -= self.transient
 *         # WARNING: `succ - transient` won't work, only `succ & states` does
*/
  __pyx_t_1 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_self->states), ((PyObject *)__pyx_v_self->transient)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
  __Pyx_DECREF((PyObject *)__pyx_v_self->states);
  __pyx_v_self->states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":283
 *         cdef str t
 *         self.states -= self.transient
 *         self.init -= self.transient             # <<<<<<<<<<<<<<
 *         # WARNING: `succ - transient` won't work, only `succ & states` does
 *         self.succ &= self.states
*/
  __pyx_t_1 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_self->init), ((PyObject *)__pyx_v_self->transient)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->init);
  __Pyx_DECREF((PyObject *)__pyx_v_self->init);
  __pyx_v_self->init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":285
 *         self.init -= self.transient
 *         # WARNING: `succ - transient` won't work, only `succ & states` does
 *         self.succ &= self.states             # <<<<<<<<<<<<<<
 *         for t, h in self.tsucc.items() :
 *             self.tsucc[t] = h & self.states
*/
  __pyx_t_1 = PyNumber_InPlaceAnd(((PyObject *)__pyx_v_self->succ), ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->succ);
  __Pyx_DECREF((PyObject *)__pyx_v_self->succ);
  __pyx_v_self->succ = ((struct __pyx_obj_3ddd_shom *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":286
 *         # WARNING: `succ - transient` won't work, only `succ & states` does
 *         self.succ &= self.states
 *         for t, h in self.tsucc.items() :             # <<<<<<<<<<<<<<
 *             self.tsucc[t] = h & self.states
 *     cdef void _build_pred (LTS self) :
*/
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->tsucc == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 286, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->tsucc, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 286, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_3ddd_shom *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":287
 *         self.succ &= self.states
 *         for t, h in self.tsucc.items() :
 *             self.tsucc[t] = h & self.states             # <<<<<<<<<<<<<<
 *     cdef void _build_pred (LTS self) :
 *         # build the predecessor relations
*/
    __pyx_t_6 = PyNumber_And(((PyObject *)__pyx_v_h), ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v_self->tsucc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 287, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->tsucc, __pyx_v_t, __pyx_t_6) < 0))) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":278
 *         pred_u = self.constraints.invert(self.states)
 *         self.transient = pred_u(self.states)
 *     cdef void _build_compact (LTS self) :             # <<<<<<<<<<<<<<
 *         # remove transient states from sdd and shom
 *         cdef shom h
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_compact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":288
 *         for t, h in self.tsucc.items() :
 *             self.tsucc[t] = h & self.states
 *     cdef void _build_pred (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the predecessor relations
 *         cdef str t
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_pred(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_v_t = 0;
  struct __pyx_obj_3ddd_shom *__pyx_v_h = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_pred", 0);

  /* "ecco/lrr/lts.pyx":292
 *         cdef str t
 *         cdef shom h
 *         self.pred = self.succ.invert(self.states)             # <<<<<<<<<<<<<<
 *         self.pred_o = self.pred.gfp()
 *         self.pred_s = self.pred.lfp()
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->succ->__pyx_vtab)->invert(__pyx_v_self->succ, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->pred);
  __Pyx_DECREF((PyObject *)__pyx_v_self->pred);
  __pyx_v_self->pred = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":293
 *         cdef shom h
 *         self.pred = self.succ.invert(self.states)
 *         self.pred_o = self.pred.gfp()             # <<<<<<<<<<<<<<
 *         self.pred_s = self.pred.lfp()
 *         for t, h in self.tsucc.items() :
*/
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->pred->__pyx_vtab)->gfp(__pyx_v_self->pred, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->pred_o);
  __Pyx_DECREF((PyObject *)__pyx_v_self->pred_o);
  __pyx_v_self->pred_o = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":294
 *         self.pred = self.succ.invert(self.states)
 *         self.pred_o = self.pred.gfp()
 *         self.pred_s = self.pred.lfp()             # <<<<<<<<<<<<<<
 *         for t, h in self.tsucc.items() :
 *             self.tpred[t] = h.invert(self.states)
*/
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_self->pred->__pyx_vtab)->lfp(__pyx_v_self->pred, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->pred_s);
  __Pyx_DECREF((PyObject *)__pyx_v_self->pred_s);
  __pyx_v_self->pred_s = ((struct __pyx_obj_3ddd_shom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":295
 *         self.pred_o = self.pred.gfp()
 *         self.pred_s = self.pred.lfp()
 *         for t, h in self.tsucc.items() :             # <<<<<<<<<<<<<<
 *             self.tpred[t] = h.invert(self.states)
 *     cdef void _build_dead_states (LTS self) :
*/
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_self->tsucc == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 295, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_self->tsucc, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_1, &__pyx_t_6, NULL, __pyx_t_5);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_1))) __PYX_ERR(0, 295, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, ((struct __pyx_obj_3ddd_shom *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":296
 *         self.pred_s = self.pred.lfp()
 *         for t, h in self.tsucc.items() :
 *             self.tpred[t] = h.invert(self.states)             # <<<<<<<<<<<<<<
 *     cdef void _build_dead_states (LTS self) :
 *         # build the set of dead states
*/
    __pyx_t_6 = ((PyObject *)__pyx_v_self->states);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_shom *)__pyx_v_h->__pyx_vtab)->invert(__pyx_v_h, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_6), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->tpred == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 296, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->tpred, __pyx_v_t, __pyx_t_1) < 0))) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":288
 *         for t, h in self.tsucc.items() :
 *             self.tsucc[t] = h & self.states
 *     cdef void _build_pred (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the predecessor relations
 *         cdef str t
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_pred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":297
 *         for t, h in self.tsucc.items() :
 *             self.tpred[t] = h.invert(self.states)
 *     cdef void _build_dead_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of dead states
 *         self.dead = self.states - self.pred(self.states)
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_dead_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_dead_states", 0);

  /* "ecco/lrr/lts.pyx":299
 *     cdef void _build_dead_states (LTS self) :
 *         # build the set of dead states
 *         self.dead = self.states - self.pred(self.states)             # <<<<<<<<<<<<<<
 *     cdef void _build_hull_states (LTS self) :
 *         # build the set of SCC hull states
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->pred); 
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self->states)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_3 = PyNumber_Subtract(((PyObject *)__pyx_v_self->states), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->dead);
  __Pyx_DECREF((PyObject *)__pyx_v_self->dead);
  __pyx_v_self->dead = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ecco/lrr/lts.pyx":297
 *         for t, h in self.tsucc.items() :
 *             self.tpred[t] = h.invert(self.states)
 *     cdef void _build_dead_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of dead states
 *         self.dead = self.states - self.pred(self.states)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_dead_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":300
 *         # build the set of dead states
 *         self.dead = self.states - self.pred(self.states)
 *     cdef void _build_hull_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of SCC hull states
 *         # intersect with self.states to remove potential transient states
*/

static void __pyx_f_4ecco_3lrr_3lts_3LTS__build_hull_states(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_hull_states", 0);

  /* "ecco/lrr/lts.pyx":303
 *         # build the set of SCC hull states
 *         # intersect with self.states to remove potential transient states
 *         self.hull = (self.pred_o(self.states) & self.succ_o(self.states)) & self.states             # <<<<<<<<<<<<<<
 *     cpdef dict graph_props (LTS self, sdd states) :
 *         cdef dict cp = {}
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred_o);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->pred_o); 
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self->states)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ_o);
  __pyx_t_5 = ((PyObject *)__pyx_v_self->succ_o); 
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self->states)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_And(__pyx_t_5, ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->hull);
  __Pyx_DECREF((PyObject *)__pyx_v_self->hull);
  __pyx_v_self->hull = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ecco/lrr/lts.pyx":300
 *         # build the set of dead states
 *         self.dead = self.states - self.pred(self.states)
 *     cdef void _build_hull_states (LTS self) :             # <<<<<<<<<<<<<<
 *         # build the set of SCC hull states
 *         # intersect with self.states to remove potential transient states
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._build_hull_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":304
 *         # intersect with self.states to remove potential transient states
 *         self.hull = (self.pred_o(self.states) & self.succ_o(self.states)) & self.states
 *     cpdef dict graph_props (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_19graph_props(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_graph_props(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_cp = 0;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_method = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("graph_props", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_graph_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_19graph_props)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 304, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":305
 *         self.hull = (self.pred_o(self.states) & self.succ_o(self.states)) & self.states
 *     cpdef dict graph_props (LTS self, sdd states) :
 *         cdef dict cp = {}             # <<<<<<<<<<<<<<
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
 *             if (name.startswith("is_")
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":306
 *     cpdef dict graph_props (LTS self, sdd states) :
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :             # <<<<<<<<<<<<<<
 *             if (name.startswith("is_")
 *                 or name.startswith("isin_")
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_inspect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_getmembers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_callable); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((PyList_Sort(__pyx_t_3) < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
      #endif
      if (__pyx_t_6 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_6);
    ++__pyx_t_6;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 306, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_2);
      } else {
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_2);
      }
      #else
      __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 306, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_method, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":307
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
 *             if (name.startswith("is_")             # <<<<<<<<<<<<<<
 *                 or name.startswith("isin_")
 *                 or name.startswith("has_")) :
*/
    __pyx_t_2 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_startswith, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }

    /* "ecco/lrr/lts.pyx":308
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
 *             if (name.startswith("is_")
 *                 or name.startswith("isin_")             # <<<<<<<<<<<<<<
 *                 or name.startswith("has_")) :
 *                 cp[name] = method(states)
*/
    __pyx_t_2 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_isin};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_startswith, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }

    /* "ecco/lrr/lts.pyx":309
 *             if (name.startswith("is_")
 *                 or name.startswith("isin_")
 *                 or name.startswith("has_")) :             # <<<<<<<<<<<<<<
 *                 cp[name] = method(states)
 *         return cp
*/
    __pyx_t_2 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_has};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_startswith, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;

    /* "ecco/lrr/lts.pyx":307
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
 *             if (name.startswith("is_")             # <<<<<<<<<<<<<<
 *                 or name.startswith("isin_")
 *                 or name.startswith("has_")) :
*/
    if (__pyx_t_9) {

      /* "ecco/lrr/lts.pyx":310
 *                 or name.startswith("isin_")
 *                 or name.startswith("has_")) :
 *                 cp[name] = method(states)             # <<<<<<<<<<<<<<
 *         return cp
 *     cpdef bint is_dead (LTS self, sdd states) :
*/
      __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_method);
      __pyx_t_4 = __pyx_v_method; 
      __pyx_t_5 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        assert(__pyx_t_2);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
        __pyx_t_5 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_states)};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (unlikely((PyDict_SetItem(__pyx_v_cp, __pyx_v_name, __pyx_t_3) < 0))) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":307
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
 *             if (name.startswith("is_")             # <<<<<<<<<<<<<<
 *                 or name.startswith("isin_")
 *                 or name.startswith("has_")) :
*/
    }

    /* "ecco/lrr/lts.pyx":306
 *     cpdef dict graph_props (LTS self, sdd states) :
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :             # <<<<<<<<<<<<<<
 *             if (name.startswith("is_")
 *                 or name.startswith("isin_")
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":311
 *                 or name.startswith("has_")) :
 *                 cp[name] = method(states)
 *         return cp             # <<<<<<<<<<<<<<
 *     cpdef bint is_dead (LTS self, sdd states) :
 *         """check whether `states` is the set of all deadlocks
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cp);
  __pyx_r = __pyx_v_cp;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":304
 *         # intersect with self.states to remove potential transient states
 *         self.hull = (self.pred_o(self.states) & self.succ_o(self.states)) & self.states
 *     cpdef dict graph_props (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.graph_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cp);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_method);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_19graph_props(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_19graph_props = {"graph_props", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_19graph_props, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_19graph_props(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("graph_props (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 304, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "graph_props", 0) < 0) __PYX_ERR(0, 304, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("graph_props", 1, 1, 1, i); __PYX_ERR(0, 304, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 304, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("graph_props", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.graph_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_18graph_props(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_18graph_props(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("graph_props", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_graph_props(__pyx_v_self, __pyx_v_states, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.graph_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":312
 *                 cp[name] = method(states)
 *         return cp
 *     cpdef bint is_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all deadlocks
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_21is_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_dead", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_is_dead); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_21is_dead)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":319
 *         Returns: `True` if `states` is the set of all deadlocks, `False` otherwise
 *         """
 *         return states == self.dead             # <<<<<<<<<<<<<<
 *     cpdef bint isin_dead (LTS self, sdd states) :
 *         """check whether `states` contains only but not all deadlocks
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->dead), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":312
 *                 cp[name] = method(states)
 *         return cp
 *     cpdef bint is_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all deadlocks
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_21is_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_20is_dead, "check whether `states` is the set of all deadlocks\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` is the set of all deadlocks, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_21is_dead = {"is_dead", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_21is_dead, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_20is_dead};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_21is_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_dead (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 312, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 312, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_dead", 0) < 0) __PYX_ERR(0, 312, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_dead", 1, 1, 1, i); __PYX_ERR(0, 312, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 312, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_dead", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 312, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_20is_dead(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_20is_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_dead", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_is_dead(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":320
 *         """
 *         return states == self.dead
 *     cpdef bint isin_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all deadlocks
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_23isin_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_isin_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isin_dead", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_isin_dead); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_23isin_dead)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":327
 *         Returns: `True` if `states` contains onlydeadlocks, `False` otherwise
 *         """
 *         return states < self.dead             # <<<<<<<<<<<<<<
 *     cpdef bint has_dead (LTS self, sdd states) :
 *         """check whether `states` contains deadlock
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->dead), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":320
 *         """
 *         return states == self.dead
 *     cpdef bint isin_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all deadlocks
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_23isin_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_22isin_dead, "check whether `states` contains only but not all deadlocks\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` contains onlydeadlocks, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_23isin_dead = {"isin_dead", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_23isin_dead, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_22isin_dead};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_23isin_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isin_dead (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 320, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 320, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "isin_dead", 0) < 0) __PYX_ERR(0, 320, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("isin_dead", 1, 1, 1, i); __PYX_ERR(0, 320, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 320, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isin_dead", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 320, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_22isin_dead(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_22isin_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isin_dead", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_isin_dead(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":328
 *         """
 *         return states < self.dead
 *     cpdef bint has_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains deadlock
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_25has_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_has_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_dead", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_has_dead); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_25has_dead)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":335
 *         Returns: `True` if `states` contains deadlock, `False` otherwise
 *         """
 *         return bool(states & self.dead)             # <<<<<<<<<<<<<<
 *     cpdef bint is_init (LTS self, sdd states) :
 *         """check whether `states` is the set of all initial states
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->dead)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = (!(!__pyx_t_6));
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":328
 *         """
 *         return states < self.dead
 *     cpdef bint has_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains deadlock
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_25has_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_24has_dead, "check whether `states` contains deadlock\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` contains deadlock, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_25has_dead = {"has_dead", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_25has_dead, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_24has_dead};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_25has_dead(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_dead (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 328, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 328, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "has_dead", 0) < 0) __PYX_ERR(0, 328, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("has_dead", 1, 1, 1, i); __PYX_ERR(0, 328, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 328, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_dead", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 328, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_24has_dead(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_24has_dead(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_dead", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_has_dead(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_dead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":336
 *         """
 *         return bool(states & self.dead)
 *     cpdef bint is_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all initial states
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_27is_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_init", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_is_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_27is_init)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":343
 *         Returns: `True` if `states` the set of all initial states, `False` otherwise
 *         """
 *         return states == self.init             # <<<<<<<<<<<<<<
 *     cpdef bint isin_init (LTS self, sdd states) :
 *         """check whether `states` contains only but not all initial states
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->init), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":336
 *         """
 *         return bool(states & self.dead)
 *     cpdef bint is_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all initial states
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_27is_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_26is_init, "check whether `states` is the set of all initial states\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` the set of all initial states, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_27is_init = {"is_init", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_27is_init, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_26is_init};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_27is_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_init (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 336, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 336, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_init", 0) < 0) __PYX_ERR(0, 336, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_init", 1, 1, 1, i); __PYX_ERR(0, 336, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 336, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_init", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_26is_init(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_26is_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_init", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_is_init(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":344
 *         """
 *         return states == self.init
 *     cpdef bint isin_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all initial states
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_29isin_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_isin_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isin_init", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_isin_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_29isin_init)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":351
 *         Returns: `True` if `states` contains only initial states, `False` otherwise
 *         """
 *         return states < self.init             # <<<<<<<<<<<<<<
 *     cpdef bint has_init (LTS self, sdd states) :
 *         """check whether `states` contains initial state
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->init), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":344
 *         """
 *         return states == self.init
 *     cpdef bint isin_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all initial states
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_29isin_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_28isin_init, "check whether `states` contains only but not all initial states\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` contains only initial states, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_29isin_init = {"isin_init", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_29isin_init, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_28isin_init};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_29isin_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isin_init (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 344, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 344, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "isin_init", 0) < 0) __PYX_ERR(0, 344, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("isin_init", 1, 1, 1, i); __PYX_ERR(0, 344, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 344, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isin_init", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 344, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_28isin_init(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_28isin_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isin_init", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_isin_init(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.isin_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":352
 *         """
 *         return states < self.init
 *     cpdef bint has_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains initial state
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_31has_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_has_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_init", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_has_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_31has_init)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":359
 *         Returns: `True` if `states` contains initial state, `False` otherwise
 *         """
 *         return bool(states & self.init)             # <<<<<<<<<<<<<<
 *     cpdef bint is_hull (LTS self, sdd states) :
 *         """check whether `states` is a SCC hull (not necessarily the largest one)
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->init)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = (!(!__pyx_t_6));
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":352
 *         """
 *         return states < self.init
 *     cpdef bint has_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains initial state
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_31has_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_30has_init, "check whether `states` contains initial state\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` contains initial state, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_31has_init = {"has_init", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_31has_init, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_30has_init};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_31has_init(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_init (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 352, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 352, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "has_init", 0) < 0) __PYX_ERR(0, 352, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("has_init", 1, 1, 1, i); __PYX_ERR(0, 352, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 352, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("has_init", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 352, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_30has_init(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_30has_init(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_init", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_has_init(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.has_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":360
 *         """
 *         return bool(states & self.init)
 *     cpdef bint is_hull (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC hull (not necessarily the largest one)
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_33is_hull(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_hull(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_s = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_hull", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_is_hull); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_33is_hull)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":367
 *         Returns: `True` if `states` is a SCC hull, `False` otherwise
 *         """
 *         cdef sdd s = states & self.states             # <<<<<<<<<<<<<<
 *         return (self.succ_o(s) & self.pred_o(s)) == s
 *     cpdef bint is_scc (LTS self, sdd states) :
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 367, __pyx_L1_error)
  __pyx_v_s = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":368
 *         """
 *         cdef sdd s = states & self.states
 *         return (self.succ_o(s) & self.pred_o(s)) == s             # <<<<<<<<<<<<<<
 *     cpdef bint is_scc (LTS self, sdd states) :
 *         """check whether `states` is a SCC
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ_o);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->succ_o); 
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_s)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred_o);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->pred_o); 
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_s)};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_v_s), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":360
 *         """
 *         return bool(states & self.init)
 *     cpdef bint is_hull (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC hull (not necessarily the largest one)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_hull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_33is_hull(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_32is_hull, "check whether `states` is a SCC hull (not necessarily the largest one)\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` is a SCC hull, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_33is_hull = {"is_hull", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_33is_hull, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_32is_hull};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_33is_hull(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_hull (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 360, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 360, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_hull", 0) < 0) __PYX_ERR(0, 360, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_hull", 1, 1, 1, i); __PYX_ERR(0, 360, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 360, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_hull", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 360, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_hull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_32is_hull(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_32is_hull(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_hull", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_is_hull(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_hull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":369
 *         cdef sdd s = states & self.states
 *         return (self.succ_o(s) & self.pred_o(s)) == s
 *     cpdef bint is_scc (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_35is_scc(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_4ecco_3lrr_3lts_3LTS_is_scc(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_i = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_s = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_scc", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_is_scc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_35is_scc)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_states)};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":376
 *         Returns: `True` if `states` is a SCC, `False` otherwise
 *         """
 *         cdef sdd i = states & self.states             # <<<<<<<<<<<<<<
 *         cdef sdd s
 *         if len(i) <= 1 :
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_i = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":378
 *         cdef sdd i = states & self.states
 *         cdef sdd s
 *         if len(i) <= 1 :             # <<<<<<<<<<<<<<
 *             return False
 *         s = i.pick()
*/
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_i)); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_7 <= 1);
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":379
 *         cdef sdd s
 *         if len(i) <= 1 :
 *             return False             # <<<<<<<<<<<<<<
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
*/
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":378
 *         cdef sdd i = states & self.states
 *         cdef sdd s
 *         if len(i) <= 1 :             # <<<<<<<<<<<<<<
 *             return False
 *         s = i.pick()
*/
  }

  /* "ecco/lrr/lts.pyx":380
 *         if len(i) <= 1 :
 *             return False
 *         s = i.pick()             # <<<<<<<<<<<<<<
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :
*/
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3ddd_sdd *)__pyx_v_i->__pyx_base.__pyx_vtab)->pick(__pyx_v_i, 0, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":381
 *             return False
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i             # <<<<<<<<<<<<<<
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :
 *         """adds a property to the LTS
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ_s);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->succ_s); 
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_s)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred_s);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->pred_s); 
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_s)};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_3 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_v_i), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":369
 *         cdef sdd s = states & self.states
 *         return (self.succ_o(s) & self.pred_o(s)) == s
 *     cpdef bint is_scc (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_scc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_35is_scc(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_34is_scc, "check whether `states` is a SCC\n\n        Parameters:\n         - `states` (`ddd.sdd`): set of states to be checked\n        Returns: `True` if `states` is a SCC, `False` otherwise\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_35is_scc = {"is_scc", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_35is_scc, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_34is_scc};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_35is_scc(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_scc (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 369, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 369, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_scc", 0) < 0) __PYX_ERR(0, 369, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_scc", 1, 1, 1, i); __PYX_ERR(0, 369, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 369, __pyx_L3_error)
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_scc", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 369, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_scc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_34is_scc(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_34is_scc(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_scc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_3LTS_is_scc(__pyx_v_self, __pyx_v_states, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.is_scc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":382
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :             # <<<<<<<<<<<<<<
 *         """adds a property to the LTS
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_37add_prop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS_add_prop(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop *__pyx_optional_args) {
  int __pyx_v_union = ((int)0);
  PyObject *__pyx_v_alias = ((PyObject*)__pyx_mstate_global->__pyx_kp_u_);
  struct __pyx_obj_3ddd_sdd *__pyx_v_s = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_prop", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_union = __pyx_optional_args->__pyx_union;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_alias = __pyx_optional_args->alias;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_add_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_37add_prop)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_union); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_6 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_3, __pyx_v_prop, ((PyObject *)__pyx_v_states), __pyx_t_5, __pyx_v_alias};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (5-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 382, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":392
 *         Returns: `states` restricted to the states actually in the LTS
 *         """
 *         cdef sdd s = states & self.states             # <<<<<<<<<<<<<<
 *         if alias :
 *             self.alias[prop] = alias
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_self->states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_v_s = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":393
 *         """
 *         cdef sdd s = states & self.states
 *         if alias :             # <<<<<<<<<<<<<<
 *             self.alias[prop] = alias
 *         if union and (prop in self.props) :
*/
  if (__pyx_v_alias == Py_None) __pyx_t_7 = 0;
  else
  {
    Py_ssize_t __pyx_temp = __Pyx_PyUnicode_IS_TRUE(__pyx_v_alias);
    if (unlikely(((!CYTHON_ASSUME_SAFE_SIZE) && __pyx_temp < 0))) __PYX_ERR(0, 393, __pyx_L1_error)
    __pyx_t_7 = (__pyx_temp != 0);
  }

  if (__pyx_t_7) {

    /* "ecco/lrr/lts.pyx":394
 *         cdef sdd s = states & self.states
 *         if alias :
 *             self.alias[prop] = alias             # <<<<<<<<<<<<<<
 *         if union and (prop in self.props) :
 *             self.props[prop] |= s
*/
    if (unlikely(__pyx_v_self->alias == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 394, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->alias, __pyx_v_prop, __pyx_v_alias) < 0))) __PYX_ERR(0, 394, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":393
 *         """
 *         cdef sdd s = states & self.states
 *         if alias :             # <<<<<<<<<<<<<<
 *             self.alias[prop] = alias
 *         if union and (prop in self.props) :
*/
  }

  /* "ecco/lrr/lts.pyx":395
 *         if alias :
 *             self.alias[prop] = alias
 *         if union and (prop in self.props) :             # <<<<<<<<<<<<<<
 *             self.props[prop] |= s
 *             return self.props[prop]
*/
  if (__pyx_v_union) {
  } else {
    __pyx_t_7 = __pyx_v_union;
    goto __pyx_L5_bool_binop_done;
  }
  if (unlikely(__pyx_v_self->props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __pyx_t_8 = (__Pyx_PyDict_ContainsTF(__pyx_v_prop, __pyx_v_self->props, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_8;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_7) {

    /* "ecco/lrr/lts.pyx":396
 *             self.alias[prop] = alias
 *         if union and (prop in self.props) :
 *             self.props[prop] |= s             # <<<<<<<<<<<<<<
 *             return self.props[prop]
 *         else :
*/
    if (unlikely(__pyx_v_self->props == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 396, __pyx_L1_error)
    }
    __Pyx_INCREF(__pyx_v_self->props);
    __pyx_t_9 = __pyx_v_self->props;
    __Pyx_INCREF(__pyx_v_prop);
    __pyx_t_10 = __pyx_v_prop;
    if (unlikely(__pyx_t_9 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 396, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_InPlaceOr(__pyx_t_1, ((PyObject *)__pyx_v_s)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_9 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 396, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_t_9, __pyx_t_10, __pyx_t_2) < 0))) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ecco/lrr/lts.pyx":397
 *         if union and (prop in self.props) :
 *             self.props[prop] |= s
 *             return self.props[prop]             # <<<<<<<<<<<<<<
 *         else :
 *             self.props[prop] = s
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    if (unlikely(__pyx_v_self->props == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 397, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->props, __pyx_v_prop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 397, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":395
 *         if alias :
 *             self.alias[prop] = alias
 *         if union and (prop in self.props) :             # <<<<<<<<<<<<<<
 *             self.props[prop] |= s
 *             return self.props[prop]
*/
  }

  /* "ecco/lrr/lts.pyx":399
 *             return self.props[prop]
 *         else :
 *             self.props[prop] = s             # <<<<<<<<<<<<<<
 *             return s
 *     cpdef sdd var2sdd (LTS self, str name) :
*/
  /*else*/ {
    if (unlikely(__pyx_v_self->props == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 399, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->props, __pyx_v_prop, ((PyObject *)__pyx_v_s)) < 0))) __PYX_ERR(0, 399, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":400
 *         else :
 *             self.props[prop] = s
 *             return s             # <<<<<<<<<<<<<<
 *     cpdef sdd var2sdd (LTS self, str name) :
 *         cdef str v
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;
  }

  /* "ecco/lrr/lts.pyx":382
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :             # <<<<<<<<<<<<<<
 *         """adds a property to the LTS
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.add_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_37add_prop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_36add_prop, "adds a property to the LTS\n\n        Parameters:\n         - `prop` (`str`): the textual property\n         - `states` (`ddd.sdd`): the corresponding set of states in the LTS\n         - `union` (`bool=False`): if the property exists and `union=True`,\n           then `states` is added to it, otherwise, `states` is replaced\n        Returns: `states` restricted to the states actually in the LTS\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_37add_prop = {"add_prop", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_37add_prop, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_36add_prop};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_37add_prop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prop = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  int __pyx_v_union;
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_prop (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_prop,&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_union,&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 382, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add_prop", 0) < 0) __PYX_ERR(0, 382, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add_prop", 0, 2, 4, i); __PYX_ERR(0, 382, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 382, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 382, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 382, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
    }
    __pyx_v_prop = ((PyObject*)values[0]);
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[1]);
    if (values[2]) {
      __pyx_v_union = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_union == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    } else {
      __pyx_v_union = ((int)0);
    }
    __pyx_v_alias = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_prop", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 382, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.add_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prop), (&PyUnicode_Type), 1, "prop", 1))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_36add_prop(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_prop, __pyx_v_states, __pyx_v_union, __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_36add_prop(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_v_union, PyObject *__pyx_v_alias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_prop", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.__pyx_union = __pyx_v_union;
  __pyx_t_2.alias = __pyx_v_alias;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_4ecco_3lrr_3lts_LTS->add_prop(__pyx_v_self, __pyx_v_prop, __pyx_v_states, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.add_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":401
 *             self.props[prop] = s
 *             return s
 *     cpdef sdd var2sdd (LTS self, str name) :             # <<<<<<<<<<<<<<
 *         cdef str v
 *         cdef ddd d
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_39var2sdd(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_3ddd_sdd *__pyx_f_4ecco_3lrr_3lts_3LTS_var2sdd(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_v = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_d = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("var2sdd", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_var2sdd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_39var2sdd)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_name};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 401, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":404
 *         cdef str v
 *         cdef ddd d
 *         if name not in self._var2sdd :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  if (unlikely(__pyx_v_self->_var2sdd == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 404, __pyx_L1_error)
  }
  __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_v_name, __pyx_v_self->_var2sdd, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 404, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":405
 *         cdef ddd d
 *         if name not in self._var2sdd :
 *             d = ddd.one()             # <<<<<<<<<<<<<<
 *             for v in reversed(self.vars) :
 *                 if v == name :
*/
    __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_one, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 405, __pyx_L1_error)
    __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":406
 *         if name not in self._var2sdd :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 if v == name :
 *                     d = ddd.from_range(name, 1, 1, d)
*/
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 406, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_v_self->vars; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 406, __pyx_L1_error)
    #endif
    --__pyx_t_7;
    for (;;) {
      if (__pyx_t_7 < 0) break;
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 406, __pyx_L1_error)
        #endif
        if (__pyx_t_7 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7));
      #else
      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7);
      #endif
      --__pyx_t_7;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "ecco/lrr/lts.pyx":407
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 if v == name :             # <<<<<<<<<<<<<<
 *                     d = ddd.from_range(name, 1, 1, d)
 *                 else :
*/
      __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_v, __pyx_v_name, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 407, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "ecco/lrr/lts.pyx":408
 *             for v in reversed(self.vars) :
 *                 if v == name :
 *                     d = ddd.from_range(name, 1, 1, d)             # <<<<<<<<<<<<<<
 *                 else :
 *                     d = ddd.from_range(v, 0, 1, d)
*/
        __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_5 = 0;
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_name, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_1, ((PyObject *)__pyx_v_d)};
          __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_5, (5-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "ecco/lrr/lts.pyx":407
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
 *                 if v == name :             # <<<<<<<<<<<<<<
 *                     d = ddd.from_range(name, 1, 1, d)
 *                 else :
*/
        goto __pyx_L6;
      }

      /* "ecco/lrr/lts.pyx":410
 *                     d = ddd.from_range(name, 1, 1, d)
 *                 else :
 *                     d = ddd.from_range(v, 0, 1, d)             # <<<<<<<<<<<<<<
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
*/
      /*else*/ {
        __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_ddd);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_5 = 0;
        {
          PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_v, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_1, ((PyObject *)__pyx_v_d)};
          __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_range, __pyx_callargs+__pyx_t_5, (5-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_d, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2));
        __pyx_t_2 = 0;
      }
      __pyx_L6:;

      /* "ecco/lrr/lts.pyx":406
 *         if name not in self._var2sdd :
 *             d = ddd.one()
 *             for v in reversed(self.vars) :             # <<<<<<<<<<<<<<
 *                 if v == name :
 *                     d = ddd.from_range(name, 1, 1, d)
*/
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":411
 *                 else :
 *                     d = ddd.from_range(v, 0, 1, d)
 *             self._var2sdd[name] = d2s(d)             # <<<<<<<<<<<<<<
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :
*/
    __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->_var2sdd == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 411, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->_var2sdd, __pyx_v_name, __pyx_t_1) < 0))) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":404
 *         cdef str v
 *         cdef ddd d
 *         if name not in self._var2sdd :             # <<<<<<<<<<<<<<
 *             d = ddd.one()
 *             for v in reversed(self.vars) :
*/
  }

  /* "ecco/lrr/lts.pyx":412
 *                     d = ddd.from_range(v, 0, 1, d)
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]             # <<<<<<<<<<<<<<
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :
 *         """describe a set of states by a Boolean formula
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  if (unlikely(__pyx_v_self->_var2sdd == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 412, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_var2sdd, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 412, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":401
 *             self.props[prop] = s
 *             return s
 *     cpdef sdd var2sdd (LTS self, str name) :             # <<<<<<<<<<<<<<
 *         cdef str v
 *         cdef ddd d
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.var2sdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_39var2sdd(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_39var2sdd = {"var2sdd", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_39var2sdd, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_39var2sdd(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("var2sdd (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 401, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 401, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "var2sdd", 0) < 0) __PYX_ERR(0, 401, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("var2sdd", 1, 1, 1, i); __PYX_ERR(0, 401, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 401, __pyx_L3_error)
    }
    __pyx_v_name = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("var2sdd", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 401, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.var2sdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_38var2sdd(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_38var2sdd(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("var2sdd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_3LTS_var2sdd(__pyx_v_self, __pyx_v_name, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.var2sdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":413
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe a set of states by a Boolean formula
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_41form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS_form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form *__pyx_optional_args) {
  PyObject *__pyx_v_variables = ((PyObject *)Py_None);
  PyObject *__pyx_v_normalise = ((PyObject *)Py_None);
  PyObject *__pyx_v_seen = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_d = 0;
  PyObject *__pyx_v_keep = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("form", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_variables = __pyx_optional_args->variables;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_normalise = __pyx_optional_args->normalise;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_form); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_3LTS_41form)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_3, ((PyObject *)__pyx_v_states), __pyx_v_variables, __pyx_v_normalise};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (4-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":425
 *         Return: a sympy Boolean formulas
 *         """
 *         cdef dict seen = {}             # <<<<<<<<<<<<<<
 *         cdef ddd d = s2d(states)
 *         cdef set keep = set(variables or self.vars)
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seen = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":426
 *         """
 *         cdef dict seen = {}
 *         cdef ddd d = s2d(states)             # <<<<<<<<<<<<<<
 *         cdef set keep = set(variables or self.vars)
 *         return sympy.simplify_logic(self._form(d, seen, keep), form=normalise)
*/
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(__pyx_v_states)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":427
 *         cdef dict seen = {}
 *         cdef ddd d = s2d(states)
 *         cdef set keep = set(variables or self.vars)             # <<<<<<<<<<<<<<
 *         return sympy.simplify_logic(self._form(d, seen, keep), form=normalise)
 *     cdef object _form (LTS self, ddd head, dict seen, set keep) :
*/
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_variables); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  if (!__pyx_t_6) {
  } else {
    __Pyx_INCREF(__pyx_v_variables);
    __pyx_t_1 = __pyx_v_variables;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_v_self->vars);
  __pyx_t_1 = __pyx_v_self->vars;
  __pyx_L3_bool_binop_done:;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_keep = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":428
 *         cdef ddd d = s2d(states)
 *         cdef set keep = set(variables or self.vars)
 *         return sympy.simplify_logic(self._form(d, seen, keep), form=normalise)             # <<<<<<<<<<<<<<
 *     cdef object _form (LTS self, ddd head, dict seen, set keep) :
 *         cdef object ret, sub
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_simplify_logic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_form(__pyx_v_self, __pyx_v_d, __pyx_v_seen, __pyx_v_keep); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_1);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_1, __pyx_t_4};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_form, __pyx_v_normalise, __pyx_t_7, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":413
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe a set of states by a Boolean formula
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seen);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_keep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_41form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_3LTS_40form, "describe a set of states by a Boolean formula\n\n        Arguments:\n         - `states` (`sdd`): a set of states\n         - `variables=...`: a collection of variables names to restrict to\n         - `normalise=...`: how the formula should be normalised, which must be either:\n           - `\"cnf\"`: conjunctive normal form\n           - `\"dnf\"`: disjunctive normal form\n           - `None`: chose the smallest form\n        Return: a sympy Boolean formulas\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_41form = {"form", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_41form, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_40form};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_41form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  PyObject *__pyx_v_variables = 0;
  PyObject *__pyx_v_normalise = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("form (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_variables,&__pyx_mstate_global->__pyx_n_u_normalise,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 413, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 413, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 413, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 413, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "form", 0) < 0) __PYX_ERR(0, 413, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("form", 0, 1, 3, i); __PYX_ERR(0, 413, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 413, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 413, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 413, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[0]);
    __pyx_v_variables = values[1];
    __pyx_v_normalise = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("form", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_40form(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v_states, __pyx_v_variables, __pyx_v_normalise);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_40form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_variables, PyObject *__pyx_v_normalise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("form", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.variables = __pyx_v_variables;
  __pyx_t_2.normalise = __pyx_v_normalise;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_LTS->form(__pyx_v_self, __pyx_v_states, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":429
 *         cdef set keep = set(variables or self.vars)
 *         return sympy.simplify_logic(self._form(d, seen, keep), form=normalise)
 *     cdef object _form (LTS self, ddd head, dict seen, set keep) :             # <<<<<<<<<<<<<<
 *         cdef object ret, sub
 *         cdef str var
*/

static PyObject *__pyx_f_4ecco_3lrr_3lts_3LTS__form(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen, PyObject *__pyx_v_keep) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_v_sub = 0;
  PyObject *__pyx_v_var = 0;
  val_t __pyx_v_val;
  struct __pyx_obj_3ddd_ddd *__pyx_v_child = 0;
  PyObject *__pyx_v_terms = 0;
  CYTHON_UNUSED PyObject *__pyx_v_num = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  val_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_form", 0);

  /* "ecco/lrr/lts.pyx":434
 *         cdef val_t val
 *         cdef ddd child
 *         cdef list terms = []             # <<<<<<<<<<<<<<
 *         if head.stop() :
 *             seen[head] = ret = sympy.true
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_terms = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":435
 *         cdef ddd child
 *         cdef list terms = []
 *         if head.stop() :             # <<<<<<<<<<<<<<
 *             seen[head] = ret = sympy.true
 *             return ret
*/
  __pyx_t_2 = ((struct __pyx_vtabstruct_3ddd_ddd *)__pyx_v_head->__pyx_base.__pyx_vtab)->stop(__pyx_v_head, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ecco/lrr/lts.pyx":436
 *         cdef list terms = []
 *         if head.stop() :
 *             seen[head] = ret = sympy.true             # <<<<<<<<<<<<<<
 *             return ret
 *         for var, num, val, child in head.edges() :
*/
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_true); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_v_seen == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 436, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_seen, ((PyObject *)__pyx_v_head), __pyx_t_3) < 0))) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_ret = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":437
 *         if head.stop() :
 *             seen[head] = ret = sympy.true
 *             return ret             # <<<<<<<<<<<<<<
 *         for var, num, val, child in head.edges() :
 *             if child in seen :
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret);
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":435
 *         cdef ddd child
 *         cdef list terms = []
 *         if head.stop() :             # <<<<<<<<<<<<<<
 *             seen[head] = ret = sympy.true
 *             return ret
*/
  }

  /* "ecco/lrr/lts.pyx":438
 *             seen[head] = ret = sympy.true
 *             return ret
 *         for var, num, val, child in head.edges() :             # <<<<<<<<<<<<<<
 *             if child in seen :
 *                 sub = seen[child]
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_head);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_edges, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 438, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 438, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5));
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 438, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_3);
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 438, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3);
        __Pyx_INCREF(__pyx_t_10);
      } else {
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyList_GetItemRef(sequence, 2);
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_GetItemRef(sequence, 3);
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_10);
      }
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
        for (i=0; i < 4; i++) {
          PyObject* item = __Pyx_PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 438, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 438, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_7))) __PYX_ERR(0, 438, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyLong_As_val_t(__pyx_t_9); if (unlikely((__pyx_t_13 == ((val_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_var, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_num, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_val = __pyx_t_13;
    __Pyx_XDECREF_SET(__pyx_v_child, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "ecco/lrr/lts.pyx":439
 *             return ret
 *         for var, num, val, child in head.edges() :
 *             if child in seen :             # <<<<<<<<<<<<<<
 *                 sub = seen[child]
 *             else :
*/
    if (unlikely(__pyx_v_seen == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 439, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(((PyObject *)__pyx_v_child), __pyx_v_seen, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 439, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ecco/lrr/lts.pyx":440
 *         for var, num, val, child in head.edges() :
 *             if child in seen :
 *                 sub = seen[child]             # <<<<<<<<<<<<<<
 *             else :
 *                 sub = seen[child] = self._form(child, seen, keep)
*/
      if (unlikely(__pyx_v_seen == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 440, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_seen, ((PyObject *)__pyx_v_child)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_sub, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":439
 *             return ret
 *         for var, num, val, child in head.edges() :
 *             if child in seen :             # <<<<<<<<<<<<<<
 *                 sub = seen[child]
 *             else :
*/
      goto __pyx_L8;
    }

    /* "ecco/lrr/lts.pyx":442
 *                 sub = seen[child]
 *             else :
 *                 sub = seen[child] = self._form(child, seen, keep)             # <<<<<<<<<<<<<<
 *             if var not in keep :
 *                 terms.append(sub)
*/
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->__pyx_vtab)->_form(__pyx_v_self, __pyx_v_child, __pyx_v_seen, __pyx_v_keep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_sub, __pyx_t_3);
      if (unlikely(__pyx_v_seen == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 442, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_seen, ((PyObject *)__pyx_v_child), __pyx_t_3) < 0))) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "ecco/lrr/lts.pyx":443
 *             else :
 *                 sub = seen[child] = self._form(child, seen, keep)
 *             if var not in keep :             # <<<<<<<<<<<<<<
 *                 terms.append(sub)
 *             elif val :
*/
    if (unlikely(__pyx_v_keep == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 443, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_v_var, __pyx_v_keep, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 443, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ecco/lrr/lts.pyx":444
 *                 sub = seen[child] = self._form(child, seen, keep)
 *             if var not in keep :
 *                 terms.append(sub)             # <<<<<<<<<<<<<<
 *             elif val :
 *                 terms.append(sympy.Symbol(var) & sub)
*/
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_terms, __pyx_v_sub); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 444, __pyx_L1_error)

      /* "ecco/lrr/lts.pyx":443
 *             else :
 *                 sub = seen[child] = self._form(child, seen, keep)
 *             if var not in keep :             # <<<<<<<<<<<<<<
 *                 terms.append(sub)
 *             elif val :
*/
      goto __pyx_L9;
    }

    /* "ecco/lrr/lts.pyx":445
 *             if var not in keep :
 *                 terms.append(sub)
 *             elif val :             # <<<<<<<<<<<<<<
 *                 terms.append(sympy.Symbol(var) & sub)
 *             else :
*/
    __pyx_t_2 = (__pyx_v_val != 0);
    if (__pyx_t_2) {

      /* "ecco/lrr/lts.pyx":446
 *                 terms.append(sub)
 *             elif val :
 *                 terms.append(sympy.Symbol(var) & sub)             # <<<<<<<<<<<<<<
 *             else :
 *                 terms.append(sympy.Not(sympy.Symbol(var)) & sub)
*/
      __pyx_t_10 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Symbol); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_4 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        assert(__pyx_t_10);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
        __pyx_t_4 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_var};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      __pyx_t_8 = PyNumber_And(__pyx_t_3, __pyx_v_sub); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_terms, __pyx_t_8); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ecco/lrr/lts.pyx":445
 *             if var not in keep :
 *                 terms.append(sub)
 *             elif val :             # <<<<<<<<<<<<<<
 *                 terms.append(sympy.Symbol(var) & sub)
 *             else :
*/
      goto __pyx_L9;
    }

    /* "ecco/lrr/lts.pyx":448
 *                 terms.append(sympy.Symbol(var) & sub)
 *             else :
 *                 terms.append(sympy.Not(sympy.Symbol(var)) & sub)             # <<<<<<<<<<<<<<
 *         if not terms :
 *             terms.append(sympy.true)
*/
    /*else*/ {
      __pyx_t_3 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_Not); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_7 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_Symbol); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_4 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_15);
        assert(__pyx_t_7);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_15, __pyx__function);
        __pyx_t_4 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_var};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 448, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
      }
      __pyx_t_4 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        assert(__pyx_t_3);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
        __pyx_t_4 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_10};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 448, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __pyx_t_9 = PyNumber_And(__pyx_t_8, __pyx_v_sub); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_terms, __pyx_t_9); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_L9:;

    /* "ecco/lrr/lts.pyx":438
 *             seen[head] = ret = sympy.true
 *             return ret
 *         for var, num, val, child in head.edges() :             # <<<<<<<<<<<<<<
 *             if child in seen :
 *                 sub = seen[child]
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":449
 *             else :
 *                 terms.append(sympy.Not(sympy.Symbol(var)) & sub)
 *         if not terms :             # <<<<<<<<<<<<<<
 *             terms.append(sympy.true)
 *         seen[head] = ret = sympy.Or(*terms)
*/
  {
    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_v_terms);
    if (unlikely(((!CYTHON_ASSUME_SAFE_SIZE) && __pyx_temp < 0))) __PYX_ERR(0, 449, __pyx_L1_error)
    __pyx_t_2 = (__pyx_temp != 0);
  }

  __pyx_t_16 = (!__pyx_t_2);
  if (__pyx_t_16) {

    /* "ecco/lrr/lts.pyx":450
 *                 terms.append(sympy.Not(sympy.Symbol(var)) & sub)
 *         if not terms :
 *             terms.append(sympy.true)             # <<<<<<<<<<<<<<
 *         seen[head] = ret = sympy.Or(*terms)
 *         return ret
*/
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_true); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_terms, __pyx_t_9); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "ecco/lrr/lts.pyx":449
 *             else :
 *                 terms.append(sympy.Not(sympy.Symbol(var)) & sub)
 *         if not terms :             # <<<<<<<<<<<<<<
 *             terms.append(sympy.true)
 *         seen[head] = ret = sympy.Or(*terms)
*/
  }

  /* "ecco/lrr/lts.pyx":451
 *         if not terms :
 *             terms.append(sympy.true)
 *         seen[head] = ret = sympy.Or(*terms)             # <<<<<<<<<<<<<<
 *         return ret
 * 
*/
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_sympy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Or); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PySequence_Tuple(__pyx_v_terms); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(__pyx_v_seen == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 451, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_seen, ((PyObject *)__pyx_v_head), __pyx_t_8) < 0))) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_8);
  __pyx_v_ret = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ecco/lrr/lts.pyx":452
 *             terms.append(sympy.true)
 *         seen[head] = ret = sympy.Or(*terms)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cpdef enum setrel :
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":429
 *         cdef set keep = set(variables or self.vars)
 *         return sympy.simplify_logic(self._form(d, seen, keep), form=normalise)
 *     cdef object _form (LTS self, ddd head, dict seen, set keep) :             # <<<<<<<<<<<<<<
 *         cdef object ret, sub
 *         cdef str var
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS._form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_sub);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_terms);
  __Pyx_XDECREF(__pyx_v_num);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":46
 *      - `vars`: a truple of `str` representing the variables of the model
 *     """
 *     cdef readonly str path             # <<<<<<<<<<<<<<
 *     cdef readonly model gal
 *     cdef readonly sdd init, states, dead, hull
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4path_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4path___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4path___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->path);
  __pyx_r = __pyx_v_self->path;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":47
 *     """
 *     cdef readonly str path
 *     cdef readonly model gal             # <<<<<<<<<<<<<<
 *     cdef readonly sdd init, states, dead, hull
 *     cdef readonly shom succ, pred, succ_o, pred_o, succ_s, pred_s
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_3gal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_3gal_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_3gal___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_3gal___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->gal);
  __pyx_r = ((PyObject *)__pyx_v_self->gal);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":48
 *     cdef readonly str path
 *     cdef readonly model gal
 *     cdef readonly sdd init, states, dead, hull             # <<<<<<<<<<<<<<
 *     cdef readonly shom succ, pred, succ_o, pred_o, succ_s, pred_s
 *     cdef readonly dict props, alias, tsucc, tpred
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4init_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4init_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4init___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4init___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->init);
  __pyx_r = ((PyObject *)__pyx_v_self->init);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6states___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6states___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->states);
  __pyx_r = ((PyObject *)__pyx_v_self->states);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4dead_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4dead_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4dead___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4dead___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->dead);
  __pyx_r = ((PyObject *)__pyx_v_self->dead);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4hull_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4hull_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4hull___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4hull___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->hull);
  __pyx_r = ((PyObject *)__pyx_v_self->hull);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":49
 *     cdef readonly model gal
 *     cdef readonly sdd init, states, dead, hull
 *     cdef readonly shom succ, pred, succ_o, pred_o, succ_s, pred_s             # <<<<<<<<<<<<<<
 *     cdef readonly dict props, alias, tsucc, tpred
 *     cdef readonly tuple vars
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4succ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4succ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4succ___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4succ___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ);
  __pyx_r = ((PyObject *)__pyx_v_self->succ);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4pred_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4pred_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4pred___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4pred___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred);
  __pyx_r = ((PyObject *)__pyx_v_self->pred);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_o_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_o_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_o___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_o___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ_o);
  __pyx_r = ((PyObject *)__pyx_v_self->succ_o);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_o_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_o_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_o___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_o___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred_o);
  __pyx_r = ((PyObject *)__pyx_v_self->pred_o);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_s_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_s___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6succ_s___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->succ_s);
  __pyx_r = ((PyObject *)__pyx_v_self->succ_s);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_s_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_s___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_6pred_s___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->pred_s);
  __pyx_r = ((PyObject *)__pyx_v_self->pred_s);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":50
 *     cdef readonly sdd init, states, dead, hull
 *     cdef readonly shom succ, pred, succ_o, pred_o, succ_s, pred_s
 *     cdef readonly dict props, alias, tsucc, tpred             # <<<<<<<<<<<<<<
 *     cdef readonly tuple vars
 *     cdef dict _var2sdd
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5props_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5props_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_5props___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5props___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->props);
  __pyx_r = __pyx_v_self->props;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5alias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5alias_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_5alias___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5alias___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->alias);
  __pyx_r = __pyx_v_self->alias;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5tsucc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5tsucc_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_5tsucc___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5tsucc___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tsucc);
  __pyx_r = __pyx_v_self->tsucc;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5tpred_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_5tpred_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_5tpred___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_5tpred___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tpred);
  __pyx_r = __pyx_v_self->tpred;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":51
 *     cdef readonly shom succ, pred, succ_o, pred_o, succ_s, pred_s
 *     cdef readonly dict props, alias, tsucc, tpred
 *     cdef readonly tuple vars             # <<<<<<<<<<<<<<
 *     cdef dict _var2sdd
 *     cdef readonly bint compact
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_4vars_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_4vars___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_4vars___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->vars);
  __pyx_r = __pyx_v_self->vars;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":53
 *     cdef readonly tuple vars
 *     cdef dict _var2sdd
 *     cdef readonly bint compact             # <<<<<<<<<<<<<<
 *     cdef readonly shom constraints
 *     cdef readonly sdd transient
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_7compact_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_7compact_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_7compact___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_7compact___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->compact); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.compact.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":54
 *     cdef dict _var2sdd
 *     cdef readonly bint compact
 *     cdef readonly shom constraints             # <<<<<<<<<<<<<<
 *     cdef readonly sdd transient
 *     cpdef void save_file (LTS self, str path) :
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_11constraints_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_11constraints_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_11constraints___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_11constraints___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->constraints);
  __pyx_r = ((PyObject *)__pyx_v_self->constraints);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":55
 *     cdef readonly bint compact
 *     cdef readonly shom constraints
 *     cdef readonly sdd transient             # <<<<<<<<<<<<<<
 *     cpdef void save_file (LTS self, str path) :
 *         """save LTS to file `path`
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_9transient_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_9transient_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_9transient___get__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_9transient___get__(struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->transient);
  __pyx_r = ((PyObject *)__pyx_v_self->transient);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_43__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_43__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_43__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_43__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_42__reduce_cython__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_45__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_3LTS_45__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_45__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_3LTS_45__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_3LTS_44__setstate_cython__(((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_3LTS_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.LTS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":498
 *     cdef readonly LTS lts
 *     cdef readonly tuple on, off
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         self.lts = lts
 *         self.states = states
*/

/* Python wrapper */
static int __pyx_pw_4ecco_3lrr_3lts_9Component_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4ecco_3lrr_3lts_9Component_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  PyObject *__pyx_v_gp = 0;
  PyObject *__pyx_v_sp = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_lts,&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_gp,&__pyx_mstate_global->__pyx_n_u_sp,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 498, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 498, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__6);
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__7);
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, i); __PYX_ERR(0, 498, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 498, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 498, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 498, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__6);
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__7);
    }
    __pyx_v_lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)values[0]);
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[1]);
    __pyx_v_gp = ((PyObject*)values[2]);
    __pyx_v_sp = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 498, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lts), __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, 1, "lts", 0))) __PYX_ERR(0, 498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gp), (&PyDict_Type), 1, "gp", 1))) __PYX_ERR(0, 498, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sp), (&PyDict_Type), 1, "sp", 1))) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component___cinit__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_lts, __pyx_v_states, __pyx_v_gp, __pyx_v_sp);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ecco_3lrr_3lts_9Component___cinit__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_gp, PyObject *__pyx_v_sp) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ecco/lrr/lts.pyx":499
 *     cdef readonly tuple on, off
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
 *         self.lts = lts             # <<<<<<<<<<<<<<
 *         self.states = states
 *         self.graph_props = dict(gp)
*/
  __Pyx_INCREF((PyObject *)__pyx_v_lts);
  __Pyx_GIVEREF((PyObject *)__pyx_v_lts);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->lts);
  __Pyx_DECREF((PyObject *)__pyx_v_self->lts);
  __pyx_v_self->lts = __pyx_v_lts;

  /* "ecco/lrr/lts.pyx":500
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
 *         self.lts = lts
 *         self.states = states             # <<<<<<<<<<<<<<
 *         self.graph_props = dict(gp)
 *         self.split_props = dict(sp)
*/
  __Pyx_INCREF((PyObject *)__pyx_v_states);
  __Pyx_GIVEREF((PyObject *)__pyx_v_states);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->states);
  __Pyx_DECREF((PyObject *)__pyx_v_self->states);
  __pyx_v_self->states = __pyx_v_states;

  /* "ecco/lrr/lts.pyx":501
 *         self.lts = lts
 *         self.states = states
 *         self.graph_props = dict(gp)             # <<<<<<<<<<<<<<
 *         self.split_props = dict(sp)
 *     def __init__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
*/
  if (unlikely(__pyx_v_gp == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 501, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_v_gp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->graph_props);
  __Pyx_DECREF(__pyx_v_self->graph_props);
  __pyx_v_self->graph_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":502
 *         self.states = states
 *         self.graph_props = dict(gp)
 *         self.split_props = dict(sp)             # <<<<<<<<<<<<<<
 *     def __init__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
 *         """create an instance of a `Component`
*/
  if (unlikely(__pyx_v_sp == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 502, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_v_sp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->split_props);
  __Pyx_DECREF(__pyx_v_self->split_props);
  __pyx_v_self->split_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":498
 *     cdef readonly LTS lts
 *     cdef readonly tuple on, off
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         self.lts = lts
 *         self.states = states
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":503
 *         self.graph_props = dict(gp)
 *         self.split_props = dict(sp)
 *     def __init__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         """create an instance of a `Component`
 * 
*/

/* Python wrapper */
static int __pyx_pw_4ecco_3lrr_3lts_9Component_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_2__init__, "create an instance of a `Component`\n\n        Parameters:\n         - `lts`: the `LTS` from which the component is originated\n         - `states`: the `ddd.sdd` containing the states of the component\n         - `gp`: a `dict` of graph properties\n         - `sp`: a `dict` of split properties\n        Returns: newly created `Component`\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_2__init__;
#endif
static int __pyx_pw_4ecco_3lrr_3lts_9Component_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  CYTHON_UNUSED PyObject *__pyx_v_gp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_sp = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_lts,&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_gp,&__pyx_mstate_global->__pyx_n_u_sp,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 503, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 503, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__8);
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__9);
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, i); __PYX_ERR(0, 503, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 503, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 503, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 503, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__8);
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__9);
    }
    __pyx_v_lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)values[0]);
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[1]);
    __pyx_v_gp = ((PyObject*)values[2]);
    __pyx_v_sp = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 503, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lts), __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, 1, "lts", 0))) __PYX_ERR(0, 503, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 503, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gp), (&PyDict_Type), 1, "gp", 1))) __PYX_ERR(0, 503, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sp), (&PyDict_Type), 1, "sp", 1))) __PYX_ERR(0, 503, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_2__init__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_lts, __pyx_v_states, __pyx_v_gp, __pyx_v_sp);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ecco_3lrr_3lts_9Component_2__init__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_LTS *__pyx_v_lts, struct __pyx_obj_3ddd_sdd *__pyx_v_states, CYTHON_UNUSED PyObject *__pyx_v_gp, CYTHON_UNUSED PyObject *__pyx_v_sp) {
  PyObject *__pyx_v_on = 0;
  PyObject *__pyx_v_off = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_4ecco_3lrr_3lts_CompoID __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ecco/lrr/lts.pyx":515
 *         global _CompoCache
 *         cdef set on, off
 *         if (states, lts) in _CompoCache :             # <<<<<<<<<<<<<<
 *             self.num = _CompoCache[states, lts]
 *         else :
*/
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_states);
  __Pyx_GIVEREF((PyObject *)__pyx_v_states);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_states)) != (0)) __PYX_ERR(0, 515, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_lts);
  __Pyx_GIVEREF((PyObject *)__pyx_v_lts);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_lts)) != (0)) __PYX_ERR(0, 515, __pyx_L1_error);
  if (unlikely(__pyx_v_4ecco_3lrr_3lts__CompoCache == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 515, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_4ecco_3lrr_3lts__CompoCache, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ecco/lrr/lts.pyx":516
 *         cdef set on, off
 *         if (states, lts) in _CompoCache :
 *             self.num = _CompoCache[states, lts]             # <<<<<<<<<<<<<<
 *         else :
 *             _CompoCache[states, lts] = self.num = len(_CompoCache)
*/
    if (unlikely(__pyx_v_4ecco_3lrr_3lts__CompoCache == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 516, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF((PyObject *)__pyx_v_states);
    __Pyx_GIVEREF((PyObject *)__pyx_v_states);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_states)) != (0)) __PYX_ERR(0, 516, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_lts);
    __Pyx_GIVEREF((PyObject *)__pyx_v_lts);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_lts)) != (0)) __PYX_ERR(0, 516, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_4ecco_3lrr_3lts__CompoCache, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->num = __pyx_t_4;

    /* "ecco/lrr/lts.pyx":515
 *         global _CompoCache
 *         cdef set on, off
 *         if (states, lts) in _CompoCache :             # <<<<<<<<<<<<<<
 *             self.num = _CompoCache[states, lts]
 *         else :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":518
 *             self.num = _CompoCache[states, lts]
 *         else :
 *             _CompoCache[states, lts] = self.num = len(_CompoCache)             # <<<<<<<<<<<<<<
 *         on, off = self.on_off()
 *         self.on = tuple(on)
*/
  /*else*/ {
    __pyx_t_3 = __pyx_v_4ecco_3lrr_3lts__CompoCache;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 518, __pyx_L1_error)
    }
    __pyx_t_5 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_4ecco_3lrr_3lts__CompoCache == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 518, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF((PyObject *)__pyx_v_states);
    __Pyx_GIVEREF((PyObject *)__pyx_v_states);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_states)) != (0)) __PYX_ERR(0, 518, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_lts);
    __Pyx_GIVEREF((PyObject *)__pyx_v_lts);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_lts)) != (0)) __PYX_ERR(0, 518, __pyx_L1_error);
    if (unlikely((PyDict_SetItem(__pyx_v_4ecco_3lrr_3lts__CompoCache, __pyx_t_1, __pyx_t_3) < 0))) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->num = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "ecco/lrr/lts.pyx":519
 *         else :
 *             _CompoCache[states, lts] = self.num = len(_CompoCache)
 *         on, off = self.on_off()             # <<<<<<<<<<<<<<
 *         self.on = tuple(on)
 *         self.off = tuple(off)
*/
  __pyx_t_3 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->on_off(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 519, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 519, __pyx_L1_error)
  }
  if (!(likely(PySet_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("set", __pyx_t_1))) __PYX_ERR(0, 519, __pyx_L1_error)
  if (!(likely(PySet_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("set", __pyx_t_6))) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_v_on = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_off = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ecco/lrr/lts.pyx":520
 *             _CompoCache[states, lts] = self.num = len(_CompoCache)
 *         on, off = self.on_off()
 *         self.on = tuple(on)             # <<<<<<<<<<<<<<
 *         self.off = tuple(off)
 *     cpdef dict dump (Component self) :
*/
  __pyx_t_3 = PySequence_Tuple(__pyx_v_on); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->on);
  __Pyx_DECREF(__pyx_v_self->on);
  __pyx_v_self->on = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ecco/lrr/lts.pyx":521
 *         on, off = self.on_off()
 *         self.on = tuple(on)
 *         self.off = tuple(off)             # <<<<<<<<<<<<<<
 *     cpdef dict dump (Component self) :
 *         return {"DDD" : [s2d(self.states)],
*/
  __pyx_t_3 = PySequence_Tuple(__pyx_v_off); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->off);
  __Pyx_DECREF(__pyx_v_self->off);
  __pyx_v_self->off = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ecco/lrr/lts.pyx":503
 *         self.graph_props = dict(gp)
 *         self.split_props = dict(sp)
 *     def __init__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         """create an instance of a `Component`
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_on);
  __Pyx_XDECREF(__pyx_v_off);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":522
 *         self.on = tuple(on)
 *         self.off = tuple(off)
 *     cpdef dict dump (Component self) :             # <<<<<<<<<<<<<<
 *         return {"DDD" : [s2d(self.states)],
 *                 "num" : self.num,
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_5dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_dump(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_dump); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_5dump)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 522, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":523
 *         self.off = tuple(off)
 *     cpdef dict dump (Component self) :
 *         return {"DDD" : [s2d(self.states)],             # <<<<<<<<<<<<<<
 *                 "num" : self.num,
 *                 "graph_props" : self.graph_props,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_2))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 523, __pyx_L1_error);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_DDD, __pyx_t_2) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":524
 *     cpdef dict dump (Component self) :
 *         return {"DDD" : [s2d(self.states)],
 *                 "num" : self.num,             # <<<<<<<<<<<<<<
 *                 "graph_props" : self.graph_props,
 *                 "split_props" : self.split_props,
*/
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(__pyx_v_self->num); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_num, __pyx_t_2) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":525
 *         return {"DDD" : [s2d(self.states)],
 *                 "num" : self.num,
 *                 "graph_props" : self.graph_props,             # <<<<<<<<<<<<<<
 *                 "split_props" : self.split_props,
 *                 "on" : self.on,
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_graph_props, __pyx_v_self->graph_props) < 0) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":526
 *                 "num" : self.num,
 *                 "graph_props" : self.graph_props,
 *                 "split_props" : self.split_props,             # <<<<<<<<<<<<<<
 *                 "on" : self.on,
 *                 "off" : self.off}
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_split_props, __pyx_v_self->split_props) < 0) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":527
 *                 "graph_props" : self.graph_props,
 *                 "split_props" : self.split_props,
 *                 "on" : self.on,             # <<<<<<<<<<<<<<
 *                 "off" : self.off}
 *     @classmethod
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_on, __pyx_v_self->on) < 0) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":528
 *                 "split_props" : self.split_props,
 *                 "on" : self.on,
 *                 "off" : self.off}             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def load (cls, dump, lts) :
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_off, __pyx_v_self->off) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":522
 *         self.on = tuple(on)
 *         self.off = tuple(off)
 *     cpdef dict dump (Component self) :             # <<<<<<<<<<<<<<
 *         return {"DDD" : [s2d(self.states)],
 *                 "num" : self.num,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_5dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_5dump = {"dump", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_5dump, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_5dump(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("dump", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("dump", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_4dump(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_4dump(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_9Component_dump(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":529
 *                 "on" : self.on,
 *                 "off" : self.off}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dump, lts) :
 *         cdef Component compo = Component.__new__(Component,
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_7load(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_7load = {"load", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_7load, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_7load(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dump = 0;
  PyObject *__pyx_v_lts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_dump,&__pyx_mstate_global->__pyx_n_u_lts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 529, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 529, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 529, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "load", 0) < 0) __PYX_ERR(0, 529, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, i); __PYX_ERR(0, 529, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 529, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 529, __pyx_L3_error)
    }
    __pyx_v_dump = values[0];
    __pyx_v_lts = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 529, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_6load(((PyTypeObject*)__pyx_v_cls), __pyx_v_dump, __pyx_v_lts);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_6load(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dump, PyObject *__pyx_v_lts) {
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_compo = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "ecco/lrr/lts.pyx":533
 *         cdef Component compo = Component.__new__(Component,
 *                                                  lts,
 *                                                  d2s(dump["DDD"][0]),             # <<<<<<<<<<<<<<
 *                                                  dump["graph_props"],
 *                                                  dump["split_props"])
*/
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_DDD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_t_1 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(((struct __pyx_obj_3ddd_ddd *)__pyx_t_2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":534
 *                                                  lts,
 *                                                  d2s(dump["DDD"][0]),
 *                                                  dump["graph_props"],             # <<<<<<<<<<<<<<
 *                                                  dump["split_props"])
 *         compo._load(dump)
*/
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_graph_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "ecco/lrr/lts.pyx":535
 *                                                  d2s(dump["DDD"][0]),
 *                                                  dump["graph_props"],
 *                                                  dump["split_props"])             # <<<<<<<<<<<<<<
 *         compo._load(dump)
 *         return compo
*/
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_split_props); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "ecco/lrr/lts.pyx":531
 *     @classmethod
 *     def load (cls, dump, lts) :
 *         cdef Component compo = Component.__new__(Component,             # <<<<<<<<<<<<<<
 *                                                  lts,
 *                                                  d2s(dump["DDD"][0]),
*/
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_lts);
  __Pyx_GIVEREF(__pyx_v_lts);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_lts) != (0)) __PYX_ERR(0, 531, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 531, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2) != (0)) __PYX_ERR(0, 531, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3) != (0)) __PYX_ERR(0, 531, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_4ecco_3lrr_3lts_Component(((PyTypeObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component), __pyx_t_4, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_compo = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ecco/lrr/lts.pyx":536
 *                                                  dump["graph_props"],
 *                                                  dump["split_props"])
 *         compo._load(dump)             # <<<<<<<<<<<<<<
 *         return compo
 *     cdef void _load (Component self, dict dump) :
*/
  if (!(likely(PyDict_CheckExact(__pyx_v_dump))||((__pyx_v_dump) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_v_dump))) __PYX_ERR(0, 536, __pyx_L1_error)
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_compo->__pyx_vtab)->_load(__pyx_v_compo, ((PyObject*)__pyx_v_dump)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":537
 *                                                  dump["split_props"])
 *         compo._load(dump)
 *         return compo             # <<<<<<<<<<<<<<
 *     cdef void _load (Component self, dict dump) :
 *         self.num = dump["num"]
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_compo);
  __pyx_r = ((PyObject *)__pyx_v_compo);
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":529
 *                 "on" : self.on,
 *                 "off" : self.off}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dump, lts) :
 *         cdef Component compo = Component.__new__(Component,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_compo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":538
 *         compo._load(dump)
 *         return compo
 *     cdef void _load (Component self, dict dump) :             # <<<<<<<<<<<<<<
 *         self.num = dump["num"]
 *         self.on = dump["on"]
*/

static void __pyx_f_4ecco_3lrr_3lts_9Component__load(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_dump) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_4ecco_3lrr_3lts_CompoID __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load", 0);

  /* "ecco/lrr/lts.pyx":539
 *         return compo
 *     cdef void _load (Component self, dict dump) :
 *         self.num = dump["num"]             # <<<<<<<<<<<<<<
 *         self.on = dump["on"]
 *         self.off = dump["off"]
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->num = __pyx_t_2;

  /* "ecco/lrr/lts.pyx":540
 *     cdef void _load (Component self, dict dump) :
 *         self.num = dump["num"]
 *         self.on = dump["on"]             # <<<<<<<<<<<<<<
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 540, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_on); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->on);
  __Pyx_DECREF(__pyx_v_self->on);
  __pyx_v_self->on = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":541
 *         self.num = dump["num"]
 *         self.on = dump["on"]
 *         self.off = dump["off"]             # <<<<<<<<<<<<<<
 *     cpdef Component copy (Component self, lts=None) :
 *         cdef Component compo
*/
  if (unlikely(__pyx_v_dump == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 541, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dump, __pyx_mstate_global->__pyx_n_u_off); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->off);
  __Pyx_DECREF(__pyx_v_self->off);
  __pyx_v_self->off = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":538
 *         compo._load(dump)
 *         return compo
 *     cdef void _load (Component self, dict dump) :             # <<<<<<<<<<<<<<
 *         self.num = dump["num"]
 *         self.on = dump["on"]
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":542
 *         self.on = dump["on"]
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :             # <<<<<<<<<<<<<<
 *         cdef Component compo
 *         if lts is None :
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_9copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component_copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy *__pyx_optional_args) {
  PyObject *__pyx_v_lts = ((PyObject *)Py_None);
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_compo = 0;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_lts = __pyx_optional_args->lts;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_9copy)) {
        __Pyx_XDECREF((PyObject *)__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_lts};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component))))) __PYX_ERR(0, 542, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":544
 *     cpdef Component copy (Component self, lts=None) :
 *         cdef Component compo
 *         if lts is None :             # <<<<<<<<<<<<<<
 *             compo = Component.__new__(Component, self.lts, self.states,
 *                                       self.graph_props, self.split_props)
*/
  __pyx_t_6 = (__pyx_v_lts == Py_None);
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":545
 *         cdef Component compo
 *         if lts is None :
 *             compo = Component.__new__(Component, self.lts, self.states,             # <<<<<<<<<<<<<<
 *                                       self.graph_props, self.split_props)
 *         else :
*/
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self->lts);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->lts)) != (0)) __PYX_ERR(0, 545, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_self->states);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self->states);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->states)) != (0)) __PYX_ERR(0, 545, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_self->graph_props);
    __Pyx_GIVEREF(__pyx_v_self->graph_props);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_self->graph_props) != (0)) __PYX_ERR(0, 545, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_self->split_props);
    __Pyx_GIVEREF(__pyx_v_self->split_props);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_self->split_props) != (0)) __PYX_ERR(0, 545, __pyx_L1_error);
    __pyx_t_2 = ((PyObject *)__pyx_tp_new_4ecco_3lrr_3lts_Component(((PyTypeObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_compo = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":544
 *     cpdef Component copy (Component self, lts=None) :
 *         cdef Component compo
 *         if lts is None :             # <<<<<<<<<<<<<<
 *             compo = Component.__new__(Component, self.lts, self.states,
 *                                       self.graph_props, self.split_props)
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":548
 *                                       self.graph_props, self.split_props)
 *         else :
 *             compo = Component.__new__(Component, lts, self.states,             # <<<<<<<<<<<<<<
 *                                       self.graph_props, self.split_props)
 *         compo._copy(self)
*/
  /*else*/ {

    /* "ecco/lrr/lts.pyx":549
 *         else :
 *             compo = Component.__new__(Component, lts, self.states,
 *                                       self.graph_props, self.split_props)             # <<<<<<<<<<<<<<
 *         compo._copy(self)
 *         return compo
*/
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_lts);
    __Pyx_GIVEREF(__pyx_v_lts);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_lts) != (0)) __PYX_ERR(0, 548, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_self->states);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self->states);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->states)) != (0)) __PYX_ERR(0, 548, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_self->graph_props);
    __Pyx_GIVEREF(__pyx_v_self->graph_props);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->graph_props) != (0)) __PYX_ERR(0, 548, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_self->split_props);
    __Pyx_GIVEREF(__pyx_v_self->split_props);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_self->split_props) != (0)) __PYX_ERR(0, 548, __pyx_L1_error);

    /* "ecco/lrr/lts.pyx":548
 *                                       self.graph_props, self.split_props)
 *         else :
 *             compo = Component.__new__(Component, lts, self.states,             # <<<<<<<<<<<<<<
 *                                       self.graph_props, self.split_props)
 *         compo._copy(self)
*/
    __pyx_t_1 = ((PyObject *)__pyx_tp_new_4ecco_3lrr_3lts_Component(((PyTypeObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component), __pyx_t_2, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_compo = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "ecco/lrr/lts.pyx":550
 *             compo = Component.__new__(Component, lts, self.states,
 *                                       self.graph_props, self.split_props)
 *         compo._copy(self)             # <<<<<<<<<<<<<<
 *         return compo
 *     cdef void _copy (Component self, Component other) :
*/
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_compo->__pyx_vtab)->_copy(__pyx_v_compo, __pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "ecco/lrr/lts.pyx":551
 *                                       self.graph_props, self.split_props)
 *         compo._copy(self)
 *         return compo             # <<<<<<<<<<<<<<
 *     cdef void _copy (Component self, Component other) :
 *         self.num = other.num
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_compo);
  __pyx_r = __pyx_v_compo;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":542
 *         self.on = dump["on"]
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :             # <<<<<<<<<<<<<<
 *         cdef Component compo
 *         if lts is None :
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_compo);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_9copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_9copy = {"copy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_9copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_9copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_lts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_lts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 542, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 542, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "copy", 0) < 0) __PYX_ERR(0, 542, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 542, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_lts = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_8copy(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_lts);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_8copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_lts) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.lts = __pyx_v_lts;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_4ecco_3lrr_3lts_Component->copy(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":552
 *         compo._copy(self)
 *         return compo
 *     cdef void _copy (Component self, Component other) :             # <<<<<<<<<<<<<<
 *         self.num = other.num
 *         self.on = other.on
*/

static void __pyx_f_4ecco_3lrr_3lts_9Component__copy(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_other) {
  __Pyx_RefNannyDeclarations
  __pyx_t_4ecco_3lrr_3lts_CompoID __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_copy", 0);

  /* "ecco/lrr/lts.pyx":553
 *         return compo
 *     cdef void _copy (Component self, Component other) :
 *         self.num = other.num             # <<<<<<<<<<<<<<
 *         self.on = other.on
 *         self.off = other.off
*/
  __pyx_t_1 = __pyx_v_other->num;
  __pyx_v_self->num = __pyx_t_1;

  /* "ecco/lrr/lts.pyx":554
 *     cdef void _copy (Component self, Component other) :
 *         self.num = other.num
 *         self.on = other.on             # <<<<<<<<<<<<<<
 *         self.off = other.off
 *     def __len__ (Component self) :
*/
  __pyx_t_2 = __pyx_v_other->on;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->on);
  __Pyx_DECREF(__pyx_v_self->on);
  __pyx_v_self->on = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":555
 *         self.num = other.num
 *         self.on = other.on
 *         self.off = other.off             # <<<<<<<<<<<<<<
 *     def __len__ (Component self) :
 *         "number of states in the component"
*/
  __pyx_t_2 = __pyx_v_other->off;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->off);
  __Pyx_DECREF(__pyx_v_self->off);
  __pyx_v_self->off = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":552
 *         compo._copy(self)
 *         return compo
 *     cdef void _copy (Component self, Component other) :             # <<<<<<<<<<<<<<
 *         self.num = other.num
 *         self.on = other.on
*/

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":556
 *         self.on = other.on
 *         self.off = other.off
 *     def __len__ (Component self) :             # <<<<<<<<<<<<<<
 *         "number of states in the component"
 *         return len(self.states)
*/

/* Python wrapper */
static Py_ssize_t __pyx_pw_4ecco_3lrr_3lts_9Component_11__len__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_10__len__, "number of states in the component");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_10__len__;
#endif
static Py_ssize_t __pyx_pw_4ecco_3lrr_3lts_9Component_11__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_10__len__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_4ecco_3lrr_3lts_9Component_10__len__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "ecco/lrr/lts.pyx":558
 *     def __len__ (Component self) :
 *         "number of states in the component"
 *         return len(self.states)             # <<<<<<<<<<<<<<
 *     def __hash__ (Component self) :
 *         return hash((self.states, self.lts))
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":556
 *         self.on = other.on
 *         self.off = other.off
 *     def __len__ (Component self) :             # <<<<<<<<<<<<<<
 *         "number of states in the component"
 *         return len(self.states)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":559
 *         "number of states in the component"
 *         return len(self.states)
 *     def __hash__ (Component self) :             # <<<<<<<<<<<<<<
 *         return hash((self.states, self.lts))
 *     def __eq__ (Component self, Component other) :
*/

/* Python wrapper */
static Py_hash_t __pyx_pw_4ecco_3lrr_3lts_9Component_13__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_4ecco_3lrr_3lts_9Component_13__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_12__hash__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_4ecco_3lrr_3lts_9Component_12__hash__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "ecco/lrr/lts.pyx":560
 *         return len(self.states)
 *     def __hash__ (Component self) :
 *         return hash((self.states, self.lts))             # <<<<<<<<<<<<<<
 *     def __eq__ (Component self, Component other) :
 *         return self.states == other.states and self.lts == other.lts
*/
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->states);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->states);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->states)) != (0)) __PYX_ERR(0, 560, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self->lts);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->lts);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->lts)) != (0)) __PYX_ERR(0, 560, __pyx_L1_error);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":559
 *         "number of states in the component"
 *         return len(self.states)
 *     def __hash__ (Component self) :             # <<<<<<<<<<<<<<
 *         return hash((self.states, self.lts))
 *     def __eq__ (Component self, Component other) :
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":561
 *     def __hash__ (Component self) :
 *         return hash((self.states, self.lts))
 *     def __eq__ (Component self, Component other) :             # <<<<<<<<<<<<<<
 *         return self.states == other.states and self.lts == other.lts
 *     @property
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_15__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_15__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, 1, "other", 0))) __PYX_ERR(0, 561, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_14__eq__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  goto __pyx_L5_cleaned_up;
  __pyx_L0:;
  __pyx_L5_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_14__eq__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "ecco/lrr/lts.pyx":562
 *         return hash((self.states, self.lts))
 *     def __eq__ (Component self, Component other) :
 *         return self.states == other.states and self.lts == other.lts             # <<<<<<<<<<<<<<
 *     @property
 *     def props (Component self) :
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->states), ((PyObject *)__pyx_v_other->states), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 562, __pyx_L1_error)
  if (__pyx_t_3) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->lts), ((PyObject *)__pyx_v_other->lts), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":561
 *     def __hash__ (Component self) :
 *         return hash((self.states, self.lts))
 *     def __eq__ (Component self, Component other) :             # <<<<<<<<<<<<<<
 *         return self.states == other.states and self.lts == other.lts
 *     @property
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_5props_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ecco/lrr/lts.pyx":563
 *     def __eq__ (Component self, Component other) :
 *         return self.states == other.states and self.lts == other.lts
 *     @property             # <<<<<<<<<<<<<<
 *     def props (Component self) :
 *         """an iterator over the graph and split properties
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_5props_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_5props_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_5props___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_5props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct____get__(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 563, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ecco_3lrr_3lts_9Component_5props_2generator, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_get, __pyx_mstate_global->__pyx_n_u_Component___get, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts); if (unlikely(!gen)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.props.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_5props_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *__pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_PySendResult __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("props", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield_from;
    case 2: goto __pyx_L5_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 563, __pyx_L1_error)
  }

  /* "ecco/lrr/lts.pyx":569
 *         Yields: pairs of `str, bool` or `str, setrel`
 *         """
 *         yield from self.graph_props.items()             # <<<<<<<<<<<<<<
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :
*/
  if (unlikely(__pyx_cur_scope->__pyx_v_self->graph_props == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 569, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_self->graph_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_1, &__pyx_r);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 == PYGEN_NEXT)) {
    __Pyx_GOTREF(__pyx_r);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 569, __pyx_L1_error)
  } else if (likely(__pyx_t_2 == PYGEN_RETURN)) {
    __Pyx_GOTREF(__pyx_r);
    __Pyx_DECREF(__pyx_r); __pyx_r = 0;
  } else {
    __Pyx_XGOTREF(__pyx_r);
    __PYX_ERR(0, 569, __pyx_L1_error)
  }

  /* "ecco/lrr/lts.pyx":570
 *         """
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()             # <<<<<<<<<<<<<<
 *     cpdef tuple props_row (Component self, bint alias=True) :
 *         cdef str p
*/
  if (unlikely(__pyx_cur_scope->__pyx_v_self->split_props == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 570, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_self->split_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_1, &__pyx_r);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 == PYGEN_NEXT)) {
    __Pyx_GOTREF(__pyx_r);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L5_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 570, __pyx_L1_error)
  } else if (likely(__pyx_t_2 == PYGEN_RETURN)) {
    __Pyx_GOTREF(__pyx_r);
    __Pyx_DECREF(__pyx_r); __pyx_r = 0;
  } else {
    __Pyx_XGOTREF(__pyx_r);
    __PYX_ERR(0, 570, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ecco/lrr/lts.pyx":563
 *     def __eq__ (Component self, Component other) :
 *         return self.states == other.states and self.lts == other.lts
 *     @property             # <<<<<<<<<<<<<<
 *     def props (Component self) :
 *         """an iterator over the graph and split properties
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":571
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_17props_row(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_props_row(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row *__pyx_optional_args) {
  int __pyx_v_alias = ((int)1);
  PyObject *__pyx_v_p = 0;
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_v_r;
  PyObject *__pyx_v_props = 0;
  CYTHON_UNUSED enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_8genexpr1__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("props_row", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_alias = __pyx_optional_args->alias;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_props_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_17props_row)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_alias); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_6 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_2))) __PYX_ERR(0, 571, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":574
 *         cdef str p
 *         cdef setrel r
 *         cdef list props = [set() for r in setrel]             # <<<<<<<<<<<<<<
 *         for p, r in self.split_props.items() :
 *             if alias :
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_setrel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_7);
          ++__pyx_t_7;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7);
          #endif
          ++__pyx_t_7;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 574, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = ((enum __pyx_t_4ecco_3lrr_3lts_setrel)__Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_8genexpr1__pyx_v_r = __pyx_t_9;
      __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } /* exit inner scope */
  __pyx_v_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":575
 *         cdef setrel r
 *         cdef list props = [set() for r in setrel]
 *         for p, r in self.split_props.items() :             # <<<<<<<<<<<<<<
 *             if alias :
 *                 props[r].add(self.lts.alias.get(p, p))
*/
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_self->split_props == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 575, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_self->split_props, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_10), (&__pyx_t_11)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_10, &__pyx_t_7, &__pyx_t_4, &__pyx_t_2, NULL, __pyx_t_11);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_4))) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_t_9 = ((enum __pyx_t_4ecco_3lrr_3lts_setrel)__Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_v_r = __pyx_t_9;

    /* "ecco/lrr/lts.pyx":576
 *         cdef list props = [set() for r in setrel]
 *         for p, r in self.split_props.items() :
 *             if alias :             # <<<<<<<<<<<<<<
 *                 props[r].add(self.lts.alias.get(p, p))
 *             else :
*/
    if (__pyx_v_alias) {

      /* "ecco/lrr/lts.pyx":577
 *         for p, r in self.split_props.items() :
 *             if alias :
 *                 props[r].add(self.lts.alias.get(p, p))             # <<<<<<<<<<<<<<
 *             else :
 *                 props[r].add(p)
*/
      __pyx_t_5 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_props, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_t_3;
      __Pyx_INCREF(__pyx_t_4);
      if (unlikely(__pyx_v_self->lts->alias == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 577, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->lts->alias, __pyx_v_p, __pyx_v_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ecco/lrr/lts.pyx":576
 *         cdef list props = [set() for r in setrel]
 *         for p, r in self.split_props.items() :
 *             if alias :             # <<<<<<<<<<<<<<
 *                 props[r].add(self.lts.alias.get(p, p))
 *             else :
*/
      goto __pyx_L8;
    }

    /* "ecco/lrr/lts.pyx":579
 *                 props[r].add(self.lts.alias.get(p, p))
 *             else :
 *                 props[r].add(p)             # <<<<<<<<<<<<<<
 *         return tuple(map(frozenset, props))
 *     cdef void _update_prop (Component self, dict pdict, str prop, sdd states) :
*/
    /*else*/ {
      __pyx_t_5 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_props, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_3 = __pyx_t_4;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_p};
        __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":580
 *             else :
 *                 props[r].add(p)
 *         return tuple(map(frozenset, props))             # <<<<<<<<<<<<<<
 *     cdef void _update_prop (Component self, dict pdict, str prop, sdd states) :
 *         # update pdict[prop] with appropriate setrel to denote the relation of states
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_map);
  __pyx_t_4 = __pyx_builtin_map; 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)(&PyFrozenSet_Type)), __pyx_v_props};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":571
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.props_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_17props_row(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_17props_row = {"props_row", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_17props_row, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_17props_row(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_alias;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("props_row (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 571, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 571, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "props_row", 0) < 0) __PYX_ERR(0, 571, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 571, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_alias = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_alias == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    } else {
      __pyx_v_alias = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("props_row", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 571, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.props_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_16props_row(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_alias);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_16props_row(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_v_alias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("props_row", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.alias = __pyx_v_alias;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_Component->props_row(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.props_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":581
 *                 props[r].add(p)
 *         return tuple(map(frozenset, props))
 *     cdef void _update_prop (Component self, dict pdict, str prop, sdd states) :             # <<<<<<<<<<<<<<
 *         # update pdict[prop] with appropriate setrel to denote the relation of states
 *         # wrt the prop evaluated as a set of states on the underlying LTS
*/

static void __pyx_f_4ecco_3lrr_3lts_9Component__update_prop(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_pdict, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  struct __pyx_obj_3ddd_sdd *__pyx_v_pstates = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_prop", 0);

  /* "ecco/lrr/lts.pyx":584
 *         # update pdict[prop] with appropriate setrel to denote the relation of states
 *         # wrt the prop evaluated as a set of states on the underlying LTS
 *         cdef sdd pstates = self.lts.props[prop]             # <<<<<<<<<<<<<<
 *         if not pstates :
 *             pdict[prop] = setrel.HASNO
*/
  if (unlikely(__pyx_v_self->lts->props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 584, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->lts->props, __pyx_v_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 584, __pyx_L1_error)
  __pyx_v_pstates = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":585
 *         # wrt the prop evaluated as a set of states on the underlying LTS
 *         cdef sdd pstates = self.lts.props[prop]
 *         if not pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.HASNO
 *         elif states == pstates :
*/
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_pstates)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "ecco/lrr/lts.pyx":586
 *         cdef sdd pstates = self.lts.props[prop]
 *         if not pstates :
 *             pdict[prop] = setrel.HASNO             # <<<<<<<<<<<<<<
 *         elif states == pstates :
 *             pdict[prop] = setrel.EQUALS
*/
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_HASNO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 586, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":585
 *         # wrt the prop evaluated as a set of states on the underlying LTS
 *         cdef sdd pstates = self.lts.props[prop]
 *         if not pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.HASNO
 *         elif states == pstates :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":587
 *         if not pstates :
 *             pdict[prop] = setrel.HASNO
 *         elif states == pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.EQUALS
 *         elif states < pstates :
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_pstates), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ecco/lrr/lts.pyx":588
 *             pdict[prop] = setrel.HASNO
 *         elif states == pstates :
 *             pdict[prop] = setrel.EQUALS             # <<<<<<<<<<<<<<
 *         elif states < pstates :
 *             pdict[prop] = setrel.ISIN
*/
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_EQUALS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 588, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":587
 *         if not pstates :
 *             pdict[prop] = setrel.HASNO
 *         elif states == pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.EQUALS
 *         elif states < pstates :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":589
 *         elif states == pstates :
 *             pdict[prop] = setrel.EQUALS
 *         elif states < pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.ISIN
 *         elif states > pstates :
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_pstates), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ecco/lrr/lts.pyx":590
 *             pdict[prop] = setrel.EQUALS
 *         elif states < pstates :
 *             pdict[prop] = setrel.ISIN             # <<<<<<<<<<<<<<
 *         elif states > pstates :
 *             pdict[prop] = setrel.CONTAINS
*/
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_ISIN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 590, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":589
 *         elif states == pstates :
 *             pdict[prop] = setrel.EQUALS
 *         elif states < pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.ISIN
 *         elif states > pstates :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":591
 *         elif states < pstates :
 *             pdict[prop] = setrel.ISIN
 *         elif states > pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.CONTAINS
 *         elif states & pstates :
*/
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_pstates), Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ecco/lrr/lts.pyx":592
 *             pdict[prop] = setrel.ISIN
 *         elif states > pstates :
 *             pdict[prop] = setrel.CONTAINS             # <<<<<<<<<<<<<<
 *         elif states & pstates :
 *             pdict[prop] = setrel.HAS
*/
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_CONTAINS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 592, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":591
 *         elif states < pstates :
 *             pdict[prop] = setrel.ISIN
 *         elif states > pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.CONTAINS
 *         elif states & pstates :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":593
 *         elif states > pstates :
 *             pdict[prop] = setrel.CONTAINS
 *         elif states & pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.HAS
 *         else :
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_pstates)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "ecco/lrr/lts.pyx":594
 *             pdict[prop] = setrel.CONTAINS
 *         elif states & pstates :
 *             pdict[prop] = setrel.HAS             # <<<<<<<<<<<<<<
 *         else :
 *             pdict[prop] = setrel.HASNO
*/
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_HAS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 594, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":593
 *         elif states > pstates :
 *             pdict[prop] = setrel.CONTAINS
 *         elif states & pstates :             # <<<<<<<<<<<<<<
 *             pdict[prop] = setrel.HAS
 *         else :
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":596
 *             pdict[prop] = setrel.HAS
 *         else :
 *             pdict[prop] = setrel.HASNO             # <<<<<<<<<<<<<<
 *     cpdef void tag (Component self, str name) :
 *         """add a dummy property to component
*/
  /*else*/ {
    __pyx_t_1 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_HASNO); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_pdict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 596, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_pdict, __pyx_v_prop, __pyx_t_1) < 0))) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "ecco/lrr/lts.pyx":581
 *                 props[r].add(p)
 *         return tuple(map(frozenset, props))
 *     cdef void _update_prop (Component self, dict pdict, str prop, sdd states) :             # <<<<<<<<<<<<<<
 *         # update pdict[prop] with appropriate setrel to denote the relation of states
 *         # wrt the prop evaluated as a set of states on the underlying LTS
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._update_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pstates);
  __Pyx_RefNannyFinishContext();
}

/* "ecco/lrr/lts.pyx":597
 *         else :
 *             pdict[prop] = setrel.HASNO
 *     cpdef void tag (Component self, str name) :             # <<<<<<<<<<<<<<
 *         """add a dummy property to component
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_19tag(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_4ecco_3lrr_3lts_9Component_tag(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_19tag)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_name};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":606
 *          - `name` (`str`): the tag name
 *         """
 *         self.lts.add_prop(name, self.states, union=True)             # <<<<<<<<<<<<<<
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.__pyx_union = 1;
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->lts->__pyx_vtab)->add_prop(__pyx_v_self->lts, __pyx_v_name, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1), 0, &__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":607
 *         """
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS             # <<<<<<<<<<<<<<
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :
 *         """check a split property on component
*/
  __pyx_t_2 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_e_4ecco_3lrr_3lts_EQUALS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_self->split_props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 607, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_self->split_props, __pyx_v_name, __pyx_t_2) < 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":597
 *         else :
 *             pdict[prop] = setrel.HASNO
 *     cpdef void tag (Component self, str name) :             # <<<<<<<<<<<<<<
 *         """add a dummy property to component
 * 
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_19tag(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_18tag, "add a dummy property to component\n\n        Tag `name` is a dummy property whose states are those of the `Component`.\n        LTS and component's properties are updated accordingly\n\n        Parameters:\n         - `name` (`str`): the tag name\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_19tag = {"tag", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_19tag, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_18tag};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_19tag(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 597, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 597, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "tag", 0) < 0) __PYX_ERR(0, 597, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("tag", 1, 1, 1, i); __PYX_ERR(0, 597, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 597, __pyx_L3_error)
    }
    __pyx_v_name = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tag", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 597, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_18tag(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_18tag(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_4ecco_3lrr_3lts_9Component_tag(__pyx_v_self, __pyx_v_name, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":608
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """check a split property on component
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_21check(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_f_4ecco_3lrr_3lts_9Component_check(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check *__pyx_optional_args) {
  PyObject *__pyx_v_alias = ((PyObject*)__pyx_mstate_global->__pyx_kp_u_);
  CYTHON_UNUSED struct __pyx_obj_3ddd_sdd *__pyx_v_pstates = 0;
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_alias = __pyx_optional_args->alias;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_check); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_21check)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_prop, ((PyObject *)__pyx_v_states), __pyx_v_alias};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (4-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = ((enum __pyx_t_4ecco_3lrr_3lts_setrel)__Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":618
 *         Returns: a `setrel` indicating how the component relates to `states`
 *         """
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)             # <<<<<<<<<<<<<<
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->lts);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_v_prop, ((PyObject *)__pyx_v_states)};
    __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_4, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_add_prop, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_v_pstates = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":619
 *         """
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)
 *         self._update_prop(self.split_props, prop, self.states)             # <<<<<<<<<<<<<<
 *         return self.split_props[prop]
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :
*/
  __pyx_t_1 = __pyx_v_self->split_props;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_4);
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_update_prop(__pyx_v_self, ((PyObject*)__pyx_t_1), __pyx_v_prop, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":620
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]             # <<<<<<<<<<<<<<
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :
 *         """split component wrt a property
*/
  if (unlikely(__pyx_v_self->split_props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 620, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->split_props, __pyx_v_prop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = ((enum __pyx_t_4ecco_3lrr_3lts_setrel)__Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":608
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """check a split property on component
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum __pyx_t_4ecco_3lrr_3lts_setrel) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pstates);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_21check(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_20check, "check a split property on component\n\n        LTS and component's properties are updated accordingly\n\n        Parameters:\n         - `prop` (`str`): the textual property\n         - `states` (`ddd.sdd`): the corresponding set of states\n        Returns: a `setrel` indicating how the component relates to `states`\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_21check = {"check", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_21check, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_20check};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_21check(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prop = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_prop,&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 608, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 608, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 608, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 608, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "check", 0) < 0) __PYX_ERR(0, 608, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("check", 0, 2, 3, i); __PYX_ERR(0, 608, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 608, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 608, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 608, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
    }
    __pyx_v_prop = ((PyObject*)values[0]);
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[1]);
    __pyx_v_alias = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 608, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prop), (&PyUnicode_Type), 1, "prop", 1))) __PYX_ERR(0, 608, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 608, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_20check(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_prop, __pyx_v_states, __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_20check(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_alias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_t_1;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.alias = __pyx_v_alias;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_Component->check(__pyx_v_self, __pyx_v_prop, __pyx_v_states, 1, &__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_t_3 = __Pyx_Enum_4ecco_3lrr_3lts_enum__dunderpyx_t_4ecco_3lrr_3lts_setrel_to_py(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":621
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """split component wrt a property
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_23split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split *__pyx_optional_args) {
  PyObject *__pyx_v_alias = ((PyObject*)__pyx_mstate_global->__pyx_kp_u_);
  struct __pyx_obj_3ddd_sdd *__pyx_v_pstates = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_intr = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_diff = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("split", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_alias = __pyx_optional_args->alias;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_23split)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_prop, ((PyObject *)__pyx_v_states), __pyx_v_alias};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (4-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_2))) __PYX_ERR(0, 621, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":634
 *         otherwise a `Component` instance is returned
 *         """
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)             # <<<<<<<<<<<<<<
 *         cdef sdd intr = self.states & pstates
 *         cdef sdd diff = self.states - pstates
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->lts);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_v_prop, ((PyObject *)__pyx_v_states)};
    __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_4, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_add_prop, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_v_pstates = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":635
 *         """
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)
 *         cdef sdd intr = self.states & pstates             # <<<<<<<<<<<<<<
 *         cdef sdd diff = self.states - pstates
 *         self._update_prop(self.split_props, prop, self.states)
*/
  __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_self->states), ((PyObject *)__pyx_v_pstates)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 635, __pyx_L1_error)
  __pyx_v_intr = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":636
 *         cdef sdd pstates = self.lts.add_prop(prop, states, alias=alias)
 *         cdef sdd intr = self.states & pstates
 *         cdef sdd diff = self.states - pstates             # <<<<<<<<<<<<<<
 *         self._update_prop(self.split_props, prop, self.states)
 *         if intr and diff :
*/
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_self->states), ((PyObject *)__pyx_v_pstates)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_v_diff = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":637
 *         cdef sdd intr = self.states & pstates
 *         cdef sdd diff = self.states - pstates
 *         self._update_prop(self.split_props, prop, self.states)             # <<<<<<<<<<<<<<
 *         if intr and diff :
 *             return self._make_split(intr), self._make_split(diff)
*/
  __pyx_t_1 = __pyx_v_self->split_props;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_4);
  ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_update_prop(__pyx_v_self, ((PyObject*)__pyx_t_1), __pyx_v_prop, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":638
 *         cdef sdd diff = self.states - pstates
 *         self._update_prop(self.split_props, prop, self.states)
 *         if intr and diff :             # <<<<<<<<<<<<<<
 *             return self._make_split(intr), self._make_split(diff)
 *         elif intr :
*/
  __pyx_t_7 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_intr)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 638, __pyx_L1_error)
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_diff)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":639
 *         self._update_prop(self.split_props, prop, self.states)
 *         if intr and diff :
 *             return self._make_split(intr), self._make_split(diff)             # <<<<<<<<<<<<<<
 *         elif intr :
 *             return self, None
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_intr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_diff)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 639, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 639, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":638
 *         cdef sdd diff = self.states - pstates
 *         self._update_prop(self.split_props, prop, self.states)
 *         if intr and diff :             # <<<<<<<<<<<<<<
 *             return self._make_split(intr), self._make_split(diff)
 *         elif intr :
*/
  }

  /* "ecco/lrr/lts.pyx":640
 *         if intr and diff :
 *             return self._make_split(intr), self._make_split(diff)
 *         elif intr :             # <<<<<<<<<<<<<<
 *             return self, None
 *         else :
*/
  __pyx_t_6 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_intr)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 640, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":641
 *             return self._make_split(intr), self._make_split(diff)
 *         elif intr :
 *             return self, None             # <<<<<<<<<<<<<<
 *         else :
 *             return None, self
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self)) != (0)) __PYX_ERR(0, 641, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None) != (0)) __PYX_ERR(0, 641, __pyx_L1_error);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":640
 *         if intr and diff :
 *             return self._make_split(intr), self._make_split(diff)
 *         elif intr :             # <<<<<<<<<<<<<<
 *             return self, None
 *         else :
*/
  }

  /* "ecco/lrr/lts.pyx":643
 *             return self, None
 *         else :
 *             return None, self             # <<<<<<<<<<<<<<
 *     cdef Component _make_split (Component self, sdd part) :
 *         # updates the component's properties wrt a part of its states and
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, Py_None) != (0)) __PYX_ERR(0, 643, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self)) != (0)) __PYX_ERR(0, 643, __pyx_L1_error);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "ecco/lrr/lts.pyx":621
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """split component wrt a property
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pstates);
  __Pyx_XDECREF((PyObject *)__pyx_v_intr);
  __Pyx_XDECREF((PyObject *)__pyx_v_diff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_23split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_22split, "split component wrt a property\n\n        LTS and component's properties are updated accordingly\n\n        Parameters:\n         - `prop` (`str`): the textual property\n         - `states` (`ddd.sdd`): the corresponding set of states\n        Returns: a pairs `intr, diff` corresponding respectively to the\n        intersection and difference between the component's and the property's\n        states. If one is empty then `None` is returned,\n        otherwise a `Component` instance is returned\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_23split = {"split", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_23split, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_22split};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_23split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prop = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_prop,&__pyx_mstate_global->__pyx_n_u_states,&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 621, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "split", 0) < 0) __PYX_ERR(0, 621, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, i); __PYX_ERR(0, 621, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 621, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 621, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_kp_u_));
    }
    __pyx_v_prop = ((PyObject*)values[0]);
    __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)values[1]);
    __pyx_v_alias = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 621, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prop), (&PyUnicode_Type), 1, "prop", 1))) __PYX_ERR(0, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_states), __pyx_mstate_global->__pyx_ptype_3ddd_sdd, 1, "states", 0))) __PYX_ERR(0, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 621, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_22split(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_prop, __pyx_v_states, __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_22split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_3ddd_sdd *__pyx_v_states, PyObject *__pyx_v_alias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("split", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.alias = __pyx_v_alias;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_Component->split(__pyx_v_self, __pyx_v_prop, __pyx_v_states, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":644
 *         else :
 *             return None, self
 *     cdef Component _make_split (Component self, sdd part) :             # <<<<<<<<<<<<<<
 *         # updates the component's properties wrt a part of its states and
 *         # returns a new Component for these states
*/

static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__make_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_part) {
  PyObject *__pyx_v_graph_props = 0;
  PyObject *__pyx_v_split_props = 0;
  PyObject *__pyx_v_p = 0;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_split", 0);

  /* "ecco/lrr/lts.pyx":647
 *         # updates the component's properties wrt a part of its states and
 *         # returns a new Component for these states
 *         cdef dict graph_props = self._copy_graph_props(part)             # <<<<<<<<<<<<<<
 *         cdef dict split_props = {}
 *         cdef str p
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_copy_graph_props(__pyx_v_self, __pyx_v_part); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_graph_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":648
 *         # returns a new Component for these states
 *         cdef dict graph_props = self._copy_graph_props(part)
 *         cdef dict split_props = {}             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef sdd s
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_split_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":651
 *         cdef str p
 *         cdef sdd s
 *         for p in self.split_props :             # <<<<<<<<<<<<<<
 *             self._update_prop(split_props, p, part)
 *         return Component(self.lts, part, graph_props, split_props)
*/
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->split_props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 651, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->split_props, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "ecco/lrr/lts.pyx":652
 *         cdef sdd s
 *         for p in self.split_props :
 *             self._update_prop(split_props, p, part)             # <<<<<<<<<<<<<<
 *         return Component(self.lts, part, graph_props, split_props)
 *     cdef dict _copy_graph_props (Component self, sdd states) :
*/
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_update_prop(__pyx_v_self, __pyx_v_split_props, __pyx_v_p, __pyx_v_part); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":653
 *         for p in self.split_props :
 *             self._update_prop(split_props, p, part)
 *         return Component(self.lts, part, graph_props, split_props)             # <<<<<<<<<<<<<<
 *     cdef dict _copy_graph_props (Component self, sdd states) :
 *         # return an updated graph_props for a subset of states by querying the LTS
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component);
  __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component); 
  __pyx_t_8 = 1;
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_5, ((PyObject *)__pyx_v_self->lts), ((PyObject *)__pyx_v_part), __pyx_v_graph_props, __pyx_v_split_props};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (5-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":644
 *         else :
 *             return None, self
 *     cdef Component _make_split (Component self, sdd part) :             # <<<<<<<<<<<<<<
 *         # updates the component's properties wrt a part of its states and
 *         # returns a new Component for these states
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._make_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_graph_props);
  __Pyx_XDECREF(__pyx_v_split_props);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":654
 *             self._update_prop(split_props, p, part)
 *         return Component(self.lts, part, graph_props, split_props)
 *     cdef dict _copy_graph_props (Component self, sdd states) :             # <<<<<<<<<<<<<<
 *         # return an updated graph_props for a subset of states by querying the LTS
 *         cdef str p
*/

static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component__copy_graph_props(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_states) {
  PyObject *__pyx_8genexpr2__pyx_v_p = NULL;
  CYTHON_UNUSED int __pyx_8genexpr2__pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_copy_graph_props", 0);

  /* "ecco/lrr/lts.pyx":658
 *         cdef str p
 *         cdef bint b
 *         return {p : getattr(self.lts, p)(states)             # <<<<<<<<<<<<<<
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :
*/
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "ecco/lrr/lts.pyx":659
 *         cdef bint b
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}             # <<<<<<<<<<<<<<
 *     def merge (Component self, Component first, *rest) :
 *         """merge a component with others
*/
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->graph_props == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 659, __pyx_L5_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->graph_props, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 659, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 659, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_6))) __PYX_ERR(0, 659, __pyx_L5_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_p, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __pyx_8genexpr2__pyx_v_b = __pyx_t_9;

      /* "ecco/lrr/lts.pyx":658
 *         cdef str p
 *         cdef bint b
 *         return {p : getattr(self.lts, p)(states)             # <<<<<<<<<<<<<<
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :
*/
      __pyx_t_6 = NULL;
      __pyx_t_10 = ((PyObject *)__pyx_v_self->lts);
      __Pyx_INCREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_GetAttr(__pyx_t_10, __pyx_8genexpr2__pyx_v_p); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
        assert(__pyx_t_6);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_11, __pyx__function);
        __pyx_t_12 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v_states)};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
      }
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr2__pyx_v_p, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 658, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p); __pyx_8genexpr2__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p); __pyx_8genexpr2__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":654
 *             self._update_prop(split_props, p, part)
 *         return Component(self.lts, part, graph_props, split_props)
 *     cdef dict _copy_graph_props (Component self, sdd states) :             # <<<<<<<<<<<<<<
 *         # return an updated graph_props for a subset of states by querying the LTS
 *         cdef str p
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._copy_graph_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":660
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :             # <<<<<<<<<<<<<<
 *         """merge a component with others
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_25merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_24merge, "merge a component with others\n\n        Parameters:\n         - `first`, ...: a series of at least one `Component` to be merged\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_25merge = {"merge", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_25merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_24merge};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_25merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_first = 0;
  PyObject *__pyx_v_rest = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_rest = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_rest)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_rest);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_first,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 660, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        default:
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 660, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, used_pos_args, __pyx_kwds_len, "merge", 0) < 0) __PYX_ERR(0, 660, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("merge", 0, 1, 1, i); __PYX_ERR(0, 660, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 660, __pyx_L3_error)
    }
    __pyx_v_first = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 660, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_DECREF(__pyx_v_rest); __pyx_v_rest = 0;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, 1, "first", 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_24merge(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_first, __pyx_v_rest);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_DECREF(__pyx_v_rest);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_5merge_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ecco/lrr/lts.pyx":667
 *         """
 *         cdef Component oth
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :             # <<<<<<<<<<<<<<
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
*/

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_5merge_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 667, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ecco_3lrr_3lts_9Component_5merge_2generator3, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_merge_locals_genexpr, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts); if (unlikely(!gen)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.merge.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_5merge_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 667, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 667, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
    #endif
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_oth);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_oth, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 667, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_oth, __pyx_mstate_global->__pyx_n_u_lts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->lts), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (!__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":660
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :             # <<<<<<<<<<<<<<
 *         """merge a component with others
 * 
*/

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_24merge(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_first, PyObject *__pyx_v_rest) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *__pyx_cur_scope;
  PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_5merge_2generator3 = 0;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_8genexpr4__pyx_v_oth = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 660, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ecco/lrr/lts.pyx":667
 *         """
 *         cdef Component oth
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :             # <<<<<<<<<<<<<<
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
*/
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_cur_scope->__pyx_v_self->lts), ((PyObject *)__pyx_v_first->lts), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __pyx_pf_4ecco_3lrr_3lts_9Component_5merge_genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_rest); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Generator_GetInlinedResult(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (!__pyx_t_3);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ecco/lrr/lts.pyx":668
 *         cdef Component oth
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :
 *             raise ValueError("components do not belong to the same LTS")             # <<<<<<<<<<<<<<
 *         return self._merge([first] + [<Component>oth for oth in rest])
 *     def __or__ (self, other) :
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_6 = __pyx_builtin_ValueError; 
    __pyx_t_7 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_components_do_not_belong_to_the};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 668, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":667
 *         """
 *         cdef Component oth
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :             # <<<<<<<<<<<<<<
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
*/
  }

  /* "ecco/lrr/lts.pyx":669
 *         if self.lts != first.lts or not all(self.lts == oth.lts for oth in rest) :
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])             # <<<<<<<<<<<<<<
 *     def __or__ (self, other) :
 *         "equivalent to `self.merge(other)`"
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF((PyObject *)__pyx_v_first);
  __Pyx_GIVEREF((PyObject *)__pyx_v_first);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_first)) != (0)) __PYX_ERR(0, 669, __pyx_L1_error);
  { /* enter inner scope */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __pyx_v_rest; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_8 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 669, __pyx_L8_error)
        #endif
        if (__pyx_t_8 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8));
      #else
      __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_8);
      #endif
      ++__pyx_t_8;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 669, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component))))) __PYX_ERR(0, 669, __pyx_L8_error)
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_oth, ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_9));
      __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_8genexpr4__pyx_v_oth)))) __PYX_ERR(0, 669, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr4__pyx_v_oth); __pyx_8genexpr4__pyx_v_oth = 0;
    goto __pyx_L12_exit_scope;
    __pyx_L8_error:;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr4__pyx_v_oth); __pyx_8genexpr4__pyx_v_oth = 0;
    goto __pyx_L1_error;
    __pyx_L12_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_merge(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_2))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":660
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :             # <<<<<<<<<<<<<<
 *         """merge a component with others
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_4ecco_3lrr_3lts_9Component_5merge_2generator3);
  __Pyx_XDECREF((PyObject *)__pyx_8genexpr4__pyx_v_oth);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":670
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
 *     def __or__ (self, other) :             # <<<<<<<<<<<<<<
 *         "equivalent to `self.merge(other)`"
 *         return self.merge(other)
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_27__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_26__or__, "equivalent to `self.merge(other)`");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_26__or__;
#endif
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_27__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_26__or__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_26__or__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "ecco/lrr/lts.pyx":672
 *     def __or__ (self, other) :
 *         "equivalent to `self.merge(other)`"
 *         return self.merge(other)             # <<<<<<<<<<<<<<
 *     cdef Component _merge (Component self, list others) :
 *         # perform the actual merge
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_merge, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":670
 *             raise ValueError("components do not belong to the same LTS")
 *         return self._merge([first] + [<Component>oth for oth in rest])
 *     def __or__ (self, other) :             # <<<<<<<<<<<<<<
 *         "equivalent to `self.merge(other)`"
 *         return self.merge(other)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":673
 *         "equivalent to `self.merge(other)`"
 *         return self.merge(other)
 *     cdef Component _merge (Component self, list others) :             # <<<<<<<<<<<<<<
 *         # perform the actual merge
 *         cdef Component oth
*/

static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__merge(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_others) {
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_oth = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_states = 0;
  PyObject *__pyx_v_graph_props = 0;
  PyObject *__pyx_v_split_props = 0;
  PyObject *__pyx_v_props = 0;
  PyObject *__pyx_v_p = NULL;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_merge", 0);

  /* "ecco/lrr/lts.pyx":676
 *         # perform the actual merge
 *         cdef Component oth
 *         cdef sdd states = self.states             # <<<<<<<<<<<<<<
 *         cdef dict graph_props = self.lts.graph_props(states)
 *         cdef dict split_props = {}
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_states = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":677
 *         cdef Component oth
 *         cdef sdd states = self.states
 *         cdef dict graph_props = self.lts.graph_props(states)             # <<<<<<<<<<<<<<
 *         cdef dict split_props = {}
 *         cdef set props = set(self.split_props)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->lts->__pyx_vtab)->graph_props(__pyx_v_self->lts, __pyx_v_states, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_graph_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":678
 *         cdef sdd states = self.states
 *         cdef dict graph_props = self.lts.graph_props(states)
 *         cdef dict split_props = {}             # <<<<<<<<<<<<<<
 *         cdef set props = set(self.split_props)
 *         for oth in others :
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_split_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":679
 *         cdef dict graph_props = self.lts.graph_props(states)
 *         cdef dict split_props = {}
 *         cdef set props = set(self.split_props)             # <<<<<<<<<<<<<<
 *         for oth in others :
 *             states |= oth.states
*/
  __pyx_t_1 = PySet_New(__pyx_v_self->split_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_props = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":680
 *         cdef dict split_props = {}
 *         cdef set props = set(self.split_props)
 *         for oth in others :             # <<<<<<<<<<<<<<
 *             states |= oth.states
 *             props.update(oth.split_props)
*/
  if (unlikely(__pyx_v_others == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_others; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 680, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component))))) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_oth, ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":681
 *         cdef set props = set(self.split_props)
 *         for oth in others :
 *             states |= oth.states             # <<<<<<<<<<<<<<
 *             props.update(oth.split_props)
 *         for p in props :
*/
    __pyx_t_3 = PyNumber_InPlaceOr(((PyObject *)__pyx_v_states), ((PyObject *)__pyx_v_oth->states)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_states, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":682
 *         for oth in others :
 *             states |= oth.states
 *             props.update(oth.split_props)             # <<<<<<<<<<<<<<
 *         for p in props :
 *             self._update_prop(split_props, p, states)
*/
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PySet_Type__update, __pyx_v_props, __pyx_v_oth->split_props); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":680
 *         cdef dict split_props = {}
 *         cdef set props = set(self.split_props)
 *         for oth in others :             # <<<<<<<<<<<<<<
 *             states |= oth.states
 *             props.update(oth.split_props)
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":683
 *             states |= oth.states
 *             props.update(oth.split_props)
 *         for p in props :             # <<<<<<<<<<<<<<
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
*/
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_set_iterator(__pyx_v_props, 1, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_4, &__pyx_t_2, &__pyx_t_3, __pyx_t_5);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ecco/lrr/lts.pyx":684
 *             props.update(oth.split_props)
 *         for p in props :
 *             self._update_prop(split_props, p, states)             # <<<<<<<<<<<<<<
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
 *     def succ (Component self, *others) :
*/
    if (!(likely(PyUnicode_CheckExact(__pyx_v_p))||((__pyx_v_p) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_v_p))) __PYX_ERR(0, 684, __pyx_L1_error)
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_update_prop(__pyx_v_self, __pyx_v_split_props, ((PyObject*)__pyx_v_p), __pyx_v_states); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":685
 *         for p in props :
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)             # <<<<<<<<<<<<<<
 *     def succ (Component self, *others) :
 *         """computes the transitions from a component to others
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component);
  __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component); 
  __pyx_t_8 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_3, ((PyObject *)__pyx_v_self->lts), ((PyObject *)__pyx_v_states)};
    __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_gp, __pyx_v_graph_props, __pyx_t_9, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_sp, __pyx_v_split_props, __pyx_t_9, __pyx_callargs+3, 1) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_7, __pyx_callargs+__pyx_t_8, (3-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":673
 *         "equivalent to `self.merge(other)`"
 *         return self.merge(other)
 *     cdef Component _merge (Component self, list others) :             # <<<<<<<<<<<<<<
 *         # perform the actual merge
 *         cdef Component oth
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_oth);
  __Pyx_XDECREF((PyObject *)__pyx_v_states);
  __Pyx_XDECREF(__pyx_v_graph_props);
  __Pyx_XDECREF(__pyx_v_split_props);
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_30generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ecco/lrr/lts.pyx":686
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
 *     def succ (Component self, *others) :             # <<<<<<<<<<<<<<
 *         """computes the transitions from a component to others
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_29succ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_28succ, "computes the transitions from a component to others\n\n        Parameters:\n         - `others`, ...: a series of candidate successor components\n        Yields: pairs `trans, comp` where transition `trans` allows to reach `compo`\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_29succ = {"succ", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_29succ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_28succ};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_29succ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_others = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("succ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("succ", __pyx_kwds); return NULL;}
  __Pyx_INCREF(__pyx_args);
  __pyx_v_others = __pyx_args;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_28succ(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_others);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_others);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_28succ(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_others) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("succ", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_3_succ(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 686, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_others = __pyx_v_others;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_others);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_others);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ecco_3lrr_3lts_9Component_30generator1, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_succ, __pyx_mstate_global->__pyx_n_u_Component_succ, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts); if (unlikely(!gen)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.succ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_30generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *__pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  size_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("succ", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 686, __pyx_L1_error)
  }

  /* "ecco/lrr/lts.pyx":696
 *         cdef shom h
 *         cdef Component c
 *         cdef list s = []             # <<<<<<<<<<<<<<
 *         for t, h in self.lts.tsucc.items() :
 *             for c in others :
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_s = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":697
 *         cdef Component c
 *         cdef list s = []
 *         for t, h in self.lts.tsucc.items() :             # <<<<<<<<<<<<<<
 *             for c in others :
 *                 if self.states != c.states and h(self.states) & c.states :
*/
  __pyx_t_2 = 0;
  if (unlikely(__pyx_cur_scope->__pyx_v_self->lts->tsucc == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 697, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_self->lts->tsucc, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 697, __pyx_L1_error)
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_3ddd_shom))))) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_t);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_t, ((PyObject*)__pyx_t_5));
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF((PyObject *)__pyx_cur_scope->__pyx_v_h);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_h, ((struct __pyx_obj_3ddd_shom *)__pyx_t_6));
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ecco/lrr/lts.pyx":698
 *         cdef list s = []
 *         for t, h in self.lts.tsucc.items() :
 *             for c in others :             # <<<<<<<<<<<<<<
 *                 if self.states != c.states and h(self.states) & c.states :
 *                     yield t, c
*/
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_others; __Pyx_INCREF(__pyx_t_6);
    __pyx_t_8 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 698, __pyx_L1_error)
        #endif
        if (__pyx_t_8 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8));
      #else
      __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_8);
      #endif
      ++__pyx_t_8;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component))))) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_XGOTREF((PyObject *)__pyx_cur_scope->__pyx_v_c);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_5));
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "ecco/lrr/lts.pyx":699
 *         for t, h in self.lts.tsucc.items() :
 *             for c in others :
 *                 if self.states != c.states and h(self.states) & c.states :             # <<<<<<<<<<<<<<
 *                     yield t, c
 *         return s
*/
      __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_cur_scope->__pyx_v_self->states), ((PyObject *)__pyx_cur_scope->__pyx_v_c->states), Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_11 = NULL;
      __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_h);
      __pyx_t_12 = ((PyObject *)__pyx_cur_scope->__pyx_v_h); 
      __pyx_t_13 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        assert(__pyx_t_11);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_12, __pyx__function);
        __pyx_t_13 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_cur_scope->__pyx_v_self->states)};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __pyx_t_12 = PyNumber_And(__pyx_t_5, ((PyObject *)__pyx_cur_scope->__pyx_v_c->states)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_9) {

        /* "ecco/lrr/lts.pyx":700
 *             for c in others :
 *                 if self.states != c.states and h(self.states) & c.states :
 *                     yield t, c             # <<<<<<<<<<<<<<
 *         return s
 *     def explicit (Component self) :
*/
        __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_t);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_t);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_cur_scope->__pyx_v_t) != (0)) __PYX_ERR(0, 700, __pyx_L1_error);
        __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_c);
        __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_c);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_c)) != (0)) __PYX_ERR(0, 700, __pyx_L1_error);
        __pyx_r = __pyx_t_12;
        __pyx_t_12 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
        __Pyx_XGIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
        __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
        __pyx_cur_scope->__pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_t_6);
        __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 700, __pyx_L1_error)

        /* "ecco/lrr/lts.pyx":699
 *         for t, h in self.lts.tsucc.items() :
 *             for c in others :
 *                 if self.states != c.states and h(self.states) & c.states :             # <<<<<<<<<<<<<<
 *                     yield t, c
 *         return s
*/
      }

      /* "ecco/lrr/lts.pyx":698
 *         cdef list s = []
 *         for t, h in self.lts.tsucc.items() :
 *             for c in others :             # <<<<<<<<<<<<<<
 *                 if self.states != c.states and h(self.states) & c.states :
 *                     yield t, c
*/
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":701
 *                 if self.states != c.states and h(self.states) & c.states :
 *                     yield t, c
 *         return s             # <<<<<<<<<<<<<<
 *     def explicit (Component self) :
 *         """splits a component into one-state sub-components
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __pyx_r = __pyx_cur_scope->__pyx_v_s;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ecco/lrr/lts.pyx":686
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
 *     def succ (Component self, *others) :             # <<<<<<<<<<<<<<
 *         """computes the transitions from a component to others
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("succ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_33generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ecco/lrr/lts.pyx":702
 *                     yield t, c
 *         return s
 *     def explicit (Component self) :             # <<<<<<<<<<<<<<
 *         """splits a component into one-state sub-components
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_32explicit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_31explicit, "splits a component into one-state sub-components\n\n        Yields: a series of `Component`\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_32explicit = {"explicit", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_32explicit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_31explicit};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_32explicit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("explicit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("explicit", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("explicit", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_31explicit(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_31explicit(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("explicit", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 702, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ecco_3lrr_3lts_9Component_33generator2, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_explicit, __pyx_mstate_global->__pyx_n_u_Component_explicit, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts); if (unlikely(!gen)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.explicit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ecco_3lrr_3lts_9Component_33generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *__pyx_cur_scope = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("explicit", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_yield;
    case 2: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 702, __pyx_L1_error)
  }

  /* "ecco/lrr/lts.pyx":708
 *         """
 *         cdef ddd state
 *         if len(self) == 1 :             # <<<<<<<<<<<<<<
 *             yield self
 *         else :
*/
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 708, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "ecco/lrr/lts.pyx":709
 *         cdef ddd state
 *         if len(self) == 1 :
 *             yield self             # <<<<<<<<<<<<<<
 *         else :
 *             for state in s2d(self.states).explicit() :
*/
    __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 709, __pyx_L1_error)

    /* "ecco/lrr/lts.pyx":708
 *         """
 *         cdef ddd state
 *         if len(self) == 1 :             # <<<<<<<<<<<<<<
 *             yield self
 *         else :
*/
    goto __pyx_L4;
  }

  /* "ecco/lrr/lts.pyx":711
 *             yield self
 *         else :
 *             for state in s2d(self.states).explicit() :             # <<<<<<<<<<<<<<
 *                 yield self._explicit(d2s(state))
 *     cdef Component _explicit (Component self, sdd state) :
*/
  /*else*/ {
    __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->states);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_5))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_explicit, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_1 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 711, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 711, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 711, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 711, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_XGOTREF((PyObject *)__pyx_cur_scope->__pyx_v_state);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_state, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_3));
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "ecco/lrr/lts.pyx":712
 *         else :
 *             for state in s2d(self.states).explicit() :
 *                 yield self._explicit(d2s(state))             # <<<<<<<<<<<<<<
 *     cdef Component _explicit (Component self, sdd state) :
 *         # performs the properties update of a singleton component and
*/
      __pyx_t_3 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_d2s(__pyx_cur_scope->__pyx_v_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_explicit(__pyx_cur_scope->__pyx_v_self, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __Pyx_XGIVEREF(__pyx_t_6);
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_t_6);
      __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 712, __pyx_L1_error)

      /* "ecco/lrr/lts.pyx":711
 *             yield self
 *         else :
 *             for state in s2d(self.states).explicit() :             # <<<<<<<<<<<<<<
 *                 yield self._explicit(d2s(state))
 *     cdef Component _explicit (Component self, sdd state) :
*/
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L4:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ecco/lrr/lts.pyx":702
 *                     yield t, c
 *         return s
 *     def explicit (Component self) :             # <<<<<<<<<<<<<<
 *         """splits a component into one-state sub-components
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("explicit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":713
 *             for state in s2d(self.states).explicit() :
 *                 yield self._explicit(d2s(state))
 *     cdef Component _explicit (Component self, sdd state) :             # <<<<<<<<<<<<<<
 *         # performs the properties update of a singleton component and
 *         # returns the corresponding `Component`
*/

static struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_f_4ecco_3lrr_3lts_9Component__explicit(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_sdd *__pyx_v_state) {
  PyObject *__pyx_v_gp = 0;
  PyObject *__pyx_v_sp = 0;
  PyObject *__pyx_v_p = 0;
  CYTHON_UNUSED enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_v_r;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  enum __pyx_t_4ecco_3lrr_3lts_setrel __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_explicit", 0);

  /* "ecco/lrr/lts.pyx":716
 *         # performs the properties update of a singleton component and
 *         # returns the corresponding `Component`
 *         cdef dict gp = {}             # <<<<<<<<<<<<<<
 *         cdef dict sp = {}
 *         cdef str p
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_gp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":717
 *         # returns the corresponding `Component`
 *         cdef dict gp = {}
 *         cdef dict sp = {}             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":721
 *         cdef setrel r
 *         cdef sdd pstates
 *         for p in self.graph_props :             # <<<<<<<<<<<<<<
 *             gp[p] = getattr(self.lts, p)(state)
 *         for p, r in self.split_props.items() :
*/
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->graph_props == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 721, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->graph_props, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "ecco/lrr/lts.pyx":722
 *         cdef sdd pstates
 *         for p in self.graph_props :
 *             gp[p] = getattr(self.lts, p)(state)             # <<<<<<<<<<<<<<
 *         for p, r in self.split_props.items() :
 *             self._update_prop(sp, p, state)
*/
    __pyx_t_7 = NULL;
    __pyx_t_8 = ((PyObject *)__pyx_v_self->lts);
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_GetAttr(__pyx_t_8, __pyx_v_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_state)};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (unlikely((PyDict_SetItem(__pyx_v_gp, __pyx_v_p, __pyx_t_5) < 0))) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":723
 *         for p in self.graph_props :
 *             gp[p] = getattr(self.lts, p)(state)
 *         for p, r in self.split_props.items() :             # <<<<<<<<<<<<<<
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
*/
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_self->split_props == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 723, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->split_props, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_2), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_3, &__pyx_t_5, &__pyx_t_9, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_9);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_5))) __PYX_ERR(0, 723, __pyx_L1_error)
    __pyx_t_11 = ((enum __pyx_t_4ecco_3lrr_3lts_setrel)__Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __pyx_v_r = __pyx_t_11;

    /* "ecco/lrr/lts.pyx":724
 *             gp[p] = getattr(self.lts, p)(state)
 *         for p, r in self.split_props.items() :
 *             self._update_prop(sp, p, state)             # <<<<<<<<<<<<<<
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,
*/
    ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_update_prop(__pyx_v_self, __pyx_v_sp, __pyx_v_p, __pyx_v_state); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 724, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":725
 *         for p, r in self.split_props.items() :
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)             # <<<<<<<<<<<<<<
 *     cpdef tuple topo_split (Component self,
 *                             bint split_init=True,
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_9 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component); 
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_9, ((PyObject *)__pyx_v_self->lts), ((PyObject *)__pyx_v_state)};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_gp, __pyx_v_gp, __pyx_t_7, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_sp, __pyx_v_sp, __pyx_t_7, __pyx_callargs+3, 1) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":713
 *             for state in s2d(self.states).explicit() :
 *                 yield self._explicit(d2s(state))
 *     cdef Component _explicit (Component self, sdd state) :             # <<<<<<<<<<<<<<
 *         # performs the properties update of a singleton component and
 *         # returns the corresponding `Component`
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._explicit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gp);
  __Pyx_XDECREF(__pyx_v_sp);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_35topo_split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_topo_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split *__pyx_optional_args) {

  /* "ecco/lrr/lts.pyx":727
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,
 *                             bint split_init=True,             # <<<<<<<<<<<<<<
 *                             bint split_entries=True,
 *                             bint split_exits=True,
*/
  int __pyx_v_split_init = ((int)1);

  /* "ecco/lrr/lts.pyx":728
 *     cpdef tuple topo_split (Component self,
 *                             bint split_init=True,
 *                             bint split_entries=True,             # <<<<<<<<<<<<<<
 *                             bint split_exits=True,
 *                             bint split_hull=True,
*/
  int __pyx_v_split_entries = ((int)1);

  /* "ecco/lrr/lts.pyx":729
 *                             bint split_init=True,
 *                             bint split_entries=True,
 *                             bint split_exits=True,             # <<<<<<<<<<<<<<
 *                             bint split_hull=True,
 *                             bint split_dead=True) :
*/
  int __pyx_v_split_exits = ((int)1);

  /* "ecco/lrr/lts.pyx":730
 *                             bint split_entries=True,
 *                             bint split_exits=True,
 *                             bint split_hull=True,             # <<<<<<<<<<<<<<
 *                             bint split_dead=True) :
 *         """split a component into its topological parts
*/
  int __pyx_v_split_hull = ((int)1);

  /* "ecco/lrr/lts.pyx":731
 *                             bint split_exits=True,
 *                             bint split_hull=True,
 *                             bint split_dead=True) :             # <<<<<<<<<<<<<<
 *         """split a component into its topological parts
 * 
*/
  int __pyx_v_split_dead = ((int)1);
  struct __pyx_obj_3ddd_sdd *__pyx_v_rest = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_init = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_dead = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_entries = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_exits = 0;
  struct __pyx_obj_3ddd_sdd *__pyx_v_hull = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topo_split", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_split_init = __pyx_optional_args->split_init;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_split_entries = __pyx_optional_args->split_entries;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_split_exits = __pyx_optional_args->split_exits;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_split_hull = __pyx_optional_args->split_hull;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_split_dead = __pyx_optional_args->split_dead;
            }
          }
        }
      }
    }
  }

  /* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_topo_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_35topo_split)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_split_init); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_split_entries); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_split_exits); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_v_split_hull); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_split_dead); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_10 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[6] = {__pyx_t_3, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_10, (6-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 726, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_2))) __PYX_ERR(0, 726, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":757
 *         Each is returned as `None` if empty of a `Component` instance if non-empty
 *         """
 *         cdef sdd rest = self.states             # <<<<<<<<<<<<<<
 *         cdef sdd init, dead, entries, exits, hull
 *         if split_init :
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_rest = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":759
 *         cdef sdd rest = self.states
 *         cdef sdd init, dead, entries, exits, hull
 *         if split_init :             # <<<<<<<<<<<<<<
 *             init = rest & self.lts.init
 *             rest -= init
*/
  if (__pyx_v_split_init) {

    /* "ecco/lrr/lts.pyx":760
 *         cdef sdd init, dead, entries, exits, hull
 *         if split_init :
 *             init = rest & self.lts.init             # <<<<<<<<<<<<<<
 *             rest -= init
 *         else :
*/
    __pyx_t_1 = PyNumber_And(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_self->lts->init)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 760, __pyx_L1_error)
    __pyx_v_init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":761
 *         if split_init :
 *             init = rest & self.lts.init
 *             rest -= init             # <<<<<<<<<<<<<<
 *         else :
 *             init = sdd.empty()
*/
    __pyx_t_1 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_init)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_rest, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":759
 *         cdef sdd rest = self.states
 *         cdef sdd init, dead, entries, exits, hull
 *         if split_init :             # <<<<<<<<<<<<<<
 *             init = rest & self.lts.init
 *             rest -= init
*/
    goto __pyx_L3;
  }

  /* "ecco/lrr/lts.pyx":763
 *             rest -= init
 *         else :
 *             init = sdd.empty()             # <<<<<<<<<<<<<<
 *         if split_entries :
 *             entries = self.lts.succ(self.lts.pred(rest) - rest) & rest
*/
  /*else*/ {
    __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 763, __pyx_L1_error)
    __pyx_v_init = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "ecco/lrr/lts.pyx":764
 *         else :
 *             init = sdd.empty()
 *         if split_entries :             # <<<<<<<<<<<<<<
 *             entries = self.lts.succ(self.lts.pred(rest) - rest) & rest
 *             rest -= entries
*/
  if (__pyx_v_split_entries) {

    /* "ecco/lrr/lts.pyx":765
 *             init = sdd.empty()
 *         if split_entries :
 *             entries = self.lts.succ(self.lts.pred(rest) - rest) & rest             # <<<<<<<<<<<<<<
 *             rest -= entries
 *         else :
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->succ);
    __pyx_t_4 = ((PyObject *)__pyx_v_self->lts->succ); 
    __pyx_t_8 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->pred);
    __pyx_t_7 = ((PyObject *)__pyx_v_self->lts->pred); 
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_8);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, ((PyObject *)__pyx_v_rest)};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
    }
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_9, ((PyObject *)__pyx_v_rest)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_4 = PyNumber_And(__pyx_t_1, ((PyObject *)__pyx_v_rest)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 765, __pyx_L1_error)
    __pyx_v_entries = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ecco/lrr/lts.pyx":766
 *         if split_entries :
 *             entries = self.lts.succ(self.lts.pred(rest) - rest) & rest
 *             rest -= entries             # <<<<<<<<<<<<<<
 *         else :
 *             entries = sdd.empty()
*/
    __pyx_t_4 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_entries)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_rest, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "ecco/lrr/lts.pyx":764
 *         else :
 *             init = sdd.empty()
 *         if split_entries :             # <<<<<<<<<<<<<<
 *             entries = self.lts.succ(self.lts.pred(rest) - rest) & rest
 *             rest -= entries
*/
    goto __pyx_L4;
  }

  /* "ecco/lrr/lts.pyx":768
 *             rest -= entries
 *         else :
 *             entries = sdd.empty()             # <<<<<<<<<<<<<<
 *         if split_exits :
 *             exits = self.lts.pred(self.lts.succ(rest) - rest) & rest
*/
  /*else*/ {
    __pyx_t_1 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 768, __pyx_L1_error)
    __pyx_v_entries = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "ecco/lrr/lts.pyx":769
 *         else :
 *             entries = sdd.empty()
 *         if split_exits :             # <<<<<<<<<<<<<<
 *             exits = self.lts.pred(self.lts.succ(rest) - rest) & rest
 *             rest -= exits
*/
  if (__pyx_v_split_exits) {

    /* "ecco/lrr/lts.pyx":770
 *             entries = sdd.empty()
 *         if split_exits :
 *             exits = self.lts.pred(self.lts.succ(rest) - rest) & rest             # <<<<<<<<<<<<<<
 *             rest -= exits
 *         else :
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->pred);
    __pyx_t_7 = ((PyObject *)__pyx_v_self->lts->pred); 
    __pyx_t_9 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->succ);
    __pyx_t_8 = ((PyObject *)__pyx_v_self->lts->succ); 
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      assert(__pyx_t_9);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, ((PyObject *)__pyx_v_rest)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_2, ((PyObject *)__pyx_v_rest)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_1);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_7 = PyNumber_And(__pyx_t_4, ((PyObject *)__pyx_v_rest)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 770, __pyx_L1_error)
    __pyx_v_exits = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "ecco/lrr/lts.pyx":771
 *         if split_exits :
 *             exits = self.lts.pred(self.lts.succ(rest) - rest) & rest
 *             rest -= exits             # <<<<<<<<<<<<<<
 *         else :
 *             exits = sdd.empty()
*/
    __pyx_t_7 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_exits)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_rest, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "ecco/lrr/lts.pyx":769
 *         else :
 *             entries = sdd.empty()
 *         if split_exits :             # <<<<<<<<<<<<<<
 *             exits = self.lts.pred(self.lts.succ(rest) - rest) & rest
 *             rest -= exits
*/
    goto __pyx_L5;
  }

  /* "ecco/lrr/lts.pyx":773
 *             rest -= exits
 *         else :
 *             exits = sdd.empty()             # <<<<<<<<<<<<<<
 *         if split_hull :
 *             hull = self.lts.succ_o(rest) & self.lts.pred_o(rest)
*/
  /*else*/ {
    __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 773, __pyx_L1_error)
    __pyx_v_exits = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L5:;

  /* "ecco/lrr/lts.pyx":774
 *         else :
 *             exits = sdd.empty()
 *         if split_hull :             # <<<<<<<<<<<<<<
 *             hull = self.lts.succ_o(rest) & self.lts.pred_o(rest)
 *             rest -= hull
*/
  if (__pyx_v_split_hull) {

    /* "ecco/lrr/lts.pyx":775
 *             exits = sdd.empty()
 *         if split_hull :
 *             hull = self.lts.succ_o(rest) & self.lts.pred_o(rest)             # <<<<<<<<<<<<<<
 *             rest -= hull
 *         else :
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->succ_o);
    __pyx_t_8 = ((PyObject *)__pyx_v_self->lts->succ_o); 
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_rest)};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __pyx_t_4 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_v_self->lts->pred_o);
    __pyx_t_1 = ((PyObject *)__pyx_v_self->lts->pred_o); 
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_rest)};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    }
    __pyx_t_1 = PyNumber_And(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 775, __pyx_L1_error)
    __pyx_v_hull = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":776
 *         if split_hull :
 *             hull = self.lts.succ_o(rest) & self.lts.pred_o(rest)
 *             rest -= hull             # <<<<<<<<<<<<<<
 *         else :
 *             hull = sdd.empty()
*/
    __pyx_t_1 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_hull)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_rest, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":774
 *         else :
 *             exits = sdd.empty()
 *         if split_hull :             # <<<<<<<<<<<<<<
 *             hull = self.lts.succ_o(rest) & self.lts.pred_o(rest)
 *             rest -= hull
*/
    goto __pyx_L6;
  }

  /* "ecco/lrr/lts.pyx":778
 *             rest -= hull
 *         else :
 *             hull = sdd.empty()             # <<<<<<<<<<<<<<
 *         if split_dead and rest :
 *             dead = (self.lts.pred & rest).lfp()(rest & self.lts.dead)
*/
  /*else*/ {
    __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 778, __pyx_L1_error)
    __pyx_v_hull = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L6:;

  /* "ecco/lrr/lts.pyx":779
 *         else :
 *             hull = sdd.empty()
 *         if split_dead and rest :             # <<<<<<<<<<<<<<
 *             dead = (self.lts.pred & rest).lfp()(rest & self.lts.dead)
 *             rest -= dead
*/
  if (__pyx_v_split_dead) {
  } else {
    __pyx_t_11 = __pyx_v_split_dead;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_12 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_rest)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 779, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_12;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_11) {

    /* "ecco/lrr/lts.pyx":780
 *             hull = sdd.empty()
 *         if split_dead and rest :
 *             dead = (self.lts.pred & rest).lfp()(rest & self.lts.dead)             # <<<<<<<<<<<<<<
 *             rest -= dead
 *         else :
*/
    __pyx_t_8 = NULL;
    __pyx_t_2 = PyNumber_And(((PyObject *)__pyx_v_self->lts->pred), ((PyObject *)__pyx_v_rest)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_lfp, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __pyx_t_2 = PyNumber_And(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_self->lts->dead)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_8);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 780, __pyx_L1_error)
    __pyx_v_dead = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":781
 *         if split_dead and rest :
 *             dead = (self.lts.pred & rest).lfp()(rest & self.lts.dead)
 *             rest -= dead             # <<<<<<<<<<<<<<
 *         else :
 *             dead = sdd.empty()
*/
    __pyx_t_1 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_rest), ((PyObject *)__pyx_v_dead)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_rest, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":779
 *         else :
 *             hull = sdd.empty()
 *         if split_dead and rest :             # <<<<<<<<<<<<<<
 *             dead = (self.lts.pred & rest).lfp()(rest & self.lts.dead)
 *             rest -= dead
*/
    goto __pyx_L7;
  }

  /* "ecco/lrr/lts.pyx":783
 *             rest -= dead
 *         else :
 *             dead = sdd.empty()             # <<<<<<<<<<<<<<
 *         return (self._make_split(init) if init else None,
 *                 self._make_split(entries) if entries else None,
*/
  /*else*/ {
    __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_3ddd_sdd);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_empty, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_3ddd_sdd))))) __PYX_ERR(0, 783, __pyx_L1_error)
    __pyx_v_dead = ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L7:;

  /* "ecco/lrr/lts.pyx":784
 *         else :
 *             dead = sdd.empty()
 *         return (self._make_split(init) if init else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(entries) if entries else None,
 *                 self._make_split(exits) if exits else None,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_init)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 784, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_init)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":785
 *             dead = sdd.empty()
 *         return (self._make_split(init) if init else None,
 *                 self._make_split(entries) if entries else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(exits) if exits else None,
 *                 self._make_split(hull) if hull else None,
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_entries)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 785, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_entries)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_7 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":786
 *         return (self._make_split(init) if init else None,
 *                 self._make_split(entries) if entries else None,
 *                 self._make_split(exits) if exits else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(hull) if hull else None,
 *                 self._make_split(dead) if dead else None,
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_exits)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 786, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_8 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_exits)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":787
 *                 self._make_split(entries) if entries else None,
 *                 self._make_split(exits) if exits else None,
 *                 self._make_split(hull) if hull else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(dead) if dead else None,
 *                 self._make_split(rest) if rest else None)
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_hull)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 787, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_hull)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_8 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":788
 *                 self._make_split(exits) if exits else None,
 *                 self._make_split(hull) if hull else None,
 *                 self._make_split(dead) if dead else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(rest) if rest else None)
 *     cpdef dict count (Component self) :
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_dead)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 788, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_dead)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __pyx_t_9;
    __pyx_t_9 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_4 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":789
 *                 self._make_split(hull) if hull else None,
 *                 self._make_split(dead) if dead else None,
 *                 self._make_split(rest) if rest else None)             # <<<<<<<<<<<<<<
 *     cpdef dict count (Component self) :
 *         "return the number of on occurrences of each variable"
*/
  __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_rest)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 789, __pyx_L1_error)
  if (__pyx_t_11) {
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_make_split(__pyx_v_self, __pyx_v_rest)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_9 = Py_None;
  }

  /* "ecco/lrr/lts.pyx":784
 *         else :
 *             dead = sdd.empty()
 *         return (self._make_split(init) if init else None,             # <<<<<<<<<<<<<<
 *                 self._make_split(entries) if entries else None,
 *                 self._make_split(exits) if exits else None,
*/
  __pyx_t_6 = PyTuple_New(6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_8) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_4) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_9) != (0)) __PYX_ERR(0, 784, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.topo_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rest);
  __Pyx_XDECREF((PyObject *)__pyx_v_init);
  __Pyx_XDECREF((PyObject *)__pyx_v_dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_entries);
  __Pyx_XDECREF((PyObject *)__pyx_v_exits);
  __Pyx_XDECREF((PyObject *)__pyx_v_hull);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_35topo_split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_34topo_split, "split a component into its topological parts\n\n        Each part will be extracted as a sub-component in the following order:\n         - `init`: initial states\n         - `entries`: states from which the component may be entered\n         - `exits`: states from which the component may be exited\n         - `hull`: states forming a SCC hull within the components\n         - `dead`: deadlocks and their basin\n         - `rest`: other states that do not fall into one of the previous cases\n\n        The order of extraction is importer since, for example, an\n        initial state will be in the `init` part and not the `entries`\n        part if it could belong to both. Which part is actually\n        extracted is controlled with the method's parameters.\n\n        Parameters:\n         - `split_init` (`bool=True`): whether to extract initial states\n         - `split_entries` (`bool=True`): whether to extract entry states\n         - `split_exits` (`bool=True`): whether to extract exit states\n         - `split_hull` (`bool=True`): whether to extract SCC hull states\n         - `split_dead` (`bool=True`): whether to extract deadlocks\n        Returns: a tuple `init, entries, exits, hull, dead, rest` corresponding\n        to the sub-components described above, according to the call parameters.\n        Each is returned as `None` if empty of a `Component` instance if non-empty\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_35topo_split = {"topo_split", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_35topo_split, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_34topo_split};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_35topo_split(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_split_init;
  int __pyx_v_split_entries;
  int __pyx_v_split_exits;
  int __pyx_v_split_hull;
  int __pyx_v_split_dead;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topo_split (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_split_init,&__pyx_mstate_global->__pyx_n_u_split_entries,&__pyx_mstate_global->__pyx_n_u_split_exits,&__pyx_mstate_global->__pyx_n_u_split_hull,&__pyx_mstate_global->__pyx_n_u_split_dead,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 726, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "topo_split", 0) < 0) __PYX_ERR(0, 726, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 726, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_split_init = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_split_init == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    } else {

      /* "ecco/lrr/lts.pyx":727
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,
 *                             bint split_init=True,             # <<<<<<<<<<<<<<
 *                             bint split_entries=True,
 *                             bint split_exits=True,
*/
      __pyx_v_split_init = ((int)1);
    }
    if (values[1]) {
      __pyx_v_split_entries = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_split_entries == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    } else {

      /* "ecco/lrr/lts.pyx":728
 *     cpdef tuple topo_split (Component self,
 *                             bint split_init=True,
 *                             bint split_entries=True,             # <<<<<<<<<<<<<<
 *                             bint split_exits=True,
 *                             bint split_hull=True,
*/
      __pyx_v_split_entries = ((int)1);
    }
    if (values[2]) {
      __pyx_v_split_exits = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_split_exits == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    } else {

      /* "ecco/lrr/lts.pyx":729
 *                             bint split_init=True,
 *                             bint split_entries=True,
 *                             bint split_exits=True,             # <<<<<<<<<<<<<<
 *                             bint split_hull=True,
 *                             bint split_dead=True) :
*/
      __pyx_v_split_exits = ((int)1);
    }
    if (values[3]) {
      __pyx_v_split_hull = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_split_hull == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L3_error)
    } else {

      /* "ecco/lrr/lts.pyx":730
 *                             bint split_entries=True,
 *                             bint split_exits=True,
 *                             bint split_hull=True,             # <<<<<<<<<<<<<<
 *                             bint split_dead=True) :
 *         """split a component into its topological parts
*/
      __pyx_v_split_hull = ((int)1);
    }
    if (values[4]) {
      __pyx_v_split_dead = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_split_dead == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
    } else {

      /* "ecco/lrr/lts.pyx":731
 *                             bint split_exits=True,
 *                             bint split_hull=True,
 *                             bint split_dead=True) :             # <<<<<<<<<<<<<<
 *         """split a component into its topological parts
 * 
*/
      __pyx_v_split_dead = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topo_split", 0, 0, 5, __pyx_nargs); __PYX_ERR(0, 726, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.topo_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_34topo_split(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_split_init, __pyx_v_split_entries, __pyx_v_split_exits, __pyx_v_split_hull, __pyx_v_split_dead);

  /* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_34topo_split(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_v_split_init, int __pyx_v_split_entries, int __pyx_v_split_exits, int __pyx_v_split_hull, int __pyx_v_split_dead) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topo_split", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 5;
  __pyx_t_2.split_init = __pyx_v_split_init;
  __pyx_t_2.split_entries = __pyx_v_split_entries;
  __pyx_t_2.split_exits = __pyx_v_split_exits;
  __pyx_t_2.split_hull = __pyx_v_split_hull;
  __pyx_t_2.split_dead = __pyx_v_split_dead;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_Component->topo_split(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.topo_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":790
 *                 self._make_split(dead) if dead else None,
 *                 self._make_split(rest) if rest else None)
 *     cpdef dict count (Component self) :             # <<<<<<<<<<<<<<
 *         "return the number of on occurrences of each variable"
 *         cdef dict seen = {}
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_37count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_seen = 0;
  struct __pyx_obj_3ddd_ddd *__pyx_v_d = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_37count)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 790, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":792
 *     cpdef dict count (Component self) :
 *         "return the number of on occurrences of each variable"
 *         cdef dict seen = {}             # <<<<<<<<<<<<<<
 *         cdef ddd d = s2d(self.states)
 *         return self._count(d, seen)
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seen = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":793
 *         "return the number of on occurrences of each variable"
 *         cdef dict seen = {}
 *         cdef ddd d = s2d(self.states)             # <<<<<<<<<<<<<<
 *         return self._count(d, seen)
 *     cpdef dict _count (Component self, ddd head, dict seen) :
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_4ecco_3lrr_3lts_s2d(((struct __pyx_obj_3ddd_sdd *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_d = ((struct __pyx_obj_3ddd_ddd *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":794
 *         cdef dict seen = {}
 *         cdef ddd d = s2d(self.states)
 *         return self._count(d, seen)             # <<<<<<<<<<<<<<
 *     cpdef dict _count (Component self, ddd head, dict seen) :
 *         cdef dict ret, sub
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_count(__pyx_v_self, __pyx_v_d, __pyx_v_seen, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":790
 *                 self._make_split(dead) if dead else None,
 *                 self._make_split(rest) if rest else None)
 *     cpdef dict count (Component self) :             # <<<<<<<<<<<<<<
 *         "return the number of on occurrences of each variable"
 *         cdef dict seen = {}
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seen);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_37count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_36count, "return the number of on occurrences of each variable");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_37count = {"count", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_37count, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_36count};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_37count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("count", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("count", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_36count(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_36count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_9Component_count(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":795
 *         cdef ddd d = s2d(self.states)
 *         return self._count(d, seen)
 *     cpdef dict _count (Component self, ddd head, dict seen) :             # <<<<<<<<<<<<<<
 *         cdef dict ret, sub
 *         cdef str var, v
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_39_count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component__count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_v_sub = 0;
  PyObject *__pyx_v_var = 0;
  PyObject *__pyx_v_v = 0;
  CYTHON_UNUSED unsigned PY_LONG_LONG __pyx_v_num;
  CYTHON_UNUSED unsigned PY_LONG_LONG __pyx_v_n;
  val_t __pyx_v_val;
  struct __pyx_obj_3ddd_ddd *__pyx_v_child = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  unsigned PY_LONG_LONG __pyx_t_13;
  val_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_count", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_count_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_39_count)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_head), __pyx_v_seen};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 795, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":801
 *         cdef val_t val
 *         cdef ddd child
 *         seen[head] = ret = {}             # <<<<<<<<<<<<<<
 *         if head.stop() :
 *             return ret
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_seen == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 801, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_seen, ((PyObject *)__pyx_v_head), __pyx_t_1) < 0))) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":802
 *         cdef ddd child
 *         seen[head] = ret = {}
 *         if head.stop() :             # <<<<<<<<<<<<<<
 *             return ret
 *         for var, num, val, child in head.edges() :
*/
  __pyx_t_6 = ((struct __pyx_vtabstruct_3ddd_ddd *)__pyx_v_head->__pyx_base.__pyx_vtab)->stop(__pyx_v_head, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ecco/lrr/lts.pyx":803
 *         seen[head] = ret = {}
 *         if head.stop() :
 *             return ret             # <<<<<<<<<<<<<<
 *         for var, num, val, child in head.edges() :
 *             if child in seen :
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret);
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "ecco/lrr/lts.pyx":802
 *         cdef ddd child
 *         seen[head] = ret = {}
 *         if head.stop() :             # <<<<<<<<<<<<<<
 *             return ret
 *         for var, num, val, child in head.edges() :
*/
  }

  /* "ecco/lrr/lts.pyx":804
 *         if head.stop() :
 *             return ret
 *         for var, num, val, child in head.edges() :             # <<<<<<<<<<<<<<
 *             if child in seen :
 *                 sub = seen[child]
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_edges, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_7);
        ++__pyx_t_7;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 804, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_7);
        #endif
        ++__pyx_t_7;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 804, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 804, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3);
        __Pyx_INCREF(__pyx_t_10);
      } else {
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_9 = __Pyx_PyList_GetItemRef(sequence, 2);
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_GetItemRef(sequence, 3);
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_10);
      }
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_9,&__pyx_t_10};
        for (i=0; i < 4; i++) {
          PyObject* item = __Pyx_PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 804, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_9,&__pyx_t_10};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 804, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_4))) __PYX_ERR(0, 804, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_13 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyLong_As_val_t(__pyx_t_9); if (unlikely((__pyx_t_14 == ((val_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_mstate_global->__pyx_ptype_3ddd_ddd))))) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_var, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_v_num = __pyx_t_13;
    __pyx_v_val = __pyx_t_14;
    __Pyx_XDECREF_SET(__pyx_v_child, ((struct __pyx_obj_3ddd_ddd *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "ecco/lrr/lts.pyx":805
 *             return ret
 *         for var, num, val, child in head.edges() :
 *             if child in seen :             # <<<<<<<<<<<<<<
 *                 sub = seen[child]
 *             else :
*/
    if (unlikely(__pyx_v_seen == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 805, __pyx_L1_error)
    }
    __pyx_t_6 = (__Pyx_PyDict_ContainsTF(((PyObject *)__pyx_v_child), __pyx_v_seen, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 805, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "ecco/lrr/lts.pyx":806
 *         for var, num, val, child in head.edges() :
 *             if child in seen :
 *                 sub = seen[child]             # <<<<<<<<<<<<<<
 *             else :
 *                 sub = seen[child] = self._count(child, seen)
*/
      if (unlikely(__pyx_v_seen == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 806, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_seen, ((PyObject *)__pyx_v_child)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_sub, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "ecco/lrr/lts.pyx":805
 *             return ret
 *         for var, num, val, child in head.edges() :
 *             if child in seen :             # <<<<<<<<<<<<<<
 *                 sub = seen[child]
 *             else :
*/
      goto __pyx_L8;
    }

    /* "ecco/lrr/lts.pyx":808
 *                 sub = seen[child]
 *             else :
 *                 sub = seen[child] = self._count(child, seen)             # <<<<<<<<<<<<<<
 *             if val :
 *                 ret[var] = len(child)
*/
    /*else*/ {
      __pyx_t_1 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->_count(__pyx_v_self, __pyx_v_child, __pyx_v_seen, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sub, ((PyObject*)__pyx_t_1));
      if (unlikely(__pyx_v_seen == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 808, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_seen, ((PyObject *)__pyx_v_child), __pyx_t_1) < 0))) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L8:;

    /* "ecco/lrr/lts.pyx":809
 *             else :
 *                 sub = seen[child] = self._count(child, seen)
 *             if val :             # <<<<<<<<<<<<<<
 *                 ret[var] = len(child)
 *             for v, n in sub.items() :
*/
    __pyx_t_6 = (__pyx_v_val != 0);
    if (__pyx_t_6) {

      /* "ecco/lrr/lts.pyx":810
 *                 sub = seen[child] = self._count(child, seen)
 *             if val :
 *                 ret[var] = len(child)             # <<<<<<<<<<<<<<
 *             for v, n in sub.items() :
 *                 ret[v] = ret.get(v, 0) + sub[v]
*/
      __pyx_t_15 = PyObject_Length(((PyObject *)__pyx_v_child)); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 810, __pyx_L1_error)
      __pyx_t_1 = PyLong_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((PyDict_SetItem(__pyx_v_ret, __pyx_v_var, __pyx_t_1) < 0))) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ecco/lrr/lts.pyx":809
 *             else :
 *                 sub = seen[child] = self._count(child, seen)
 *             if val :             # <<<<<<<<<<<<<<
 *                 ret[var] = len(child)
 *             for v, n in sub.items() :
*/
    }

    /* "ecco/lrr/lts.pyx":811
 *             if val :
 *                 ret[var] = len(child)
 *             for v, n in sub.items() :             # <<<<<<<<<<<<<<
 *                 ret[v] = ret.get(v, 0) + sub[v]
 *         return ret
*/
    __pyx_t_15 = 0;
    if (unlikely(__pyx_v_sub == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 811, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_sub, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_16), (&__pyx_t_17)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_10;
    __pyx_t_10 = 0;
    while (1) {
      __pyx_t_18 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_16, &__pyx_t_15, &__pyx_t_10, &__pyx_t_9, NULL, __pyx_t_17);
      if (unlikely(__pyx_t_18 == 0)) break;
      if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GOTREF(__pyx_t_9);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_10))) __PYX_ERR(0, 811, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_9); if (unlikely((__pyx_t_13 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;
      __pyx_v_n = __pyx_t_13;

      /* "ecco/lrr/lts.pyx":812
 *                 ret[var] = len(child)
 *             for v, n in sub.items() :
 *                 ret[v] = ret.get(v, 0) + sub[v]             # <<<<<<<<<<<<<<
 *         return ret
 *     cpdef tuple on_off (Component self) :
*/
      __pyx_t_9 = __Pyx_PyDict_GetItemDefault(__pyx_v_ret, __pyx_v_v, __pyx_mstate_global->__pyx_int_0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__pyx_v_sub == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 812, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sub, __pyx_v_v); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = PyNumber_Add(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely((PyDict_SetItem(__pyx_v_ret, __pyx_v_v, __pyx_t_3) < 0))) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ecco/lrr/lts.pyx":804
 *         if head.stop() :
 *             return ret
 *         for var, num, val, child in head.edges() :             # <<<<<<<<<<<<<<
 *             if child in seen :
 *                 sub = seen[child]
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":813
 *             for v, n in sub.items() :
 *                 ret[v] = ret.get(v, 0) + sub[v]
 *         return ret             # <<<<<<<<<<<<<<
 *     cpdef tuple on_off (Component self) :
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":795
 *         cdef ddd d = s2d(self.states)
 *         return self._count(d, seen)
 *     cpdef dict _count (Component self, ddd head, dict seen) :             # <<<<<<<<<<<<<<
 *         cdef dict ret, sub
 *         cdef str var, v
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_sub);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_39_count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_39_count = {"_count", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_39_count, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_39_count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_3ddd_ddd *__pyx_v_head = 0;
  PyObject *__pyx_v_seen = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_count (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_head,&__pyx_mstate_global->__pyx_n_u_seen,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 795, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 795, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 795, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_count", 0) < 0) __PYX_ERR(0, 795, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_count", 1, 2, 2, i); __PYX_ERR(0, 795, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 795, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 795, __pyx_L3_error)
    }
    __pyx_v_head = ((struct __pyx_obj_3ddd_ddd *)values[0]);
    __pyx_v_seen = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_count", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 795, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component._count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_head), __pyx_mstate_global->__pyx_ptype_3ddd_ddd, 1, "head", 0))) __PYX_ERR(0, 795, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seen), (&PyDict_Type), 1, "seen", 1))) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_38_count(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_head, __pyx_v_seen);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_38_count(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, struct __pyx_obj_3ddd_ddd *__pyx_v_head, PyObject *__pyx_v_seen) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_count", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_9Component__count(__pyx_v_self, __pyx_v_head, __pyx_v_seen, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component._count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":814
 *                 ret[v] = ret.get(v, 0) + sub[v]
 *         return ret
 *     cpdef tuple on_off (Component self) :             # <<<<<<<<<<<<<<
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
 *         cdef dict cnt = self.count()
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_41on_off(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_on_off(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_cnt = 0;
  PyObject *__pyx_v_on = 0;
  PyObject *__pyx_v_off = 0;
  unsigned PY_LONG_LONG __pyx_v_s;
  unsigned PY_LONG_LONG __pyx_v_size;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  unsigned PY_LONG_LONG __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_off", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_on_off); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_41on_off)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_2))) __PYX_ERR(0, 814, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":816
 *     cpdef tuple on_off (Component self) :
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
 *         cdef dict cnt = self.count()             # <<<<<<<<<<<<<<
 *         cdef set on = set()
 *         cdef set off = set()
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component *)__pyx_v_self->__pyx_vtab)->count(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cnt = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":817
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
 *         cdef dict cnt = self.count()
 *         cdef set on = set()             # <<<<<<<<<<<<<<
 *         cdef set off = set()
 *         cdef unsigned long long s, size
*/
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_on = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":818
 *         cdef dict cnt = self.count()
 *         cdef set on = set()
 *         cdef set off = set()             # <<<<<<<<<<<<<<
 *         cdef unsigned long long s, size
 *         size = len(self.states)
*/
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_off = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":820
 *         cdef set off = set()
 *         cdef unsigned long long s, size
 *         size = len(self.states)             # <<<<<<<<<<<<<<
 *         for var in self.lts.vars :
 *             s = cnt.get(var, 0)
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_6;

  /* "ecco/lrr/lts.pyx":821
 *         cdef unsigned long long s, size
 *         size = len(self.states)
 *         for var in self.lts.vars :             # <<<<<<<<<<<<<<
 *             s = cnt.get(var, 0)
 *             if s == 0 :
*/
  if (unlikely(__pyx_v_self->lts->vars == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 821, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->lts->vars; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 821, __pyx_L1_error)
      #endif
      if (__pyx_t_6 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6));
    #else
    __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6);
    #endif
    ++__pyx_t_6;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ecco/lrr/lts.pyx":822
 *         size = len(self.states)
 *         for var in self.lts.vars :
 *             s = cnt.get(var, 0)             # <<<<<<<<<<<<<<
 *             if s == 0 :
 *                 off.add(var)
*/
    if (unlikely(__pyx_v_cnt == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(0, 822, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_cnt, __pyx_v_var, __pyx_mstate_global->__pyx_int_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_s = __pyx_t_7;

    /* "ecco/lrr/lts.pyx":823
 *         for var in self.lts.vars :
 *             s = cnt.get(var, 0)
 *             if s == 0 :             # <<<<<<<<<<<<<<
 *                 off.add(var)
 *             elif s == size :
*/
    __pyx_t_8 = (__pyx_v_s == 0);
    if (__pyx_t_8) {

      /* "ecco/lrr/lts.pyx":824
 *             s = cnt.get(var, 0)
 *             if s == 0 :
 *                 off.add(var)             # <<<<<<<<<<<<<<
 *             elif s == size :
 *                 on.add(var)
*/
      __pyx_t_9 = PySet_Add(__pyx_v_off, __pyx_v_var); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 824, __pyx_L1_error)

      /* "ecco/lrr/lts.pyx":823
 *         for var in self.lts.vars :
 *             s = cnt.get(var, 0)
 *             if s == 0 :             # <<<<<<<<<<<<<<
 *                 off.add(var)
 *             elif s == size :
*/
      goto __pyx_L5;
    }

    /* "ecco/lrr/lts.pyx":825
 *             if s == 0 :
 *                 off.add(var)
 *             elif s == size :             # <<<<<<<<<<<<<<
 *                 on.add(var)
 *         return on, off
*/
    __pyx_t_8 = (__pyx_v_s == __pyx_v_size);
    if (__pyx_t_8) {

      /* "ecco/lrr/lts.pyx":826
 *                 off.add(var)
 *             elif s == size :
 *                 on.add(var)             # <<<<<<<<<<<<<<
 *         return on, off
 *     cpdef object form (Component self, variables=None, normalise=None) :
*/
      __pyx_t_9 = PySet_Add(__pyx_v_on, __pyx_v_var); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 826, __pyx_L1_error)

      /* "ecco/lrr/lts.pyx":825
 *             if s == 0 :
 *                 off.add(var)
 *             elif s == size :             # <<<<<<<<<<<<<<
 *                 on.add(var)
 *         return on, off
*/
    }
    __pyx_L5:;

    /* "ecco/lrr/lts.pyx":821
 *         cdef unsigned long long s, size
 *         size = len(self.states)
 *         for var in self.lts.vars :             # <<<<<<<<<<<<<<
 *             s = cnt.get(var, 0)
 *             if s == 0 :
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ecco/lrr/lts.pyx":827
 *             elif s == size :
 *                 on.add(var)
 *         return on, off             # <<<<<<<<<<<<<<
 *     cpdef object form (Component self, variables=None, normalise=None) :
 *         """describe the component states states by a Boolean formula
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_on);
  __Pyx_GIVEREF(__pyx_v_on);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_on) != (0)) __PYX_ERR(0, 827, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_off);
  __Pyx_GIVEREF(__pyx_v_off);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_off) != (0)) __PYX_ERR(0, 827, __pyx_L1_error);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":814
 *                 ret[v] = ret.get(v, 0) + sub[v]
 *         return ret
 *     cpdef tuple on_off (Component self) :             # <<<<<<<<<<<<<<
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
 *         cdef dict cnt = self.count()
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.on_off", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cnt);
  __Pyx_XDECREF(__pyx_v_on);
  __Pyx_XDECREF(__pyx_v_off);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_41on_off(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_40on_off, "return a pair of sets `on, off` for the always-on and always-off variables");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_41on_off = {"on_off", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_41on_off, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_40on_off};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_41on_off(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_off (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("on_off", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("on_off", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_40on_off(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_40on_off(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("on_off", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4ecco_3lrr_3lts_9Component_on_off(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.on_off", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":828
 *                 on.add(var)
 *         return on, off
 *     cpdef object form (Component self, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe the component states states by a Boolean formula
 * 
*/

static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_43form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4ecco_3lrr_3lts_9Component_form(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form *__pyx_optional_args) {
  PyObject *__pyx_v_variables = ((PyObject *)Py_None);
  PyObject *__pyx_v_normalise = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("form", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_variables = __pyx_optional_args->variables;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_normalise = __pyx_optional_args->normalise;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_form); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_4ecco_3lrr_3lts_9Component_43form)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_variables, __pyx_v_normalise};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "ecco/lrr/lts.pyx":839
 *         Return: a sympy Boolean formulas
 *         """
 *         return self.lts.form(self.states, variables, normalise)             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->states);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6.__pyx_n = 2;
  __pyx_t_6.variables = __pyx_v_variables;
  __pyx_t_6.normalise = __pyx_v_normalise;
  __pyx_t_2 = ((struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS *)__pyx_v_self->lts->__pyx_vtab)->form(__pyx_v_self->lts, ((struct __pyx_obj_3ddd_sdd *)__pyx_t_1), 0, &__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ecco/lrr/lts.pyx":828
 *                 on.add(var)
 *         return on, off
 *     cpdef object form (Component self, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe the component states states by a Boolean formula
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_43form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4ecco_3lrr_3lts_9Component_42form, "describe the component states states by a Boolean formula\n\n        Arguments:\n         - `variables=...`: a collection of variables names to restrict to\n         - `normalise=...`: how the formula should be normalised, which must be either:\n           - `\"cnf\"`: conjunctive normal form\n           - `\"dnf\"`: disjunctive normal form\n           - `None`: chose the smallest form\n        Return: a sympy Boolean formulas\n        ");
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_43form = {"form", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_43form, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_42form};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_43form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variables = 0;
  PyObject *__pyx_v_normalise = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("form (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_variables,&__pyx_mstate_global->__pyx_n_u_normalise,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 828, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 828, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 828, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "form", 0) < 0) __PYX_ERR(0, 828, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 828, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 828, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_variables = values[0];
    __pyx_v_normalise = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("form", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 828, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_42form(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v_variables, __pyx_v_normalise);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_42form(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, PyObject *__pyx_v_variables, PyObject *__pyx_v_normalise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("form", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.variables = __pyx_v_variables;
  __pyx_t_2.normalise = __pyx_v_normalise;
  __pyx_t_1 = __pyx_vtabptr_4ecco_3lrr_3lts_Component->form(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":492
 *      - `lts`: the `LTS` from which the component is originated
 *     """
 *     cdef readonly CompoID num             # <<<<<<<<<<<<<<
 *     cdef readonly sdd states
 *     cdef readonly dict graph_props
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3num_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_3num___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3num___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(__pyx_v_self->num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ecco.lrr.lts.Component.num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":493
 *     """
 *     cdef readonly CompoID num
 *     cdef readonly sdd states             # <<<<<<<<<<<<<<
 *     cdef readonly dict graph_props
 *     cdef readonly dict split_props
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_6states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_6states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_6states___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_6states___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->states);
  __pyx_r = ((PyObject *)__pyx_v_self->states);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":494
 *     cdef readonly CompoID num
 *     cdef readonly sdd states
 *     cdef readonly dict graph_props             # <<<<<<<<<<<<<<
 *     cdef readonly dict split_props
 *     cdef readonly LTS lts
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_11graph_props_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_11graph_props_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_11graph_props___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_11graph_props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->graph_props);
  __pyx_r = __pyx_v_self->graph_props;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":495
 *     cdef readonly sdd states
 *     cdef readonly dict graph_props
 *     cdef readonly dict split_props             # <<<<<<<<<<<<<<
 *     cdef readonly LTS lts
 *     cdef readonly tuple on, off
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_11split_props_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_11split_props_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_11split_props___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_11split_props___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->split_props);
  __pyx_r = __pyx_v_self->split_props;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":496
 *     cdef readonly dict graph_props
 *     cdef readonly dict split_props
 *     cdef readonly LTS lts             # <<<<<<<<<<<<<<
 *     cdef readonly tuple on, off
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3lts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3lts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_3lts___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3lts___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->lts);
  __pyx_r = ((PyObject *)__pyx_v_self->lts);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ecco/lrr/lts.pyx":497
 *     cdef readonly dict split_props
 *     cdef readonly LTS lts
 *     cdef readonly tuple on, off             # <<<<<<<<<<<<<<
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :
 *         self.lts = lts
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_2on_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_2on_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_2on___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_2on___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->on);
  __pyx_r = __pyx_v_self->on;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3off_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_3off_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_3off___get__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_3off___get__(struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->off);
  __pyx_r = __pyx_v_self->off;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_45__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_44__reduce_cython__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4ecco_3lrr_3lts_9Component_47__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ecco_3lrr_3lts_9Component_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ecco_3lrr_3lts_9Component_46__setstate_cython__(((struct __pyx_obj_4ecco_3lrr_3lts_Component *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ecco_3lrr_3lts_9Component_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4ecco_3lrr_3lts_Component *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ecco.lrr.lts.Component.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */
static struct __pyx_vtabstruct_4ecco_3lrr_3lts_LTS __pyx_vtable_4ecco_3lrr_3lts_LTS;

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts_LTS(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)o);
  p->__pyx_vtab = __pyx_vtabptr_4ecco_3lrr_3lts_LTS;
  p->path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->gal = ((struct __pyx_obj_3its_model *)Py_None); Py_INCREF(Py_None);
  p->init = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  p->states = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  p->dead = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  p->hull = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  p->succ = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->pred = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->succ_o = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->pred_o = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->succ_s = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->pred_s = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->alias = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tsucc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tpred = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->vars = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_var2sdd = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->constraints = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  p->transient = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4ecco_3lrr_3lts_3LTS_9__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts_LTS(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *p = (struct __pyx_obj_4ecco_3lrr_3lts_LTS *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts_LTS) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->path);
  Py_CLEAR(p->gal);
  Py_CLEAR(p->init);
  Py_CLEAR(p->states);
  Py_CLEAR(p->dead);
  Py_CLEAR(p->hull);
  Py_CLEAR(p->succ);
  Py_CLEAR(p->pred);
  Py_CLEAR(p->succ_o);
  Py_CLEAR(p->pred_o);
  Py_CLEAR(p->succ_s);
  Py_CLEAR(p->pred_s);
  Py_CLEAR(p->props);
  Py_CLEAR(p->alias);
  Py_CLEAR(p->tsucc);
  Py_CLEAR(p->tpred);
  Py_CLEAR(p->vars);
  Py_CLEAR(p->_var2sdd);
  Py_CLEAR(p->constraints);
  Py_CLEAR(p->transient);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts_LTS(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *p = (struct __pyx_obj_4ecco_3lrr_3lts_LTS *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->gal) {
    e = (*v)(((PyObject *)p->gal), a); if (e) return e;
  }
  if (p->init) {
    e = (*v)(((PyObject *)p->init), a); if (e) return e;
  }
  if (p->states) {
    e = (*v)(((PyObject *)p->states), a); if (e) return e;
  }
  if (p->dead) {
    e = (*v)(((PyObject *)p->dead), a); if (e) return e;
  }
  if (p->hull) {
    e = (*v)(((PyObject *)p->hull), a); if (e) return e;
  }
  if (p->succ) {
    e = (*v)(((PyObject *)p->succ), a); if (e) return e;
  }
  if (p->pred) {
    e = (*v)(((PyObject *)p->pred), a); if (e) return e;
  }
  if (p->succ_o) {
    e = (*v)(((PyObject *)p->succ_o), a); if (e) return e;
  }
  if (p->pred_o) {
    e = (*v)(((PyObject *)p->pred_o), a); if (e) return e;
  }
  if (p->succ_s) {
    e = (*v)(((PyObject *)p->succ_s), a); if (e) return e;
  }
  if (p->pred_s) {
    e = (*v)(((PyObject *)p->pred_s), a); if (e) return e;
  }
  if (p->props) {
    e = (*v)(p->props, a); if (e) return e;
  }
  if (p->alias) {
    e = (*v)(p->alias, a); if (e) return e;
  }
  if (p->tsucc) {
    e = (*v)(p->tsucc, a); if (e) return e;
  }
  if (p->tpred) {
    e = (*v)(p->tpred, a); if (e) return e;
  }
  if (p->vars) {
    e = (*v)(p->vars, a); if (e) return e;
  }
  if (p->_var2sdd) {
    e = (*v)(p->_var2sdd, a); if (e) return e;
  }
  if (p->constraints) {
    e = (*v)(((PyObject *)p->constraints), a); if (e) return e;
  }
  if (p->transient) {
    e = (*v)(((PyObject *)p->transient), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ecco_3lrr_3lts_LTS(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ecco_3lrr_3lts_LTS *p = (struct __pyx_obj_4ecco_3lrr_3lts_LTS *)o;
  tmp = ((PyObject*)p->gal);
  p->gal = ((struct __pyx_obj_3its_model *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->init);
  p->init = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->states);
  p->states = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dead);
  p->dead = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->hull);
  p->hull = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->succ);
  p->succ = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pred);
  p->pred = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->succ_o);
  p->succ_o = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pred_o);
  p->pred_o = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->succ_s);
  p->succ_s = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pred_s);
  p->pred_s = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->props);
  p->props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->alias);
  p->alias = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tsucc);
  p->tsucc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tpred);
  p->tpred = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vars);
  p->vars = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_var2sdd);
  p->_var2sdd = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->constraints);
  p->constraints = ((struct __pyx_obj_3ddd_shom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->transient);
  p->transient = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_4ecco_3lrr_3lts_LTS(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_4ecco_3lrr_3lts_3LTS_13__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_4ecco_3lrr_3lts_3LTS_13__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4path_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_gal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_3gal_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_init(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4init_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_6states_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_dead(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4dead_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_hull(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4hull_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_succ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4succ_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_pred(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4pred_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_succ_o(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_o_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_pred_o(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_o_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_succ_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_6succ_s_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_pred_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_6pred_s_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_props(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_5props_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_alias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_5alias_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_tsucc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_5tsucc_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_tpred(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_5tpred_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_4vars_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_compact(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_7compact_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_constraints(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_11constraints_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_3LTS_transient(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_3LTS_9transient_1__get__(o);
}

static PyMethodDef __pyx_methods_4ecco_3lrr_3lts_LTS[] = {
  {"load", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_5load, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"load_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_7load_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_3LTS_6load_file},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_43__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_3LTS_45__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4ecco_3lrr_3lts_LTS[] = {
  {"path", __pyx_getprop_4ecco_3lrr_3lts_3LTS_path, 0, 0, 0},
  {"gal", __pyx_getprop_4ecco_3lrr_3lts_3LTS_gal, 0, 0, 0},
  {"init", __pyx_getprop_4ecco_3lrr_3lts_3LTS_init, 0, 0, 0},
  {"states", __pyx_getprop_4ecco_3lrr_3lts_3LTS_states, 0, 0, 0},
  {"dead", __pyx_getprop_4ecco_3lrr_3lts_3LTS_dead, 0, 0, 0},
  {"hull", __pyx_getprop_4ecco_3lrr_3lts_3LTS_hull, 0, 0, 0},
  {"succ", __pyx_getprop_4ecco_3lrr_3lts_3LTS_succ, 0, 0, 0},
  {"pred", __pyx_getprop_4ecco_3lrr_3lts_3LTS_pred, 0, 0, 0},
  {"succ_o", __pyx_getprop_4ecco_3lrr_3lts_3LTS_succ_o, 0, 0, 0},
  {"pred_o", __pyx_getprop_4ecco_3lrr_3lts_3LTS_pred_o, 0, 0, 0},
  {"succ_s", __pyx_getprop_4ecco_3lrr_3lts_3LTS_succ_s, 0, 0, 0},
  {"pred_s", __pyx_getprop_4ecco_3lrr_3lts_3LTS_pred_s, 0, 0, 0},
  {"props", __pyx_getprop_4ecco_3lrr_3lts_3LTS_props, 0, 0, 0},
  {"alias", __pyx_getprop_4ecco_3lrr_3lts_3LTS_alias, 0, 0, 0},
  {"tsucc", __pyx_getprop_4ecco_3lrr_3lts_3LTS_tsucc, 0, 0, 0},
  {"tpred", __pyx_getprop_4ecco_3lrr_3lts_3LTS_tpred, 0, 0, 0},
  {"vars", __pyx_getprop_4ecco_3lrr_3lts_3LTS_vars, 0, 0, 0},
  {"compact", __pyx_getprop_4ecco_3lrr_3lts_3LTS_compact, 0, 0, 0},
  {"constraints", __pyx_getprop_4ecco_3lrr_3lts_3LTS_constraints, 0, 0, 0},
  {"transient", __pyx_getprop_4ecco_3lrr_3lts_3LTS_transient, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts_LTS_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts_LTS},
  {Py_tp_hash, (void *)__pyx_pw_4ecco_3lrr_3lts_3LTS_15__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("a Labelled Transition System\n\n    Class LTS is basically a wrapper around an `its.model` instance.\n    Its attributes are:\n     - `path`: GAL file used to build the model\n     - `gal`: instance of `its.model` built from the GAL file\n     - `init`: a `ddd.sdd` containing the initial states\n     - `states`: a `ddd.sdd` containing the set of all states\n     - `dead`: a `ddd.sdd` containing the set of all deadlocks\n     - `hull`: a `ddd.sdd` containing the set of states forming the SCC hull\n     - `succ`: a `ddd.shom` representing the successor function\n     - `succ_o`: a `ddd.shom` representing the gfp of `succ`\n     - `succ_s`: a `ddd.shom` representing the lfp of `succ`\n     - `pred`: a `ddd.shom` representing the predessor function\n     - `pred_o`: a `ddd.shom` representing the gfp of `pred`\n     - `pred_s`: a `ddd.shom` representing the lfp of `pred`\n     - `props`: a `dict` mapping textual properties to sets of states in the LTS\n     - `tsucc`: a `dict` mapping rules and constraints names to `ddd.shom`\n        successor functions\n     - `tpred`: a `dict` mapping rules and constraints names to `ddd.shom`\n       predecessor functions\n     - `vars`: a truple of `str` representing the variables of the model\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts_LTS},
  {Py_tp_clear, (void *)__pyx_tp_clear_4ecco_3lrr_3lts_LTS},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_4ecco_3lrr_3lts_LTS},
  {Py_tp_methods, (void *)__pyx_methods_4ecco_3lrr_3lts_LTS},
  {Py_tp_getset, (void *)__pyx_getsets_4ecco_3lrr_3lts_LTS},
  {Py_tp_init, (void *)__pyx_pw_4ecco_3lrr_3lts_3LTS_17__init__},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts_LTS},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts_LTS_spec = {
  "ecco.lrr.lts.LTS",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts_LTS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4ecco_3lrr_3lts_LTS_slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts_LTS = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""LTS", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts_LTS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts_LTS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_4ecco_3lrr_3lts_3LTS_15__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("a Labelled Transition System\n\n    Class LTS is basically a wrapper around an `its.model` instance.\n    Its attributes are:\n     - `path`: GAL file used to build the model\n     - `gal`: instance of `its.model` built from the GAL file\n     - `init`: a `ddd.sdd` containing the initial states\n     - `states`: a `ddd.sdd` containing the set of all states\n     - `dead`: a `ddd.sdd` containing the set of all deadlocks\n     - `hull`: a `ddd.sdd` containing the set of states forming the SCC hull\n     - `succ`: a `ddd.shom` representing the successor function\n     - `succ_o`: a `ddd.shom` representing the gfp of `succ`\n     - `succ_s`: a `ddd.shom` representing the lfp of `succ`\n     - `pred`: a `ddd.shom` representing the predessor function\n     - `pred_o`: a `ddd.shom` representing the gfp of `pred`\n     - `pred_s`: a `ddd.shom` representing the lfp of `pred`\n     - `props`: a `dict` mapping textual properties to sets of states in the LTS\n     - `tsucc`: a `dict` mapping rules and constraints names to `ddd.shom`\n        successor functions\n     - `tpred`: a `dict` mapping rules and constraints names to `ddd.shom`\n       predecessor functions\n     - `vars`: a truple of `str` representing the variables of the model\n    "), /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts_LTS, /*tp_traverse*/
  __pyx_tp_clear_4ecco_3lrr_3lts_LTS, /*tp_clear*/
  __pyx_tp_richcompare_4ecco_3lrr_3lts_LTS, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4ecco_3lrr_3lts_LTS, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4ecco_3lrr_3lts_LTS, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_4ecco_3lrr_3lts_3LTS_17__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts_LTS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_4ecco_3lrr_3lts_Component __pyx_vtable_4ecco_3lrr_3lts_Component;

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts_Component(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4ecco_3lrr_3lts_Component *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)o);
  p->__pyx_vtab = __pyx_vtabptr_4ecco_3lrr_3lts_Component;
  p->states = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  p->graph_props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->split_props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)Py_None); Py_INCREF(Py_None);
  p->on = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->off = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4ecco_3lrr_3lts_9Component_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts_Component(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts_Component *p = (struct __pyx_obj_4ecco_3lrr_3lts_Component *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts_Component) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->states);
  Py_CLEAR(p->graph_props);
  Py_CLEAR(p->split_props);
  Py_CLEAR(p->lts);
  Py_CLEAR(p->on);
  Py_CLEAR(p->off);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts_Component(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *p = (struct __pyx_obj_4ecco_3lrr_3lts_Component *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->states) {
    e = (*v)(((PyObject *)p->states), a); if (e) return e;
  }
  if (p->graph_props) {
    e = (*v)(p->graph_props, a); if (e) return e;
  }
  if (p->split_props) {
    e = (*v)(p->split_props, a); if (e) return e;
  }
  if (p->lts) {
    e = (*v)(((PyObject *)p->lts), a); if (e) return e;
  }
  if (p->on) {
    e = (*v)(p->on, a); if (e) return e;
  }
  if (p->off) {
    e = (*v)(p->off, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ecco_3lrr_3lts_Component(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ecco_3lrr_3lts_Component *p = (struct __pyx_obj_4ecco_3lrr_3lts_Component *)o;
  tmp = ((PyObject*)p->states);
  p->states = ((struct __pyx_obj_3ddd_sdd *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->graph_props);
  p->graph_props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->split_props);
  p->split_props = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lts);
  p->lts = ((struct __pyx_obj_4ecco_3lrr_3lts_LTS *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->on);
  p->on = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->off);
  p->off = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_4ecco_3lrr_3lts_Component(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_4ecco_3lrr_3lts_9Component_15__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_4ecco_3lrr_3lts_9Component_15__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_or_4ecco_3lrr_3lts_Component_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS
    slot = type->tp_as_number ? type->tp_as_number->nb_or : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_or);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_or_4ecco_3lrr_3lts_Component(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_or == &__pyx_nb_or_4ecco_3lrr_3lts_Component)
#endif
            || __Pyx_TypeCheck(left, __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_4ecco_3lrr_3lts_9Component_27__or__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_or == &__pyx_nb_or_4ecco_3lrr_3lts_Component)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component);
    if (maybe_self_is_right) {
        return __pyx_nb_or_4ecco_3lrr_3lts_Component_maybe_call_slot(__Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, tp_base, PyTypeObject*), left, right );
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_props(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_5props_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_3num_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_6states_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_graph_props(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_11graph_props_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_split_props(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_11split_props_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_lts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_3lts_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_on(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_2on_1__get__(o);
}

static PyObject *__pyx_getprop_4ecco_3lrr_3lts_9Component_off(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ecco_3lrr_3lts_9Component_3off_1__get__(o);
}

static PyMethodDef __pyx_methods_4ecco_3lrr_3lts_Component[] = {
  {"load", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_7load, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"merge", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_25merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_24merge},
  {"__or__", (PyCFunction)__pyx_pw_4ecco_3lrr_3lts_9Component_27__or__, METH_O|METH_COEXIST, __pyx_doc_4ecco_3lrr_3lts_9Component_26__or__},
  {"succ", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_29succ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_28succ},
  {"explicit", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_32explicit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4ecco_3lrr_3lts_9Component_31explicit},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4ecco_3lrr_3lts_9Component_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4ecco_3lrr_3lts_Component[] = {
  {"props", __pyx_getprop_4ecco_3lrr_3lts_9Component_props, 0, PyDoc_STR("an iterator over the graph and split properties\n\n        Yields: pairs of `str, bool` or `str, setrel`\n        "), 0},
  {"num", __pyx_getprop_4ecco_3lrr_3lts_9Component_num, 0, 0, 0},
  {"states", __pyx_getprop_4ecco_3lrr_3lts_9Component_states, 0, 0, 0},
  {"graph_props", __pyx_getprop_4ecco_3lrr_3lts_9Component_graph_props, 0, 0, 0},
  {"split_props", __pyx_getprop_4ecco_3lrr_3lts_9Component_split_props, 0, 0, 0},
  {"lts", __pyx_getprop_4ecco_3lrr_3lts_9Component_lts, 0, 0, 0},
  {"on", __pyx_getprop_4ecco_3lrr_3lts_9Component_on, 0, 0, 0},
  {"off", __pyx_getprop_4ecco_3lrr_3lts_9Component_off, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts_Component_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts_Component},
  {Py_nb_or, (void *)__pyx_nb_or_4ecco_3lrr_3lts_Component},
  {Py_sq_length, (void *)__pyx_pw_4ecco_3lrr_3lts_9Component_11__len__},
  {Py_mp_length, (void *)__pyx_pw_4ecco_3lrr_3lts_9Component_11__len__},
  {Py_tp_hash, (void *)__pyx_pw_4ecco_3lrr_3lts_9Component_13__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("a set of states with properties\n\n    Components are meant to be used in graphs forming a partition of\n    the states of an LTS. They are obtained from splitting into\n    sub-components an inital component that contains all the states.\n\n    Components may have so called split properties that related to states\n    of the component to a set of states corresponding to a property.\n    This properties are encoded as `setrel` values:\n     - `EQUALS`: two sets of states are exactly the same\n     - `ISIN`: the component's states are all into the property's states\n     - `CONTAINS`: the component's states contains all of the property's states\n     - `HAS`: the component and property have sets in common but none is included\n       into the other\n     - `HASNO`: the component and property have no sets in common\n\n    Attributes:\n     - `num` (`int`): an identifier that is the same for all the existing components\n       that have the same set of states and the same underlying LTS\n     - `states` (`ddd.sdd`): the set of states in the component\n     - `graph_props`: a `dict` that map textual properties (`str`) to `bool`,\n       limited to topological properties in the LTS\n     - `split_props`: a `dict` that map textual properties (`str`) to `setrel`,\n       limited to properties that have been used to split components as explained above\n     - `lts`: the `LTS` from which the component is originated\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts_Component},
  {Py_tp_clear, (void *)__pyx_tp_clear_4ecco_3lrr_3lts_Component},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_4ecco_3lrr_3lts_Component},
  {Py_tp_methods, (void *)__pyx_methods_4ecco_3lrr_3lts_Component},
  {Py_tp_getset, (void *)__pyx_getsets_4ecco_3lrr_3lts_Component},
  {Py_tp_init, (void *)__pyx_pw_4ecco_3lrr_3lts_9Component_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts_Component},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts_Component_spec = {
  "ecco.lrr.lts.Component",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts_Component),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4ecco_3lrr_3lts_Component_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Component = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  __pyx_nb_or_4ecco_3lrr_3lts_Component, /*nb_or*/
  0, /*nb_int*/
  0, /*nb_long (reserved)*/
  0, /*nb_float*/
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  0, /*nb_matrix_multiply*/
  0, /*nb_inplace_matrix_multiply*/
};

static PySequenceMethods __pyx_tp_as_sequence_Component = {
  __pyx_pw_4ecco_3lrr_3lts_9Component_11__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Component = {
  __pyx_pw_4ecco_3lrr_3lts_9Component_11__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_4ecco_3lrr_3lts_Component = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""Component", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts_Component), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts_Component, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_Component, /*tp_as_number*/
  &__pyx_tp_as_sequence_Component, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Component, /*tp_as_mapping*/
  __pyx_pw_4ecco_3lrr_3lts_9Component_13__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("a set of states with properties\n\n    Components are meant to be used in graphs forming a partition of\n    the states of an LTS. They are obtained from splitting into\n    sub-components an inital component that contains all the states.\n\n    Components may have so called split properties that related to states\n    of the component to a set of states corresponding to a property.\n    This properties are encoded as `setrel` values:\n     - `EQUALS`: two sets of states are exactly the same\n     - `ISIN`: the component's states are all into the property's states\n     - `CONTAINS`: the component's states contains all of the property's states\n     - `HAS`: the component and property have sets in common but none is included\n       into the other\n     - `HASNO`: the component and property have no sets in common\n\n    Attributes:\n     - `num` (`int`): an identifier that is the same for all the existing components\n       that have the same set of states and the same underlying LTS\n     - `states` (`ddd.sdd`): the set of states in the component\n     - `graph_props`: a `dict` that map textual properties (`str`) to `bool`,\n       limited to topological properties in the LTS\n     - `split_props`: a `dict` that map textual properties (`str`) to `setrel`,\n       limited to properties that have been used to split components as explained above\n     - `lts`: the `LTS` from which the component is originated\n    "), /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts_Component, /*tp_traverse*/
  __pyx_tp_clear_4ecco_3lrr_3lts_Component, /*tp_clear*/
  __pyx_tp_richcompare_4ecco_3lrr_3lts_Component, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4ecco_3lrr_3lts_Component, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4ecco_3lrr_3lts_Component, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_4ecco_3lrr_3lts_9Component_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts_Component, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct____get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct____get__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct____get__[--__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct____get__];
    memset(o, 0, sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct____get__(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct____get__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct____get__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__)))) {
    __pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct____get__[__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct____get__++] = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct____get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__ *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct____get__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct____get__},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct____get__},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get___spec = {
  "ecco.lrr.lts.__pyx_scope_struct____get__",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get___slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""__pyx_scope_struct____get__", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct____get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct____get__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct____get__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct____get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_1_merge > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_1_merge[--__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_1_merge];
    memset(o, 0, sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_1_merge) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_1_merge < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge)))) {
    __pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_1_merge[__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_1_merge++] = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ecco_3lrr_3lts___pyx_scope_struct_1_merge(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_4ecco_3lrr_3lts_Component *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_1_merge},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_1_merge},
  {Py_tp_clear, (void *)__pyx_tp_clear_4ecco_3lrr_3lts___pyx_scope_struct_1_merge},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_1_merge},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge_spec = {
  "ecco.lrr.lts.__pyx_scope_struct_1_merge",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge_slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""__pyx_scope_struct_1_merge", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_1_merge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_1_merge, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_1_merge, /*tp_traverse*/
  __pyx_tp_clear_4ecco_3lrr_3lts___pyx_scope_struct_1_merge, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_1_merge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr[--__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_oth);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr[__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_oth) {
    e = (*v)(p->__pyx_v_oth, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr_spec = {
  "ecco.lrr.lts.__pyx_scope_struct_2_genexpr",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_3_succ(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_3_succ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_3_succ[--__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_3_succ];
    memset(o, 0, sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_3_succ(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_3_succ) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_c);
  Py_CLEAR(p->__pyx_v_h);
  Py_CLEAR(p->__pyx_v_others);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_t);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_4);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_3_succ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ)))) {
    __pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_3_succ[__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_3_succ++] = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_3_succ(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(((PyObject *)p->__pyx_v_c), a); if (e) return e;
  }
  if (p->__pyx_v_h) {
    e = (*v)(((PyObject *)p->__pyx_v_h), a); if (e) return e;
  }
  if (p->__pyx_v_others) {
    e = (*v)(p->__pyx_v_others, a); if (e) return e;
  }
  if (p->__pyx_v_s) {
    e = (*v)(p->__pyx_v_s, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_3_succ},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_3_succ},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_3_succ},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ_spec = {
  "ecco.lrr.lts.__pyx_scope_struct_3_succ",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ_slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""__pyx_scope_struct_3_succ", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_3_succ), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_3_succ, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_3_succ, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_3_succ, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit[--__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit];
    memset(o, 0, sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit(PyObject *o) {
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_state);
  Py_CLEAR(p->__pyx_t_1);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit)))) {
    __pyx_mstate_global->__pyx_freelist_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit[__pyx_mstate_global->__pyx_freecount_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit++] = ((struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *p = (struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_state) {
    e = (*v)(((PyObject *)p->__pyx_v_state), a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit},
  {Py_tp_new, (void *)__pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit},
  {0, 0},
};
static PyType_Spec __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit_spec = {
  "ecco.lrr.lts.__pyx_scope_struct_4_explicit",
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit_slots,
};
#else

static PyTypeObject __pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit = {
  PyVarObject_HEAD_INIT(0, 0)
  "ecco.lrr.lts.""__pyx_scope_struct_4_explicit", /*tp_name*/
  sizeof(struct __pyx_obj_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4ecco_3lrr_3lts__CompoCache = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_EnumBase = Py_None; Py_INCREF(Py_None);
  __Pyx_FlagBase = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4ecco_3lrr_3lts_LTS = &__pyx_vtable_4ecco_3lrr_3lts_LTS;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.save_file = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_save_file;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.dump = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_dump;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.copy = (struct __pyx_obj_4ecco_3lrr_3lts_LTS *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_copy;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_succ = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_succ;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_initial_states = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_initial_states_one = (struct __pyx_obj_3ddd_sdd *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_initial_states_one;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_reachable_states = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_reachable_states;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_compact = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_compact;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_pred = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_pred;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_dead_states = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_dead_states;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._build_hull_states = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *))__pyx_f_4ecco_3lrr_3lts_3LTS__build_hull_states;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.graph_props = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_graph_props;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.is_dead = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_is_dead;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.isin_dead = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_isin_dead;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.has_dead = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_has_dead;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.is_init = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_is_init;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.isin_init = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_isin_init;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.has_init = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_has_init;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.is_hull = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_is_hull;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.is_scc = (int (*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_is_scc;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.add_prop = (struct __pyx_obj_3ddd_sdd *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_add_prop *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_3LTS_add_prop;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.var2sdd = (struct __pyx_obj_3ddd_sdd *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_3LTS_var2sdd;
  __pyx_vtable_4ecco_3lrr_3lts_LTS.form = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_3LTS_form *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_3LTS_form;
  __pyx_vtable_4ecco_3lrr_3lts_LTS._form = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_LTS *, struct __pyx_obj_3ddd_ddd *, PyObject *, PyObject *))__pyx_f_4ecco_3lrr_3lts_3LTS__form;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts_LTS_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS)) __PYX_ERR(0, 22, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts_LTS_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS = &__pyx_type_4ecco_3lrr_3lts_LTS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 22, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_4ecco_3lrr_3lts_3LTS_16__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ecco_3lrr_3lts_3LTS_16__init__.doc = __pyx_doc_4ecco_3lrr_3lts_3LTS_16__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ecco_3lrr_3lts_3LTS_16__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_vtabptr_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_LTS, (PyObject *) __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_LTS) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_vtabptr_4ecco_3lrr_3lts_Component = &__pyx_vtable_4ecco_3lrr_3lts_Component;
  __pyx_vtable_4ecco_3lrr_3lts_Component.dump = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_9Component_dump;
  __pyx_vtable_4ecco_3lrr_3lts_Component._load = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *))__pyx_f_4ecco_3lrr_3lts_9Component__load;
  __pyx_vtable_4ecco_3lrr_3lts_Component.copy = (struct __pyx_obj_4ecco_3lrr_3lts_Component *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_copy *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_copy;
  __pyx_vtable_4ecco_3lrr_3lts_Component._copy = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_4ecco_3lrr_3lts_Component *))__pyx_f_4ecco_3lrr_3lts_9Component__copy;
  __pyx_vtable_4ecco_3lrr_3lts_Component.props_row = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_props_row *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_props_row;
  __pyx_vtable_4ecco_3lrr_3lts_Component._update_prop = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, PyObject *, struct __pyx_obj_3ddd_sdd *))__pyx_f_4ecco_3lrr_3lts_9Component__update_prop;
  __pyx_vtable_4ecco_3lrr_3lts_Component.tag = (void (*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_9Component_tag;
  __pyx_vtable_4ecco_3lrr_3lts_Component.check = (enum __pyx_t_4ecco_3lrr_3lts_setrel (*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_check *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_check;
  __pyx_vtable_4ecco_3lrr_3lts_Component.split = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *, struct __pyx_obj_3ddd_sdd *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_split *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_split;
  __pyx_vtable_4ecco_3lrr_3lts_Component._make_split = (struct __pyx_obj_4ecco_3lrr_3lts_Component *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *))__pyx_f_4ecco_3lrr_3lts_9Component__make_split;
  __pyx_vtable_4ecco_3lrr_3lts_Component._copy_graph_props = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *))__pyx_f_4ecco_3lrr_3lts_9Component__copy_graph_props;
  __pyx_vtable_4ecco_3lrr_3lts_Component._merge = (struct __pyx_obj_4ecco_3lrr_3lts_Component *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, PyObject *))__pyx_f_4ecco_3lrr_3lts_9Component__merge;
  __pyx_vtable_4ecco_3lrr_3lts_Component._explicit = (struct __pyx_obj_4ecco_3lrr_3lts_Component *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_sdd *))__pyx_f_4ecco_3lrr_3lts_9Component__explicit;
  __pyx_vtable_4ecco_3lrr_3lts_Component.topo_split = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_topo_split *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_topo_split;
  __pyx_vtable_4ecco_3lrr_3lts_Component.count = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_9Component_count;
  __pyx_vtable_4ecco_3lrr_3lts_Component._count = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, struct __pyx_obj_3ddd_ddd *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_9Component__count;
  __pyx_vtable_4ecco_3lrr_3lts_Component.on_off = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch))__pyx_f_4ecco_3lrr_3lts_9Component_on_off;
  __pyx_vtable_4ecco_3lrr_3lts_Component.form = (PyObject *(*)(struct __pyx_obj_4ecco_3lrr_3lts_Component *, int __pyx_skip_dispatch, struct __pyx_opt_args_4ecco_3lrr_3lts_9Component_form *__pyx_optional_args))__pyx_f_4ecco_3lrr_3lts_9Component_form;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts_Component_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component)) __PYX_ERR(0, 465, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts_Component_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component = &__pyx_type_4ecco_3lrr_3lts_Component;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 465, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_2__init__.doc = __pyx_doc_4ecco_3lrr_3lts_9Component_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ecco_3lrr_3lts_9Component_2__init__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 465, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_10__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_10__len__.doc = __pyx_doc_4ecco_3lrr_3lts_9Component_10__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ecco_3lrr_3lts_9Component_10__len__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component, "__or__"); if (unlikely(!wrapper)) __PYX_ERR(0, 465, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_26__or__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ecco_3lrr_3lts_9Component_26__or__.doc = __pyx_doc_4ecco_3lrr_3lts_9Component_26__or__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ecco_3lrr_3lts_9Component_26__or__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_vtabptr_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Component, (PyObject *) __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts_Component) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get___spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__)) __PYX_ERR(0, 563, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get___spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__ = &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct____get__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct____get__->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge)) __PYX_ERR(0, 660, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge = &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_1_merge;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_1_merge->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr)) __PYX_ERR(0, 667, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 667, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr = &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 667, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_2_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ)) __PYX_ERR(0, 686, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ = &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_3_succ;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_3_succ->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit)) __PYX_ERR(0, 702, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit_spec, __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit = &__pyx_type_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit->tp_dictoffset && __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_4ecco_3lrr_3lts___pyx_scope_struct_4_explicit->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("ddd"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_3ddd_xdd = __Pyx_ImportType_3_1_4(__pyx_t_1, "ddd", "xdd",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_3ddd_xdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_xdd),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_3ddd_xdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_xdd),
  #else
  sizeof(struct __pyx_obj_3ddd_xdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_xdd),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_4); if (!__pyx_mstate->__pyx_ptype_3ddd_xdd) __PYX_ERR(2, 4, __pyx_L1_error)
  __pyx_vtabptr_3ddd_xdd = (struct __pyx_vtabstruct_3ddd_xdd*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_3ddd_xdd); if (unlikely(!__pyx_vtabptr_3ddd_xdd)) __PYX_ERR(2, 4, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_3ddd_ddd = __Pyx_ImportType_3_1_4(__pyx_t_1, "ddd", "ddd",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_3ddd_ddd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_ddd),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_3ddd_ddd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_ddd),
  #else
  sizeof(struct __pyx_obj_3ddd_ddd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_ddd),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_4); if (!__pyx_mstate->__pyx_ptype_3ddd_ddd) __PYX_ERR(2, 32, __pyx_L1_error)
  __pyx_vtabptr_3ddd_ddd = (struct __pyx_vtabstruct_3ddd_ddd*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_3ddd_ddd); if (unlikely(!__pyx_vtabptr_3ddd_ddd)) __PYX_ERR(2, 32, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_3ddd_sdd = __Pyx_ImportType_3_1_4(__pyx_t_1, "ddd", "sdd",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_3ddd_sdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_sdd),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_3ddd_sdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_sdd),
  #else
  sizeof(struct __pyx_obj_3ddd_sdd), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_sdd),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_4); if (!__pyx_mstate->__pyx_ptype_3ddd_sdd) __PYX_ERR(2, 72, __pyx_L1_error)
  __pyx_vtabptr_3ddd_sdd = (struct __pyx_vtabstruct_3ddd_sdd*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_3ddd_sdd); if (unlikely(!__pyx_vtabptr_3ddd_sdd)) __PYX_ERR(2, 72, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_3ddd_shom = __Pyx_ImportType_3_1_4(__pyx_t_1, "ddd", "shom",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_3ddd_shom), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_shom),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_3ddd_shom), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_shom),
  #else
  sizeof(struct __pyx_obj_3ddd_shom), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3ddd_shom),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_4); if (!__pyx_mstate->__pyx_ptype_3ddd_shom) __PYX_ERR(2, 100, __pyx_L1_error)
  __pyx_vtabptr_3ddd_shom = (struct __pyx_vtabstruct_3ddd_shom*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_3ddd_shom); if (unlikely(!__pyx_vtabptr_3ddd_shom)) __PYX_ERR(2, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("its"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_3its_model = __Pyx_ImportType_3_1_4(__pyx_t_1, "its", "model",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_3its_model), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3its_model),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_3its_model), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3its_model),
  #else
  sizeof(struct __pyx_obj_3its_model), __PYX_GET_STRUCT_ALIGNMENT_3_1_4(struct __pyx_obj_3its_model),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_4); if (!__pyx_mstate->__pyx_ptype_3its_model) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_vtabptr_3its_model = (struct __pyx_vtabstruct_3its_model*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_3its_model); if (unlikely(!__pyx_vtabptr_3its_model)) __PYX_ERR(3, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_lts(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_lts},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "lts",
      0, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_lts(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_lts(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_lts(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'lts' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "lts" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_lts", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_ecco__lrr__lts) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name_2, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ecco.lrr.lts")) {
      if (unlikely((PyDict_SetItemString(modules, "ecco.lrr.lts", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "EnumBase":10
 * 
 * cdef object __Pyx_EnumBase
 * from enum import IntEnum as __Pyx_EnumBase             # <<<<<<<<<<<<<<
 * 
 * cdef object __Pyx_FlagBase
*/
  __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_IntEnum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_enum, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_IntEnum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__Pyx_EnumBase);
  __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "EnumBase":13
 * 
 * cdef object __Pyx_FlagBase
 * from enum import IntFlag as __Pyx_FlagBase             # <<<<<<<<<<<<<<
 * 
*/
  __pyx_t_3 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_IntFlag); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_enum, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_IntFlag); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XGOTREF(__Pyx_FlagBase);
  __Pyx_DECREF_SET(__Pyx_FlagBase, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "EnumType":23
 * 
 * 
 * setrel = __Pyx_FlagBase('setrel', [             # <<<<<<<<<<<<<<
 *     ('HASNO', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HASNO)),
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF(__Pyx_FlagBase);
  __pyx_t_4 = __Pyx_FlagBase; 

  /* "EnumType":24
 * 
 * setrel = __Pyx_FlagBase('setrel', [
 *     ('HASNO', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HASNO)),             # <<<<<<<<<<<<<<
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),
 *     ('CONTAINS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(CONTAINS)),
*/
  __pyx_t_5 = __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_e_4ecco_3lrr_3lts_HASNO); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_HASNO, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumType":25
 * setrel = __Pyx_FlagBase('setrel', [
 *     ('HASNO', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HASNO)),
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),             # <<<<<<<<<<<<<<
 *     ('CONTAINS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(CONTAINS)),
 *     ('ISIN', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(ISIN)),
*/
  __pyx_t_5 = __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_e_4ecco_3lrr_3lts_HAS); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_HAS, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumType":26
 *     ('HASNO', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HASNO)),
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),
 *     ('CONTAINS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(CONTAINS)),             # <<<<<<<<<<<<<<
 *     ('ISIN', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(ISIN)),
 *     ('EQUALS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(EQUALS)),
*/
  __pyx_t_5 = __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_e_4ecco_3lrr_3lts_CONTAINS); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_CONTAINS, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumType":27
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),
 *     ('CONTAINS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(CONTAINS)),
 *     ('ISIN', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(ISIN)),             # <<<<<<<<<<<<<<
 *     ('EQUALS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(EQUALS)),
 * 
*/
  __pyx_t_5 = __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_e_4ecco_3lrr_3lts_ISIN); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_ISIN, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumType":28
 *     ('CONTAINS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(CONTAINS)),
 *     ('ISIN', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(ISIN)),
 *     ('EQUALS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(EQUALS)),             # <<<<<<<<<<<<<<
 * 
 * ], module=globals().get("__module__", 'ecco.lrr.lts'))
*/
  __pyx_t_5 = __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(__pyx_e_4ecco_3lrr_3lts_EQUALS); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_EQUALS, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumType":23
 * 
 * 
 * setrel = __Pyx_FlagBase('setrel', [             # <<<<<<<<<<<<<<
 *     ('HASNO', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HASNO)),
 *     ('HAS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(HAS)),
*/
  __pyx_t_5 = __Pyx_PyList_Pack(5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "EnumType":30
 *     ('EQUALS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(EQUALS)),
 * 
 * ], module=globals().get("__module__", 'ecco.lrr.lts'))             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x030B0000:
*/
  __pyx_t_10 = __Pyx_Globals(); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_get_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_mstate_global->__pyx_tuple[3], NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_setrel, __pyx_t_5};
    __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_module, __pyx_t_10, __pyx_t_9, __pyx_callargs+3, 0) < 0) __PYX_ERR(1, 23, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setrel, __pyx_t_2) < 0) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "EnumType":32
 * ], module=globals().get("__module__", 'ecco.lrr.lts'))
 * 
 * if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_12 = (PY_VERSION_HEX >= 0x030B0000);
  if (__pyx_t_12) {

    /* "EnumType":37
 * 
 * 
 *     setrel._member_names_ = list(setrel.__members__)             # <<<<<<<<<<<<<<
 * 
*/
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_setrel); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_members); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_setrel); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_member_names, __pyx_t_2) < 0) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "EnumType":32
 * ], module=globals().get("__module__", 'ecco.lrr.lts'))
 * 
 * if PY_VERSION_HEX >= 0x030B0000:             # <<<<<<<<<<<<<<
 * 
 * 
*/
  }

  /* "ecco/lrr/lts.pyx":4
 * # distutils: include_dirs = ../pyddd ../libDDD ../libITS
 * 
 * import inspect             # <<<<<<<<<<<<<<
 * import sympy
 * 
*/
  __pyx_t_4 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_inspect, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_inspect, __pyx_t_4) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":5
 * 
 * import inspect
 * import sympy             # <<<<<<<<<<<<<<
 * 
 * from ddd cimport ddd, sdd, shom
*/
  __pyx_t_4 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_sympy, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_sympy, __pyx_t_4) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":10
 * from its cimport model
 * 
 * from ddd import ddd_save, ddd_load             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "dddwrap.h" :
*/
  __pyx_t_4 = __Pyx_PyList_Pack(2, __pyx_mstate_global->__pyx_n_u_ddd_save, __pyx_mstate_global->__pyx_n_u_ddd_load); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_ddd, __pyx_t_4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ddd_save); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ddd_save, __pyx_t_4) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ddd_load); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ddd_load, __pyx_t_4) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":56
 *     cdef readonly shom constraints
 *     cdef readonly sdd transient
 *     cpdef void save_file (LTS self, str path) :             # <<<<<<<<<<<<<<
 *         """save LTS to file `path`
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_1save_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_save_file, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_save_file, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":65
 *         cdef list ddds = dump.pop("DDD")
 *         ddd_save(path, *ddds, **dump)
 *     cpdef dict dump (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef list ddds = [s2d(self.init), s2d(self.states),
 *                           s2d(self.dead), s2d(self.hull),
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_3dump, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_dump, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_dump, __pyx_t_2) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":81
 *                 "compact" : self.compact,
 *                 "DDD" : ddds}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dict dump) :
 *         cdef list props
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_5load, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_load, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load, __pyx_t_2) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject*)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load, __pyx_t_4) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":105
 *         lts._build_pred()
 *         return lts
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load_file (cls, str path) :
 *         """load a previously saved LTS
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_7load_file, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_load_file, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load_file, __pyx_t_4) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetNameInClass(__pyx_t_4, (PyObject*)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_load_file, __pyx_t_2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":126
 *         self.tpred = {}
 *         self._var2sdd = {}
 *     cpdef LTS copy (LTS self) :             # <<<<<<<<<<<<<<
 *         cdef LTS lts = LTS.__new__(LTS, self.path)
 *         lts.gal = self.gal
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_11copy, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_copy, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_copy, __pyx_t_2) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":304
 *         # intersect with self.states to remove potential transient states
 *         self.hull = (self.pred_o(self.states) & self.succ_o(self.states)) & self.states
 *     cpdef dict graph_props (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         cdef dict cp = {}
 *         for name, method in sorted(inspect.getmembers(self, callable)) :
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_19graph_props, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_graph_props, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_graph_props, __pyx_t_2) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":312
 *                 cp[name] = method(states)
 *         return cp
 *     cpdef bint is_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all deadlocks
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_21is_dead, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_is_dead, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_is_dead, __pyx_t_2) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":320
 *         """
 *         return states == self.dead
 *     cpdef bint isin_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all deadlocks
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_23isin_dead, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_isin_dead, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_isin_dead, __pyx_t_2) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":328
 *         """
 *         return states < self.dead
 *     cpdef bint has_dead (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains deadlock
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_25has_dead, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_has_dead, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_has_dead, __pyx_t_2) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":336
 *         """
 *         return bool(states & self.dead)
 *     cpdef bint is_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is the set of all initial states
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_27is_init, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_is_init, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_is_init, __pyx_t_2) < 0) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":344
 *         """
 *         return states == self.init
 *     cpdef bint isin_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains only but not all initial states
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_29isin_init, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_isin_init, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_isin_init, __pyx_t_2) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":352
 *         """
 *         return states < self.init
 *     cpdef bint has_init (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` contains initial state
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_31has_init, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_has_init, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[15])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_has_init, __pyx_t_2) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":360
 *         """
 *         return bool(states & self.init)
 *     cpdef bint is_hull (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC hull (not necessarily the largest one)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_33is_hull, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_is_hull, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[16])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_is_hull, __pyx_t_2) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":369
 *         cdef sdd s = states & self.states
 *         return (self.succ_o(s) & self.pred_o(s)) == s
 *     cpdef bint is_scc (LTS self, sdd states) :             # <<<<<<<<<<<<<<
 *         """check whether `states` is a SCC
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_35is_scc, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_is_scc, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[17])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_is_scc, __pyx_t_2) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":382
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :             # <<<<<<<<<<<<<<
 *         """adds a property to the LTS
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_37add_prop, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_add_prop, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[18])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[4]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_add_prop, __pyx_t_2) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":401
 *             self.props[prop] = s
 *             return s
 *     cpdef sdd var2sdd (LTS self, str name) :             # <<<<<<<<<<<<<<
 *         cdef str v
 *         cdef ddd d
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_39var2sdd, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_var2sdd, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[19])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_var2sdd, __pyx_t_2) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":413
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe a set of states by a Boolean formula
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_41form, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS_form, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[20])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[5]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_LTS, __pyx_mstate_global->__pyx_n_u_form, __pyx_t_2) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_43__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[21])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_3LTS_45__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_LTS___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[22])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":463
 * ctypedef unsigned long long CompoID
 * 
 * cdef dict _CompoCache = {}             # <<<<<<<<<<<<<<
 * 
 * cdef class Component (object) :
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_4ecco_3lrr_3lts__CompoCache);
  __Pyx_DECREF_SET(__pyx_v_4ecco_3lrr_3lts__CompoCache, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":498
 *     cdef readonly LTS lts
 *     cdef readonly tuple on, off
 *     def __cinit__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         self.lts = lts
 *         self.states = states
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate_global->__pyx_k__6 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate_global->__pyx_k__7 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":503
 *         self.graph_props = dict(gp)
 *         self.split_props = dict(sp)
 *     def __init__ (Component self, LTS lts, sdd states, dict gp={}, dict sp={}) :             # <<<<<<<<<<<<<<
 *         """create an instance of a `Component`
 * 
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate_global->__pyx_k__8 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate_global->__pyx_k__9 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":522
 *         self.on = tuple(on)
 *         self.off = tuple(off)
 *     cpdef dict dump (Component self) :             # <<<<<<<<<<<<<<
 *         return {"DDD" : [s2d(self.states)],
 *                 "num" : self.num,
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_5dump, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_dump, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[23])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_dump, __pyx_t_2) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ecco/lrr/lts.pyx":529
 *                 "on" : self.on,
 *                 "off" : self.off}
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load (cls, dump, lts) :
 *         cdef Component compo = Component.__new__(Component,
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_7load, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_load, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[24])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_load, __pyx_t_2) < 0) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject*)__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_load); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_load, __pyx_t_4) < 0) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":542
 *         self.on = dump["on"]
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :             # <<<<<<<<<<<<<<
 *         cdef Component compo
 *         if lts is None :
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_9copy, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_copy, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[25])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[6]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_copy, __pyx_t_4) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":571
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_17props_row, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_props_row, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[26])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[7]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_props_row, __pyx_t_4) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":597
 *         else :
 *             pdict[prop] = setrel.HASNO
 *     cpdef void tag (Component self, str name) :             # <<<<<<<<<<<<<<
 *         """add a dummy property to component
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_19tag, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_tag, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[27])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_tag, __pyx_t_4) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":608
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """check a split property on component
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_21check, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_check, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[28])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[8]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_check, __pyx_t_4) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":621
 *         self._update_prop(self.split_props, prop, self.states)
 *         return self.split_props[prop]
 *     cpdef tuple split (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """split component wrt a property
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_23split, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_split, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[29])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[8]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_split, __pyx_t_4) < 0) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":660
 *         return {p : getattr(self.lts, p)(states)
 *                 for p, b in self.graph_props.items()}
 *     def merge (Component self, Component first, *rest) :             # <<<<<<<<<<<<<<
 *         """merge a component with others
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_25merge, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_merge, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[30])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_merge, __pyx_t_4) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":686
 *             self._update_prop(split_props, p, states)
 *         return Component(self.lts, states, gp=graph_props, sp=split_props)
 *     def succ (Component self, *others) :             # <<<<<<<<<<<<<<
 *         """computes the transitions from a component to others
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_29succ, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_succ, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_succ, __pyx_t_4) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":702
 *                     yield t, c
 *         return s
 *     def explicit (Component self) :             # <<<<<<<<<<<<<<
 *         """splits a component into one-state sub-components
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_32explicit, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_explicit, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_explicit, __pyx_t_4) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_35topo_split, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_topo_split, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[31])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[9]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_topo_split, __pyx_t_4) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":790
 *                 self._make_split(dead) if dead else None,
 *                 self._make_split(rest) if rest else None)
 *     cpdef dict count (Component self) :             # <<<<<<<<<<<<<<
 *         "return the number of on occurrences of each variable"
 *         cdef dict seen = {}
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_37count, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_count, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[32])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_count, __pyx_t_4) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":795
 *         cdef ddd d = s2d(self.states)
 *         return self._count(d, seen)
 *     cpdef dict _count (Component self, ddd head, dict seen) :             # <<<<<<<<<<<<<<
 *         cdef dict ret, sub
 *         cdef str var, v
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_39_count, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component__count, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[33])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_count_2, __pyx_t_4) < 0) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":814
 *                 ret[v] = ret.get(v, 0) + sub[v]
 *         return ret
 *     cpdef tuple on_off (Component self) :             # <<<<<<<<<<<<<<
 *         "return a pair of sets `on, off` for the always-on and always-off variables"
 *         cdef dict cnt = self.count()
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_41on_off, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_on_off, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[34])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_on_off, __pyx_t_4) < 0) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":828
 *                 on.add(var)
 *         return on, off
 *     cpdef object form (Component self, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe the component states states by a Boolean formula
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_43form, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component_form, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[35])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[5]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_4ecco_3lrr_3lts_Component, __pyx_mstate_global->__pyx_n_u_form, __pyx_t_4) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_45__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[36])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ecco_3lrr_3lts_9Component_47__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Component___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_ecco_lrr_lts, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[37])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ecco/lrr/lts.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: include_dirs = ../pyddd ../libDDD ../libITS
 * 
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init ecco.lrr.lts", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ecco.lrr.lts");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_C, sizeof(__pyx_k_C), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C */
  {__pyx_k_CONTAINS, sizeof(__pyx_k_CONTAINS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CONTAINS */
  {__pyx_k_Component, sizeof(__pyx_k_Component), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component */
  {__pyx_k_Component___get, sizeof(__pyx_k_Component___get), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component___get */
  {__pyx_k_Component___reduce_cython, sizeof(__pyx_k_Component___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component___reduce_cython */
  {__pyx_k_Component___setstate_cython, sizeof(__pyx_k_Component___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component___setstate_cython */
  {__pyx_k_Component__count, sizeof(__pyx_k_Component__count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component__count */
  {__pyx_k_Component_check, sizeof(__pyx_k_Component_check), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_check */
  {__pyx_k_Component_copy, sizeof(__pyx_k_Component_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_copy */
  {__pyx_k_Component_count, sizeof(__pyx_k_Component_count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_count */
  {__pyx_k_Component_dump, sizeof(__pyx_k_Component_dump), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_dump */
  {__pyx_k_Component_explicit, sizeof(__pyx_k_Component_explicit), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_explicit */
  {__pyx_k_Component_form, sizeof(__pyx_k_Component_form), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_form */
  {__pyx_k_Component_load, sizeof(__pyx_k_Component_load), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_load */
  {__pyx_k_Component_merge, sizeof(__pyx_k_Component_merge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_merge */
  {__pyx_k_Component_on_off, sizeof(__pyx_k_Component_on_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_on_off */
  {__pyx_k_Component_props_row, sizeof(__pyx_k_Component_props_row), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_props_row */
  {__pyx_k_Component_split, sizeof(__pyx_k_Component_split), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_split */
  {__pyx_k_Component_succ, sizeof(__pyx_k_Component_succ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_succ */
  {__pyx_k_Component_tag, sizeof(__pyx_k_Component_tag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_tag */
  {__pyx_k_Component_topo_split, sizeof(__pyx_k_Component_topo_split), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Component_topo_split */
  {__pyx_k_DDD, sizeof(__pyx_k_DDD), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DDD */
  {__pyx_k_EQUALS, sizeof(__pyx_k_EQUALS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_EQUALS */
  {__pyx_k_GAL, sizeof(__pyx_k_GAL), 0, 1, 1}, /* PyObject cname: __pyx_n_u_GAL */
  {__pyx_k_HAS, sizeof(__pyx_k_HAS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_HAS */
  {__pyx_k_HASNO, sizeof(__pyx_k_HASNO), 0, 1, 1}, /* PyObject cname: __pyx_n_u_HASNO */
  {__pyx_k_ISIN, sizeof(__pyx_k_ISIN), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ISIN */
  {__pyx_k_IntEnum, sizeof(__pyx_k_IntEnum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_IntEnum */
  {__pyx_k_IntFlag, sizeof(__pyx_k_IntFlag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_IntFlag */
  {__pyx_k_LTS, sizeof(__pyx_k_LTS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS */
  {__pyx_k_LTS___reduce_cython, sizeof(__pyx_k_LTS___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS___reduce_cython */
  {__pyx_k_LTS___setstate_cython, sizeof(__pyx_k_LTS___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS___setstate_cython */
  {__pyx_k_LTS_add_prop, sizeof(__pyx_k_LTS_add_prop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_add_prop */
  {__pyx_k_LTS_copy, sizeof(__pyx_k_LTS_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_copy */
  {__pyx_k_LTS_dump, sizeof(__pyx_k_LTS_dump), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_dump */
  {__pyx_k_LTS_form, sizeof(__pyx_k_LTS_form), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_form */
  {__pyx_k_LTS_graph_props, sizeof(__pyx_k_LTS_graph_props), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_graph_props */
  {__pyx_k_LTS_has_dead, sizeof(__pyx_k_LTS_has_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_has_dead */
  {__pyx_k_LTS_has_init, sizeof(__pyx_k_LTS_has_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_has_init */
  {__pyx_k_LTS_is_dead, sizeof(__pyx_k_LTS_is_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_is_dead */
  {__pyx_k_LTS_is_hull, sizeof(__pyx_k_LTS_is_hull), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_is_hull */
  {__pyx_k_LTS_is_init, sizeof(__pyx_k_LTS_is_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_is_init */
  {__pyx_k_LTS_is_scc, sizeof(__pyx_k_LTS_is_scc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_is_scc */
  {__pyx_k_LTS_isin_dead, sizeof(__pyx_k_LTS_isin_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_isin_dead */
  {__pyx_k_LTS_isin_init, sizeof(__pyx_k_LTS_isin_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_isin_init */
  {__pyx_k_LTS_load, sizeof(__pyx_k_LTS_load), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_load */
  {__pyx_k_LTS_load_file, sizeof(__pyx_k_LTS_load_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_load_file */
  {__pyx_k_LTS_save_file, sizeof(__pyx_k_LTS_save_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_save_file */
  {__pyx_k_LTS_var2sdd, sizeof(__pyx_k_LTS_var2sdd), 0, 1, 1}, /* PyObject cname: __pyx_n_u_LTS_var2sdd */
  {__pyx_k_Not, sizeof(__pyx_k_Not), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Not */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_Or, sizeof(__pyx_k_Or), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Or */
  {__pyx_k_Symbol, sizeof(__pyx_k_Symbol), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Symbol */
  {__pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TypeError */
  {__pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ValueError */
  {__pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__10 */
  {__pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__11 */
  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__2 */
  {__pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__3 */
  {__pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__4 */
  {__pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__5 */
  {__pyx_k_add, sizeof(__pyx_k_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_add */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_add_prop, sizeof(__pyx_k_add_prop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_add_prop */
  {__pyx_k_alias, sizeof(__pyx_k_alias), 0, 1, 1}, /* PyObject cname: __pyx_n_u_alias */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_c, sizeof(__pyx_k_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c */
  {__pyx_k_callable, sizeof(__pyx_k_callable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_callable */
  {__pyx_k_check, sizeof(__pyx_k_check), 0, 1, 1}, /* PyObject cname: __pyx_n_u_check */
  {__pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 1, 1}, /* PyObject cname: __pyx_n_u_class_getitem */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_close, sizeof(__pyx_k_close), 0, 1, 1}, /* PyObject cname: __pyx_n_u_close */
  {__pyx_k_cls, sizeof(__pyx_k_cls), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cls */
  {__pyx_k_compact, sizeof(__pyx_k_compact), 0, 1, 1}, /* PyObject cname: __pyx_n_u_compact */
  {__pyx_k_compo, sizeof(__pyx_k_compo), 0, 1, 1}, /* PyObject cname: __pyx_n_u_compo */
  {__pyx_k_components_do_not_belong_to_the, sizeof(__pyx_k_components_do_not_belong_to_the), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_components_do_not_belong_to_the */
  {__pyx_k_copy, sizeof(__pyx_k_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_copy */
  {__pyx_k_count, sizeof(__pyx_k_count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count */
  {__pyx_k_count_2, sizeof(__pyx_k_count_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count_2 */
  {__pyx_k_d, sizeof(__pyx_k_d), 0, 1, 1}, /* PyObject cname: __pyx_n_u_d */
  {__pyx_k_ddd, sizeof(__pyx_k_ddd), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ddd */
  {__pyx_k_ddd_load, sizeof(__pyx_k_ddd_load), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ddd_load */
  {__pyx_k_ddd_save, sizeof(__pyx_k_ddd_save), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ddd_save */
  {__pyx_k_ddds, sizeof(__pyx_k_ddds), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ddds */
  {__pyx_k_dead, sizeof(__pyx_k_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dead */
  {__pyx_k_dict, sizeof(__pyx_k_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dict */
  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_disable */
  {__pyx_k_dump, sizeof(__pyx_k_dump), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dump */
  {__pyx_k_ecco_lrr_lts, sizeof(__pyx_k_ecco_lrr_lts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ecco_lrr_lts */
  {__pyx_k_ecco_lrr_lts, sizeof(__pyx_k_ecco_lrr_lts), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ecco_lrr_lts */
  {__pyx_k_ecco_lrr_lts_pyx, sizeof(__pyx_k_ecco_lrr_lts_pyx), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ecco_lrr_lts_pyx */
  {__pyx_k_ecco_lts_lTS, sizeof(__pyx_k_ecco_lts_lTS), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ecco_lts_lTS */
  {__pyx_k_edges, sizeof(__pyx_k_edges), 0, 1, 1}, /* PyObject cname: __pyx_n_u_edges */
  {__pyx_k_empty, sizeof(__pyx_k_empty), 0, 1, 1}, /* PyObject cname: __pyx_n_u_empty */
  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_enable */
  {__pyx_k_enum, sizeof(__pyx_k_enum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enum */
  {__pyx_k_explicit, sizeof(__pyx_k_explicit), 0, 1, 1}, /* PyObject cname: __pyx_n_u_explicit */
  {__pyx_k_first, sizeof(__pyx_k_first), 0, 1, 1}, /* PyObject cname: __pyx_n_u_first */
  {__pyx_k_fmt, sizeof(__pyx_k_fmt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fmt */
  {__pyx_k_form, sizeof(__pyx_k_form), 0, 1, 1}, /* PyObject cname: __pyx_n_u_form */
  {__pyx_k_from_range, sizeof(__pyx_k_from_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_from_range */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_gc */
  {__pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_genexpr */
  {__pyx_k_get, sizeof(__pyx_k_get), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get */
  {__pyx_k_get_2, sizeof(__pyx_k_get_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_2 */
  {__pyx_k_getmembers, sizeof(__pyx_k_getmembers), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getmembers */
  {__pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getstate */
  {__pyx_k_gp, sizeof(__pyx_k_gp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gp */
  {__pyx_k_graph_props, sizeof(__pyx_k_graph_props), 0, 1, 1}, /* PyObject cname: __pyx_n_u_graph_props */
  {__pyx_k_h, sizeof(__pyx_k_h), 0, 1, 1}, /* PyObject cname: __pyx_n_u_h */
  {__pyx_k_has, sizeof(__pyx_k_has), 0, 1, 1}, /* PyObject cname: __pyx_n_u_has */
  {__pyx_k_has_dead, sizeof(__pyx_k_has_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_has_dead */
  {__pyx_k_has_init, sizeof(__pyx_k_has_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_has_init */
  {__pyx_k_head, sizeof(__pyx_k_head), 0, 1, 1}, /* PyObject cname: __pyx_n_u_head */
  {__pyx_k_hull, sizeof(__pyx_k_hull), 0, 1, 1}, /* PyObject cname: __pyx_n_u_hull */
  {__pyx_k_ident, sizeof(__pyx_k_ident), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ident */
  {__pyx_k_init, sizeof(__pyx_k_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_init */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 1, 1}, /* PyObject cname: __pyx_n_u_inspect */
  {__pyx_k_invalid_initial_state, sizeof(__pyx_k_invalid_initial_state), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_invalid_initial_state */
  {__pyx_k_is, sizeof(__pyx_k_is), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_is_dead, sizeof(__pyx_k_is_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_dead */
  {__pyx_k_is_hull, sizeof(__pyx_k_is_hull), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_hull */
  {__pyx_k_is_init, sizeof(__pyx_k_is_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_init */
  {__pyx_k_is_scc, sizeof(__pyx_k_is_scc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_scc */
  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_isenabled */
  {__pyx_k_isin, sizeof(__pyx_k_isin), 0, 1, 1}, /* PyObject cname: __pyx_n_u_isin */
  {__pyx_k_isin_dead, sizeof(__pyx_k_isin_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_isin_dead */
  {__pyx_k_isin_init, sizeof(__pyx_k_isin_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_isin_init */
  {__pyx_k_items, sizeof(__pyx_k_items), 0, 1, 1}, /* PyObject cname: __pyx_n_u_items */
  {__pyx_k_lfp, sizeof(__pyx_k_lfp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lfp */
  {__pyx_k_load, sizeof(__pyx_k_load), 0, 1, 1}, /* PyObject cname: __pyx_n_u_load */
  {__pyx_k_load_file, sizeof(__pyx_k_load_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_load_file */
  {__pyx_k_lts, sizeof(__pyx_k_lts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lts */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_map, sizeof(__pyx_k_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_map */
  {__pyx_k_member_names, sizeof(__pyx_k_member_names), 0, 1, 1}, /* PyObject cname: __pyx_n_u_member_names */
  {__pyx_k_members, sizeof(__pyx_k_members), 0, 1, 1}, /* PyObject cname: __pyx_n_u_members */
  {__pyx_k_merge, sizeof(__pyx_k_merge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_merge */
  {__pyx_k_merge_locals_genexpr, sizeof(__pyx_k_merge_locals_genexpr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_merge_locals_genexpr */
  {__pyx_k_mkz, sizeof(__pyx_k_mkz), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mkz */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_module_2, sizeof(__pyx_k_module_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module_2 */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name_2 */
  {__pyx_k_next, sizeof(__pyx_k_next), 0, 1, 1}, /* PyObject cname: __pyx_n_u_next */
  {__pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_no_default___reduce___due_to_non */
  {__pyx_k_normalise, sizeof(__pyx_k_normalise), 0, 1, 1}, /* PyObject cname: __pyx_n_u_normalise */
  {__pyx_k_num, sizeof(__pyx_k_num), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num */
  {__pyx_k_off, sizeof(__pyx_k_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_off */
  {__pyx_k_on, sizeof(__pyx_k_on), 0, 1, 1}, /* PyObject cname: __pyx_n_u_on */
  {__pyx_k_on_off, sizeof(__pyx_k_on_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_on_off */
  {__pyx_k_one, sizeof(__pyx_k_one), 0, 1, 1}, /* PyObject cname: __pyx_n_u_one */
  {__pyx_k_oth, sizeof(__pyx_k_oth), 0, 1, 1}, /* PyObject cname: __pyx_n_u_oth */
  {__pyx_k_others, sizeof(__pyx_k_others), 0, 1, 1}, /* PyObject cname: __pyx_n_u_others */
  {__pyx_k_p, sizeof(__pyx_k_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_p */
  {__pyx_k_path, sizeof(__pyx_k_path), 0, 1, 1}, /* PyObject cname: __pyx_n_u_path */
  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pop */
  {__pyx_k_prop, sizeof(__pyx_k_prop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prop */
  {__pyx_k_props, sizeof(__pyx_k_props), 0, 1, 1}, /* PyObject cname: __pyx_n_u_props */
  {__pyx_k_props_row, sizeof(__pyx_k_props_row), 0, 1, 1}, /* PyObject cname: __pyx_n_u_props_row */
  {__pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_state */
  {__pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_vtable */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce */
  {__pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_cython */
  {__pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_ex */
  {__pyx_k_rest, sizeof(__pyx_k_rest), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rest */
  {__pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reversed */
  {__pyx_k_s, sizeof(__pyx_k_s), 0, 1, 1}, /* PyObject cname: __pyx_n_u_s */
  {__pyx_k_save_file, sizeof(__pyx_k_save_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_save_file */
  {__pyx_k_seen, sizeof(__pyx_k_seen), 0, 1, 1}, /* PyObject cname: __pyx_n_u_seen */
  {__pyx_k_self, sizeof(__pyx_k_self), 0, 1, 1}, /* PyObject cname: __pyx_n_u_self */
  {__pyx_k_send, sizeof(__pyx_k_send), 0, 1, 1}, /* PyObject cname: __pyx_n_u_send */
  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_name */
  {__pyx_k_setrel, sizeof(__pyx_k_setrel), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setrel */
  {__pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate */
  {__pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate_cython */
  {__pyx_k_simplify_logic, sizeof(__pyx_k_simplify_logic), 0, 1, 1}, /* PyObject cname: __pyx_n_u_simplify_logic */
  {__pyx_k_sp, sizeof(__pyx_k_sp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sp */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_split, sizeof(__pyx_k_split), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split */
  {__pyx_k_split_dead, sizeof(__pyx_k_split_dead), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_dead */
  {__pyx_k_split_entries, sizeof(__pyx_k_split_entries), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_entries */
  {__pyx_k_split_exits, sizeof(__pyx_k_split_exits), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_exits */
  {__pyx_k_split_hull, sizeof(__pyx_k_split_hull), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_hull */
  {__pyx_k_split_init, sizeof(__pyx_k_split_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_init */
  {__pyx_k_split_props, sizeof(__pyx_k_split_props), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split_props */
  {__pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 1, 1}, /* PyObject cname: __pyx_n_u_startswith */
  {__pyx_k_state, sizeof(__pyx_k_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_state */
  {__pyx_k_states, sizeof(__pyx_k_states), 0, 1, 1}, /* PyObject cname: __pyx_n_u_states */
  {__pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_stringsource */
  {__pyx_k_succ, sizeof(__pyx_k_succ), 0, 1, 1}, /* PyObject cname: __pyx_n_u_succ */
  {__pyx_k_sympy, sizeof(__pyx_k_sympy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sympy */
  {__pyx_k_t, sizeof(__pyx_k_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t */
  {__pyx_k_tag, sizeof(__pyx_k_tag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tag */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_throw, sizeof(__pyx_k_throw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_throw */
  {__pyx_k_topo_split, sizeof(__pyx_k_topo_split), 0, 1, 1}, /* PyObject cname: __pyx_n_u_topo_split */
  {__pyx_k_transient, sizeof(__pyx_k_transient), 0, 1, 1}, /* PyObject cname: __pyx_n_u_transient */
  {__pyx_k_true, sizeof(__pyx_k_true), 0, 1, 1}, /* PyObject cname: __pyx_n_u_true */
  {__pyx_k_union, sizeof(__pyx_k_union), 0, 1, 1}, /* PyObject cname: __pyx_n_u_union */
  {__pyx_k_unknown_variable, sizeof(__pyx_k_unknown_variable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_unknown_variable */
  {__pyx_k_update, sizeof(__pyx_k_update), 0, 1, 1}, /* PyObject cname: __pyx_n_u_update */
  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, /* PyObject cname: __pyx_n_u_value */
  {__pyx_k_values, sizeof(__pyx_k_values), 0, 1, 1}, /* PyObject cname: __pyx_n_u_values */
  {__pyx_k_var2sdd, sizeof(__pyx_k_var2sdd), 0, 1, 1}, /* PyObject cname: __pyx_n_u_var2sdd */
  {__pyx_k_variables, sizeof(__pyx_k_variables), 0, 1, 1}, /* PyObject cname: __pyx_n_u_variables */
  {__pyx_k_vars, sizeof(__pyx_k_vars), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vars */
  {__pyx_k_zip, sizeof(__pyx_k_zip), 0, 1, 1}, /* PyObject cname: __pyx_n_u_zip */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_map); if (!__pyx_builtin_map) __PYX_ERR(0, 580, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ecco/lrr/lts.pyx":240
 *                 elif s == "*" :
 *                     for v in i :
 *                         i[v] = (0,1)             # <<<<<<<<<<<<<<
 *                 elif s == "+" :
 *                     for v in i :
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_1); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "ecco/lrr/lts.pyx":243
 *                 elif s == "+" :
 *                     for v in i :
 *                         i[v] = (1,1)             # <<<<<<<<<<<<<<
 *                 elif s == "-" :
 *                     for v in i :
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_1); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);

  /* "ecco/lrr/lts.pyx":246
 *                 elif s == "-" :
 *                     for v in i :
 *                         i[v] = (0,0)             # <<<<<<<<<<<<<<
 *                 else :
 *                     v = s[:-1]
*/
  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);

  /* "EnumType":30
 *     ('EQUALS', __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(EQUALS)),
 * 
 * ], module=globals().get("__module__", 'ecco.lrr.lts'))             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x030B0000:
*/
  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_module_2, __pyx_mstate_global->__pyx_kp_u_ecco_lrr_lts); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);

  /* "ecco/lrr/lts.pyx":382
 *         s = i.pick()
 *         return (self.succ_s(s) & self.pred_s(s)) == i
 *     cpdef sdd add_prop (LTS self, str prop, sdd states, bint union=False, str alias="") :             # <<<<<<<<<<<<<<
 *         """adds a property to the LTS
 * 
*/
  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(2, Py_False, __pyx_mstate_global->__pyx_kp_u_); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);

  /* "ecco/lrr/lts.pyx":413
 *             self._var2sdd[name] = d2s(d)
 *         return self._var2sdd[name]
 *     cpdef object form (LTS self, sdd states, variables=None, normalise=None) :             # <<<<<<<<<<<<<<
 *         """describe a set of states by a Boolean formula
 * 
*/
  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);

  /* "ecco/lrr/lts.pyx":542
 *         self.on = dump["on"]
 *         self.off = dump["off"]
 *     cpdef Component copy (Component self, lts=None) :             # <<<<<<<<<<<<<<
 *         cdef Component compo
 *         if lts is None :
*/
  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);

  /* "ecco/lrr/lts.pyx":571
 *         yield from self.graph_props.items()
 *         yield from self.split_props.items()
 *     cpdef tuple props_row (Component self, bint alias=True) :             # <<<<<<<<<<<<<<
 *         cdef str p
 *         cdef setrel r
*/
  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);

  /* "ecco/lrr/lts.pyx":608
 *         self.lts.add_prop(name, self.states, union=True)
 *         self.split_props[name] = setrel.EQUALS
 *     cpdef setrel check (Component self, str prop, sdd states, str alias="") :             # <<<<<<<<<<<<<<
 *         """check a split property on component
 * 
*/
  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_u_); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);

  /* "ecco/lrr/lts.pyx":726
 *             self._update_prop(sp, p, state)
 *         return Component(self.lts, state, gp=gp, sp=sp)
 *     cpdef tuple topo_split (Component self,             # <<<<<<<<<<<<<<
 *                             bint split_init=True,
 *                             bint split_entries=True,
*/
  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(5, Py_True, Py_True, Py_True, Py_True, Py_True); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_mstate->__pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_get.method_name = &__pyx_mstate->__pyx_n_u_get_2;
  __pyx_mstate->__pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_items.method_name = &__pyx_mstate->__pyx_n_u_items;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;
  __pyx_mstate->__pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_values.method_name = &__pyx_mstate->__pyx_n_u_values;
  __pyx_mstate->__pyx_umethod_PySet_Type__update.type = (PyObject*)(&PySet_Type);
  __pyx_mstate->__pyx_umethod_PySet_Type__update.method_name = &__pyx_mstate->__pyx_n_u_update;
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_1 = PyLong_FromLong(1); if (unlikely(!__pyx_mstate->__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 3;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 1;
            unsigned int nlocals : 4;
            unsigned int flags : 10;
            unsigned int first_line : 10;
            unsigned int line_table_length : 13;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 563, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_get, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 667, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_oth};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_GENERATOR), 686, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_others, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_h, __pyx_mstate->__pyx_n_u_c, __pyx_mstate->__pyx_n_u_s};
    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_succ, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 702, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_state};
    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_explicit, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 56, 35};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_path};
    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_save_file, __pyx_k_A_U_T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 65, 133};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_dump, __pyx_k_A_Qd_Qd_Qd_Qd_Qd_CuD_fA_q_1A_Q_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 81, 212};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_dump, __pyx_mstate->__pyx_n_u_props, __pyx_mstate->__pyx_n_u_lts, __pyx_mstate->__pyx_n_u_p, __pyx_mstate->__pyx_n_u_d, __pyx_mstate->__pyx_n_u_init, __pyx_mstate->__pyx_n_u_states, __pyx_mstate->__pyx_n_u_dead, __pyx_mstate->__pyx_n_u_hull, __pyx_mstate->__pyx_n_u_transient};
    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_load, __pyx_k_A_hfF_hd_1_c_t1A_7_q_7_a_84q_d_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 105, 35};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_path, __pyx_mstate->__pyx_n_u_dump, __pyx_mstate->__pyx_n_u_ddds};
    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_load_file, __pyx_k_A_gXQa_AYa_s_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 126, 210};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_copy, __pyx_k_A_s_5_A_7_a_84q_T_84q_84q_84q_84, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 304, 79};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_graph_props, __pyx_k_A_q_F_F_7_QfA_Kq_4_1_4_1_86_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 312, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_is_dead, __pyx_k_A_wc_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 320, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_isin_dead, __pyx_k_A_wb_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 328, 19};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_has_dead, __pyx_k_A_t1G2T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 336, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_is_init, __pyx_k_A_wc_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 344, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_isin_init, __pyx_k_A_wb_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 352, 19};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[15] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_has_init, __pyx_k_A_t1G2T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[15])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 360, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[16] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_is_hull, __pyx_k_A_WBd_G1Cr_WAT_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[16])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 369, 67};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states};
    __pyx_mstate_global->__pyx_codeobj_tab[17] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_is_scc, __pyx_k_A_WBd_3as_Q_1_AU_G1Cr_WAT_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[17])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 382, 91};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_prop, __pyx_mstate->__pyx_n_u_states, __pyx_mstate->__pyx_n_u_union, __pyx_mstate->__pyx_n_u_alias};
    __pyx_mstate_global->__pyx_codeobj_tab[18] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_add_prop, __pyx_k_CCTTU_WBd_1_axq_6_e3d_ay_4vQa_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[18])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 401, 106};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_name};
    __pyx_mstate_global->__pyx_codeobj_tab[19] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_var2sdd, __pyx_k_A_5_t1_4q_XQd_2S_avS_1_as_S_Qa_t, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[19])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 413, 64};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_states, __pyx_mstate->__pyx_n_u_variables, __pyx_mstate->__pyx_n_u_normalise};
    __pyx_mstate_global->__pyx_codeobj_tab[20] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_form, __pyx_k_77Gq_S_1Jc_Q_uO1D_as_uA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[20])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[21] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[21])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[22] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[22])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 522, 52};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[23] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_dump, __pyx_k_A_AT_A_A_A_t1_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[23])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 529, 59};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cls, __pyx_mstate->__pyx_n_u_dump, __pyx_mstate->__pyx_n_u_lts, __pyx_mstate->__pyx_n_u_compo};
    __pyx_mstate_global->__pyx_codeobj_tab[24] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_load, __pyx_k_A_y_1214AT_15Qa15Qa_V1A_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[24])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 542, 82};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_lts};
    __pyx_mstate_global->__pyx_codeobj_tab[25] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_copy, __pyx_k_a_4s_IXQk_V4q_A_IXQk_d_A_V1A_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[25])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 571, 93};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_alias};
    __pyx_mstate_global->__pyx_codeobj_tab[26] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_props_row, __pyx_k_6a_c_U_CuD_F_q_Qb_AT_V4q_1_Qb_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[26])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 597, 32};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_name};
    __pyx_mstate_global->__pyx_codeobj_tab[27] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_tag, __pyx_k_A_D_O1_L_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[27])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 608, 54};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_prop, __pyx_mstate->__pyx_n_u_states, __pyx_mstate->__pyx_n_u_alias};
    __pyx_mstate_global->__pyx_codeobj_tab[28] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_check, __pyx_k_H_4t9AV86_M_nF_a_t_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[28])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 621, 110};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_prop, __pyx_mstate->__pyx_n_u_states, __pyx_mstate->__pyx_n_u_alias};
    __pyx_mstate_global->__pyx_codeobj_tab[29] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_split, __pyx_k_Gq_4t9AV86_HBa_HBa_M_nF_a_5_A_4, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[29])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS), 660, 60};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_first, __pyx_mstate->__pyx_n_u_rest, __pyx_mstate->__pyx_n_u_oth, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_oth};
    __pyx_mstate_global->__pyx_codeobj_tab[30] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_merge, __pyx_k_A_4uCuE_5Q_AQ_t7_1G2Qk_T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[30])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 726, 330};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_split_init, __pyx_mstate->__pyx_n_u_split_entries, __pyx_mstate->__pyx_n_u_split_exits, __pyx_mstate->__pyx_n_u_split_hull, __pyx_mstate->__pyx_n_u_split_dead};
    __pyx_mstate_global->__pyx_codeobj_tab[31] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_topo_split, __pyx_k_A_0_4_A_1_5_d_A_3fA_1_d_e1D_E_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[31])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 790, 31};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[32] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_count, __pyx_k_A_S_Q_t7_3a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[32])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 795, 144};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_head, __pyx_mstate->__pyx_n_u_seen};
    __pyx_mstate_global->__pyx_codeobj_tab[33] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_count_2, __pyx_k_A_AXV1_4uA_1_E_e9D_a_vS_d_1_d_9D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[33])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 814, 97};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[34] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_on_off, __pyx_k_A_F_s_4q_G4t1_4q_Q_r_A_4q_3a_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[34])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 828, 29};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_variables, __pyx_mstate->__pyx_n_u_normalise};
    __pyx_mstate_global->__pyx_codeobj_tab[35] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_ecco_lrr_lts_pyx, __pyx_mstate->__pyx_n_u_form, __pyx_k_11A_t4uAT_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[35])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[36] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[36])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[37] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[37])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* UnpackUnboundCMethod */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {
        return _PyObject_Vectorcall
            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);
}
#else
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {
    return
#if PY_VERSION_HEX < 0x03090000
    _PyObject_Vectorcall
#else
    PyObject_Vectorcall
#endif
        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);
}
#endif
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
     METH_VARARGS | METH_KEYWORDS,
#else
     METH_FASTCALL | METH_KEYWORDS,
#endif
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method, *result=NULL;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    result = method;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            result = unbound_method;
        }
    }
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    if (unlikely(target->method)) {
        Py_DECREF(result);
    } else
#endif
    target->method = result;
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);
        }
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *result = NULL;
        PyObject *args = PyTuple_New(2);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
        return result;
    }
#endif
    {
        PyObject *args[4] = {NULL, self, arg1, arg2};
        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
    }
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    int was_initialized =  __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return __Pyx_CallCFunction(cfunc, self, arg);
        } else if (flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, &arg, 1);
        } else if (flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, &arg, 1, NULL);
        }
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod1(&tmp_cfunc, self, arg);
    }
#endif
    PyObject* result = __Pyx__CallUnboundCMethod1(cfunc, self, arg);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *args = PyTuple_New(1);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
    } else
#endif
    {
        result = __Pyx_PyObject_Call2Args(cfunc->method, self, arg);
    }
    return result;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop)
    PyObject *value;
    if (PyDict_Pop(d, key, &value) == 0) {
        if (default_value) {
            Py_INCREF(default_value);
        } else {
            PyErr_SetObject(PyExc_KeyError, key);
        }
        value = default_value;
    }
    return value;
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    return _PyDict_Pop(d, key, default_value);
#else
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, d, key);
    }
#endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < 0)) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs;
    PyObject *dict;
#if !CYTHON_ASSUME_SAFE_SIZE
    nkwargs = PyTuple_Size(kwnames);
    if (unlikely(nkwargs < 0)) return NULL;
#else
    nkwargs = PyTuple_GET_SIZE(kwnames);
#endif
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
#if !CYTHON_ASSUME_SAFE_MACROS
        PyObject *key = PyTuple_GetItem(kwnames, i);
        if (!key) goto bad;
#else
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
#endif
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* ParseKeywords */
static int __Pyx_ValidateDuplicatePosArgs(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char* function_name)
{
    PyObject ** const *name = argnames;
    while (name != first_kw_arg) {
        PyObject *key = **name;
        int found = PyDict_Contains(kwds, key);
        if (unlikely(found)) {
            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);
            goto bad;
        }
        name++;
    }
    return 0;
bad:
    return -1;
}
#if CYTHON_USE_UNICODE_INTERNALS
static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {
    int kind;
    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);
    if (len != PyUnicode_GET_LENGTH(s2)) return 0;
    kind = PyUnicode_KIND(s1);
    if (kind != PyUnicode_KIND(s2)) return 0;
    const void *data1 = PyUnicode_DATA(s1);
    const void *data2 = PyUnicode_DATA(s2);
    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);
}
#endif
static int __Pyx_MatchKeywordArg_str(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    #if CYTHON_USE_UNICODE_INTERNALS
    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;
    if (unlikely(key_hash == -1)) {
        key_hash = PyObject_Hash(key);
        if (unlikely(key_hash == -1))
            goto bad;
    }
    #endif
    name = first_kw_arg;
    while (*name) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) {
                *index_found = (size_t) (name - argnames);
                return 1;
            }
        }
        #endif
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {
            if (__Pyx_UnicodeKeywordsEqual(name_str, key))
                goto arg_passed_twice;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            if (unlikely(name_str == key)) goto arg_passed_twice;
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) goto arg_passed_twice;
        }
        #endif
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
bad:
    return -1;
}
static int __Pyx_MatchKeywordArg_nostr(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;
    name = first_kw_arg;
    while (*name) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (cmp == 1) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        if (unlikely(cmp == -1)) goto bad;
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (unlikely(cmp != 0)) {
            if (cmp == 1) goto arg_passed_twice;
            else goto bad;
        }
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
bad:
    return -1;
}
static CYTHON_INLINE int __Pyx_MatchKeywordArg(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    return likely(PyUnicode_CheckExact(key)) ?
        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :
        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);
}
static void __Pyx_RejectUnknownKeyword(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char *function_name)
{
    Py_ssize_t pos = 0;
    PyObject *key = NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(kwds);
    while (PyDict_Next(kwds, &pos, &key, NULL)) {
        PyObject** const *name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (!*name) {
            #if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
            #endif
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp != 1) {
                if (cmp == 0) {
                    PyErr_Format(PyExc_TypeError,
                        "%s() got an unexpected keyword argument '%U'",
                        function_name, key);
                }
                #if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(key);
                #endif
                break;
            }
            #if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(key);
            #endif
        }
    }
    __Pyx_END_CRITICAL_SECTION();
    assert(PyErr_Occurred());
}
static int __Pyx_ParseKeywordDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t extracted = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    name = first_kw_arg;
    while (*name && num_kwargs > extracted) {
        PyObject * key = **name;
        PyObject *value;
        int found = 0;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        found = PyDict_GetItemRef(kwds, key, &value);
        #else
        value = PyDict_GetItemWithError(kwds, key);
        if (value) {
            Py_INCREF(value);
            found = 1;
        } else {
            if (unlikely(PyErr_Occurred())) goto bad;
        }
        #endif
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            extracted++;
        }
        name++;
    }
    if (num_kwargs > extracted) {
        if (ignore_unknown_kwargs) {
            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))
                goto bad;
        } else {
            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);
            goto bad;
        }
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordDictToDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t len;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    if (PyDict_Update(kwds2, kwds) < 0) goto bad;
    name = first_kw_arg;
    while (*name) {
        PyObject *key = **name;
        PyObject *value;
#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))
        int found = PyDict_Pop(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
        }
#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        int found = PyDict_GetItemRef(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;
        }
#else
    #if CYTHON_COMPILING_IN_CPYTHON
        value = _PyDict_Pop(kwds2, key, kwds2);
    #else
        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);
    #endif
        if (value == kwds2) {
            Py_DECREF(value);
        } else {
            if (unlikely(!value)) goto bad;
            values[name-argnames] = value;
        }
#endif
        name++;
    }
    len = PyDict_Size(kwds2);
    if (len > 0) {
        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);
    } else if (unlikely(len == -1)) {
        goto bad;
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordsTuple(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject *key = NULL;
    PyObject** const * name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {
#if CYTHON_AVOID_BORROWED_REFS
        key = __Pyx_PySequence_ITEM(kwds, pos);
#else
        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);
#endif
#if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!key)) goto bad;
#endif
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            PyObject *value = kwvalues[pos];
            values[name-argnames] = __Pyx_NewRef(value);
        } else {
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp == 1) {
                PyObject *value = kwvalues[pos];
                values[index_found] = __Pyx_NewRef(value);
            } else {
                if (unlikely(cmp == -1)) goto bad;
                if (kwds2) {
                    PyObject *value = kwvalues[pos];
                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                } else if (!ignore_unknown_kwargs) {
                    goto invalid_keyword;
                }
            }
        }
        #if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(key);
        key = NULL;
        #endif
    }
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    goto bad;
bad:
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(key);
    #endif
    return -1;
}
static int __Pyx_ParseKeywords(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))
        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
    else if (kwds2)
        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);
    else
        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);
    PyErr_Format(PyExc_AttributeError,
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[1] = {obj};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_CallNoArg;
    return PyObject_VectorcallMethod(method_name, args, 1 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
#endif
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else {
      Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(t);
 #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely(size < 0)) return;
 #endif
      if (size < index) {
        __Pyx_RaiseNeedMoreValuesError(size);
      } else {
        __Pyx_RaiseTooManyValuesError(index);
      }
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2(
        PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple) {
    if (likely(is_tuple || PyTuple_Check(tuple))) {
        Py_ssize_t size;
        if (has_known_size) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        size = __Pyx_PyTuple_GET_SIZE(tuple);
        if (likely(size == 2)) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        if (size >= 0) {
            __Pyx_UnpackTupleError(tuple, 2);
        }
        return -1;
    } else {
        return __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple);
    }
}
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
    value1 = __Pyx_PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = __Pyx_PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
#if CYTHON_COMPILING_IN_PYPY
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#else
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE int __Pyx_dict_iter_next_source_is_dict(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem) {
    PyObject *key, *value;
    if (unlikely(orig_length != PyDict_Size(iter_obj))) {
        PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
        return -1;
    }
    if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
        return 0;
    }
    if (pitem) {
        PyObject* tuple = PyTuple_New(2);
        if (unlikely(!tuple)) {
            return -1;
        }
        Py_INCREF(key);
        Py_INCREF(value);
        #if CYTHON_ASSUME_SAFE_MACROS
        PyTuple_SET_ITEM(tuple, 0, key);
        PyTuple_SET_ITEM(tuple, 1, value);
        #else
        if (unlikely(PyTuple_SetItem(tuple, 0, key) < 0)) {
            Py_DECREF(value);
            Py_DECREF(tuple);
            return -1;
        }
        if (unlikely(PyTuple_SetItem(tuple, 1, value) < 0)) {
            Py_DECREF(tuple);
            return -1;
        }
        #endif
        *pitem = tuple;
    } else {
        if (pkey) {
            Py_INCREF(key);
            *pkey = key;
        }
        if (pvalue) {
            Py_INCREF(value);
            *pvalue = value;
        }
    }
    return 1;
}
#endif
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        int result;
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_BEGIN_CRITICAL_SECTION(iter_obj);
#endif
        result = __Pyx_dict_iter_next_source_is_dict(iter_obj, orig_length, ppos, pkey, pvalue, pitem);
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_END_CRITICAL_SECTION();
#endif
        return result;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(tuple_size < 0)) return -1;
        #endif
        if (unlikely(pos >= tuple_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_ASSUME_SAFE_MACROS
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        #else
        next_item = PyTuple_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #endif
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t list_size = __Pyx_PyList_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(list_size < 0)) return -1;
        #endif
        if (unlikely(pos >= list_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
        next_item = PyList_GetItemRef(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #elif CYTHON_ASSUME_SAFE_MACROS
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
        #else
        next_item = PyList_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        Py_INCREF(next_item);
        #endif
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* RejectKeywords */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds) {
    PyObject *key = NULL;
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds))) {
        key = __Pyx_PySequence_ITEM(kwds, 0);
    } else {
        Py_ssize_t pos = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
        if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return;
#endif
        PyDict_Next(kwds, &pos, &key, NULL);
        Py_INCREF(key);
    }
    if (likely(key)) {
        PyErr_Format(PyExc_TypeError,
            "%s() got an unexpected keyword argument '%U'",
            function_name, key);
        Py_DECREF(key);
    }
}

/* DictGetItem */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(__Pyx_PyDict_GetItemRef(d, key, &value) == 0)) { // no value, no error
        if (unlikely(PyTuple_Check(key))) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args)) {
                PyErr_SetObject(PyExc_KeyError, args);
                Py_DECREF(args);
            }
        } else {
            PyErr_SetObject(PyExc_KeyError, key);
        }
    }
    return value;
}
#endif

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* unicode_tailmatch */
static int __Pyx_PyUnicode_TailmatchTuple(PyObject* s, PyObject* substrings,
                                          Py_ssize_t start, Py_ssize_t end, int direction) {
    Py_ssize_t i, count = __Pyx_PyTuple_GET_SIZE(substrings);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(count < 0)) return -1;
    #endif
    for (i = 0; i < count; i++) {
        Py_ssize_t result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result = PyUnicode_Tailmatch(s, PyTuple_GET_ITEM(substrings, i),
                                     start, end, direction);
#else
        PyObject* sub = __Pyx_PySequence_ITEM(substrings, i);
        if (unlikely(!sub)) return -1;
        result = PyUnicode_Tailmatch(s, sub, start, end, direction);
        Py_DECREF(sub);
#endif
        if (result) {
            return (int) result;
        }
    }
    return 0;
}
static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        return __Pyx_PyUnicode_TailmatchTuple(s, substr, start, end, direction);
    }
    return (int) PyUnicode_Tailmatch(s, substr, start, end, direction);
}

/* CallUnboundCMethod0 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        if (likely(cfunc->flag == METH_NOARGS))
            return __Pyx_CallCFunction(cfunc, self, NULL);
        if (likely(cfunc->flag == METH_FASTCALL))
            return __Pyx_CallCFunctionFast(cfunc, self, NULL, 0);
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, NULL, 0, NULL);
        if (likely(cfunc->flag == (METH_VARARGS | METH_KEYWORDS)))
            return __Pyx_CallCFunctionWithKeywords(cfunc, self, __pyx_mstate_global->__pyx_empty_tuple, NULL);
        if (cfunc->flag == METH_VARARGS)
            return __Pyx_CallCFunction(cfunc, self, __pyx_mstate_global->__pyx_empty_tuple);
        return __Pyx__CallUnboundCMethod0(cfunc, self);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod0(&tmp_cfunc, self);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod0(cfunc, self);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *result;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
    result = __Pyx_PyObject_CallOneArg(cfunc->method, self);
    return result;
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    return __Pyx_CallUnboundCMethod0(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_values, d);
}

/* IterNextPlain */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void) {
    if (unlikely(!__pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache))
        __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_next);
    return __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator) {
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
    PyObject *result;
    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();
    if (unlikely(!next)) return NULL;
    result = PyObject_CallFunctionObjArgs(next, iterator, NULL);
    return result;
#else
    (void)__Pyx_GetBuiltinName; // only for early limited API
    iternextfunc iternext = __Pyx_PyObject_GetIterNextFunc(iterator);
    assert(iternext);
    return iternext(iterator);
#endif
}

/* IterNext */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03080000
static PyObject *__Pyx_PyIter_Next2(PyObject *o, PyObject *defval) {
    PyObject *result;
    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();
    if (unlikely(!next)) return NULL;
    result = PyObject_CallFunctionObjArgs(next, o, defval, NULL);
    return result;
}
#else
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
#if !CYTHON_COMPILING_IN_LIMITED_API
    iternextfunc iternext = __Pyx_PyObject_TryGetSlot(iterator, tp_iternext, iternextfunc);
    if (likely(iternext)) {
        next = iternext(iterator);
        if (likely(next))
            return next;
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
    #endif
    } else if (CYTHON_USE_TYPE_SLOTS) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    } else
#endif
    if (unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    } else {
        next = defval ? PyIter_Next(iterator) : __Pyx_PyIter_Next_Plain(iterator);
        if (likely(next))
            return next;
    }
    return __Pyx_PyIter_Next2Default(defval);
}
#endif

/* PyUnicode_Substring */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length;
    #if !CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(__Pyx_PyUnicode_READY(text) == -1)) return NULL;
    #endif
    length = __Pyx_PyUnicode_GET_LENGTH(text);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(length < 0)) return NULL;
    #endif
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    if (stop <= start)
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_unicode);
    if (start == 0 && stop == length)
        return __Pyx_NewRef(text);
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyUnicode_Substring(text, start, stop);
#else
    return PyUnicode_FromKindAndData(PyUnicode_KIND(text),
        PyUnicode_1BYTE_DATA(text) + start*PyUnicode_KIND(text), stop-start);
#endif
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* RaiseException */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
#elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
#if CYTHON_COMPILING_IN_LIMITED_API
            || __Pyx_get_runtime_version() >= 0x030A0000
#endif
            )
            return result;
        {
            Py_ssize_t size = __Pyx_PySet_GET_SIZE(result);
            if (likely(size > 0))
                return result;
#if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(size < 0)) {
                Py_DECREF(result);
                return NULL;
            }
#endif
        }
        Py_DECREF(result);
#endif
    }
    return __Pyx_PyObject_CallNoArg((PyObject*) &PyFrozenSet_Type);
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            return __Pyx_PyList_GetItemRef(o, n);
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    return __Pyx_CallUnboundCMethod0(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_items, d);
}

/* CoroutineSetYieldFrom */
static void
__Pyx_Coroutine_Set_Owned_Yield_From(__pyx_CoroutineObject *gen, PyObject *yf) {
    assert (!gen->yieldfrom);
#if CYTHON_USE_AM_SEND
    assert (!gen->yieldfrom_am_send);
    #if PY_VERSION_HEX < 0x030A00F0
    if (__Pyx_PyType_HasFeature(Py_TYPE(yf), __Pyx_TPFLAGS_HAVE_AM_SEND))
    #endif
    {
        __Pyx_pyiter_sendfunc am_send;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
        am_send = __Pyx_PyObject_TryGetSubSlot(yf, tp_as_async, am_send, __Pyx_pyiter_sendfunc);
        #else
        __Pyx_PyAsyncMethodsStruct* tp_as_async = (__Pyx_PyAsyncMethodsStruct*) Py_TYPE(yf)->tp_as_async;
        am_send = tp_as_async ? tp_as_async->am_send : NULL;
        #endif
        if (likely(am_send)) {
            gen->yieldfrom_am_send = am_send;
        }
    }
#endif
    gen->yieldfrom = yf;
}

/* LimitedApiGetTypeDict */
#if CYTHON_COMPILING_IN_LIMITED_API
static Py_ssize_t __Pyx_GetTypeDictOffset(void) {
    PyObject *tp_dictoffset_o;
    Py_ssize_t tp_dictoffset;
    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");
    if (unlikely(!tp_dictoffset_o)) return -1;
    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);
    Py_DECREF(tp_dictoffset_o);
    if (unlikely(tp_dictoffset == 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' doesn't have a dictoffset");
        return -1;
    } else if (unlikely(tp_dictoffset < 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' has an unexpected negative dictoffset. "
            "Please report this as Cython bug");
        return -1;
    }
    return tp_dictoffset;
}
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {
    static Py_ssize_t tp_dictoffset = 0;
    if (unlikely(tp_dictoffset == 0)) {
        tp_dictoffset = __Pyx_GetTypeDictOffset();
        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {
            tp_dictoffset = 0; // try again next time?
            return NULL;
        }
    }
    return *(PyObject**)((char*)tp + tp_dictoffset);
}
#endif

/* SetItemOnTypeDict */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_SetItem(tp_dict, k, v);
    if (likely(!result)) {
        PyType_Modified(tp);
        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {
            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);
            if (!setNameResult) return -1;
            Py_DECREF(setNameResult);
        }
    }
    return result;
}

/* FixUpExtensionType */
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if __PYX_LIMITED_VERSION_HEX > 0x030900B1
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
#else
    const PyType_Slot *slot = spec->slots;
    int changed = 0;
#if !CYTHON_COMPILING_IN_LIMITED_API
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
#if !CYTHON_COMPILING_IN_CPYTHON
        const
#endif  // !CYTHON_COMPILING_IN_CPYTHON)
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif  // CYTHON_METH_FASTCALL
#if !CYTHON_COMPILING_IN_PYPY
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                    Py_DECREF(descr);
                    if (unlikely(set_item_result < 0)) {
                        return -1;
                    }
                    changed = 1;
                }
#endif  // !CYTHON_COMPILING_IN_PYPY
            }
            memb++;
        }
    }
#endif  // !CYTHON_COMPILING_IN_LIMITED_API
#if !CYTHON_COMPILING_IN_PYPY
    slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_getset)
        slot++;
    if (slot && slot->slot == Py_tp_getset) {
        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;
        while (getset && getset->name) {
            if (getset->name[0] == '_' && getset->name[1] == '_' && strcmp(getset->name, "__module__") == 0) {
                PyObject *descr = PyDescr_NewGetSet(type, getset);
                if (unlikely(!descr))
                    return -1;
                #if CYTHON_COMPILING_IN_LIMITED_API
                PyObject *pyname = PyUnicode_FromString(getset->name);
                if (unlikely(!pyname)) {
                    Py_DECREF(descr);
                    return -1;
                }
                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);
                Py_DECREF(pyname);
                #else
                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                #endif
                Py_DECREF(descr);
                if (unlikely(set_item_result < 0)) {
                    return -1;
                }
                changed = 1;
            }
            ++getset;
        }
    }
#endif  // !CYTHON_COMPILING_IN_PYPY
    if (changed)
        PyType_Modified(type);
#endif  // PY_VERSION_HEX > 0x030900B1
    return 0;
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);
#elif PY_VERSION_HEX >= 0x030d0000
    PyDict_SetDefaultRef(d, key, default_value, &value);
#else
    value = PyDict_SetDefault(d, key, default_value);
    if (unlikely(!value)) return NULL;
    Py_INCREF(value);
#endif
    return value;
}

/* FetchCommonType */
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);
    if (result && metaclass) {
        PyObject *old_tp = (PyObject*)Py_TYPE(result);
    Py_INCREF((PyObject*)metaclass);
#if __PYX_LIMITED_VERSION_HEX >= 0x03090000
        Py_SET_TYPE(result, metaclass);
#else
        result->ob_type = metaclass;
#endif
        Py_DECREF(old_tp);
    }
    return result;
}
#else
#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)
#endif
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t expected_basicsize) {
    Py_ssize_t basicsize;
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (expected_basicsize == 0) {
        return 0; // size is inherited, nothing useful to check
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
    if (unlikely(!py_basicsize)) return -1;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = NULL;
    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;
#else
    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;
#endif
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;
    int get_item_ref_result;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    py_object_name = PyUnicode_FromString(object_name);
    if (!py_object_name) return NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) goto done;
    abi_module_dict = PyModule_GetDict(abi_module);
    if (!abi_module_dict) goto done;
    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);
    if (get_item_ref_result == 1) {
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else if (unlikely(get_item_ref_result == -1)) {
        goto bad;
    }
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);
    if (unlikely(new_cached_type != cached_type)) {
        if (unlikely(!new_cached_type)) goto bad;
        Py_DECREF(cached_type);
        cached_type = new_cached_type;
        if (__Pyx_VerifyCachedType(
                cached_type,
                object_name,
                spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else {
        Py_DECREF(new_cached_type);
    }
done:
    Py_XDECREF(abi_module);
    Py_DECREF(py_object_name);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CommonTypesMetaclass */
static PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {
    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);
}
static PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {
    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {
    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},
    {0, 0}
};
static PyType_Spec __pyx_CommonTypesMetaclass_spec = {
    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",
    0,
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
    Py_TPFLAGS_DISALLOW_INSTANTIATION |
#endif
    Py_TPFLAGS_DEFAULT,
    __pyx_CommonTypesMetaclass_slots
};
static int __pyx_CommonTypesMetaclass_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, &PyType_Type);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);
    Py_DECREF(bases);
    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {
        return -1;
    }
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CallTypeTraverse */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000)))
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async);
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext) {
    if (value == Py_None) {
        if (async || !iternext)
            PyErr_SetNone(async ? PyExc_StopAsyncIteration : PyExc_StopIteration);
        return;
    }
    __Pyx__ReturnWithStopIteration(value, async);
}
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async) {
#if CYTHON_COMPILING_IN_CPYTHON
    __Pyx_PyThreadState_declare
#endif
    PyObject *exc;
    PyObject *exc_type = async ? PyExc_StopAsyncIteration : PyExc_StopIteration;
#if CYTHON_COMPILING_IN_CPYTHON
    if ((PY_VERSION_HEX >= (0x030C00A6)) || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        if (PY_VERSION_HEX >= (0x030e00A1)) {
            exc = __Pyx_PyObject_CallOneArg(exc_type, value);
        } else {
            PyObject *args_tuple = PyTuple_New(1);
            if (unlikely(!args_tuple)) return;
            Py_INCREF(value);
            PyTuple_SET_ITEM(args_tuple, 0, value);
            exc = PyObject_Call(exc_type, args_tuple, NULL);
            Py_DECREF(args_tuple);
        }
        if (unlikely(!exc)) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_value)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(exc_type);
        __Pyx_ErrRestore(exc_type, exc, NULL);
        return;
    }
    #endif
#else
    exc = __Pyx_PyObject_CallOneArg(exc_type, value);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(exc_type, exc);
    Py_DECREF(exc);
}

/* CoroutineBase */
#if !CYTHON_COMPILING_IN_LIMITED_API
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6 && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#endif // CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void
__Pyx_Coroutine_Undelegate(__pyx_CoroutineObject *gen) {
#if CYTHON_USE_AM_SEND
    gen->yieldfrom_am_send = NULL;
#endif
    Py_CLEAR(gen->yieldfrom);
}
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
            value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
            if (unlikely(!value)) goto limited_api_failure;
            #else
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            #endif
            Py_DECREF(ev);
        }
        else if (unlikely(PyTuple_Check(ev))) {
            Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(ev);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(tuple_size < 0)) {
                Py_XDECREF(tb);
                Py_DECREF(ev);
                Py_DECREF(et);
                return -1;
            }
            #endif
            if (tuple_size >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#elif CYTHON_ASSUME_SAFE_MACROS
                value = PySequence_ITEM(ev, 0);
#else
                value = PySequence_GetItem(ev, 0);
                if (!value) goto limited_api_failure;
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
#else
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
#endif
    Py_DECREF(ev);
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!value)) return -1;
#endif
    *pvalue = value;
    return 0;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL || !CYTHON_ASSUME_SAFE_MACROS
  limited_api_failure:
    Py_XDECREF(et);
    Py_XDECREF(tb);
    Py_XDECREF(ev);
    return -1;
#endif
}
static CYTHON_INLINE
__Pyx_PySendResult __Pyx_Coroutine_status_from_result(PyObject **retval) {
    if (*retval) {
        return PYGEN_NEXT;
    } else if (likely(__Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, retval) == 0)) {
        return PYGEN_RETURN;
    } else {
        return PYGEN_ERROR;
    }
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
static void __Pyx_Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
__Pyx_PySendResult __Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, PyObject **result, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(__Pyx_Coroutine_get_is_running(self));  // Callers should ensure is_running
    if (unlikely(self->resume_label == -1)) {
        __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
        return PYGEN_ERROR;
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    retval = self->body(self, tstate, value);
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    *result = retval;
    if (self->resume_label == -1) {
        return likely(retval) ? PYGEN_RETURN : PYGEN_ERROR;
    }
    return PYGEN_NEXT;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
#define __Pyx_Coroutine_MethodReturnFromResult(gen, result, retval, iternext)\
    ((result) == PYGEN_NEXT ? (retval) : __Pyx__Coroutine_MethodReturnFromResult(gen, result, retval, iternext))
static PyObject *
__Pyx__Coroutine_MethodReturnFromResult(PyObject* gen, __Pyx_PySendResult result, PyObject *retval, int iternext) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (likely(result == PYGEN_RETURN)) {
        int is_async = 0;
        #ifdef __Pyx_AsyncGen_USED
        is_async = __Pyx_AsyncGen_CheckExact(gen);
        #endif
        __Pyx_ReturnWithStopIteration(retval, is_async, iternext);
        Py_XDECREF(retval);
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE __Pyx_PySendResult
__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen, PyObject** retval) {
    __Pyx_PySendResult result;
    PyObject *val = NULL;
    assert(__Pyx_Coroutine_get_is_running(gen));
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    result = __Pyx_Coroutine_SendEx(gen, val, retval, 0);
    Py_XDECREF(val);
    return result;
}
#if CYTHON_USE_AM_SEND
static __Pyx_PySendResult
__Pyx_Coroutine_SendToDelegate(__pyx_CoroutineObject *gen, __Pyx_pyiter_sendfunc gen_am_send, PyObject *value, PyObject **retval) {
    PyObject *ret = NULL;
    __Pyx_PySendResult delegate_result, result;
    assert(__Pyx_Coroutine_get_is_running(gen));
    delegate_result = gen_am_send(gen->yieldfrom, value, &ret);
    if (delegate_result == PYGEN_NEXT) {
        assert (ret != NULL);
        *retval = ret;
        return PYGEN_NEXT;
    }
    assert (delegate_result != PYGEN_ERROR || ret == NULL);
    __Pyx_Coroutine_Undelegate(gen);
    result = __Pyx_Coroutine_SendEx(gen, ret, retval, 0);
    Py_XDECREF(ret);
    return result;
}
#endif
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result = __Pyx_Coroutine_AmSend(self, value, &retval);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
}
static __Pyx_PySendResult
__Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval) {
    __Pyx_PySendResult result;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, value, retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
      #if !CYTHON_USE_AM_SEND
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
      #endif
        {
            #if !CYTHON_COMPILING_IN_LIMITED_API || __PYX_LIMITED_VERSION_HEX >= 0x03080000
            if (value == Py_None && PyIter_Check(yf))
                ret = __Pyx_PyIter_Next_Plain(yf);
            else
            #endif
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_u_send, value);
        }
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            *retval = ret;
            return PYGEN_NEXT;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, value, retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return result;
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    CYTHON_UNUSED_VAR(gen);
    assert(__Pyx_Coroutine_get_is_running(gen));
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        result = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    #endif
    {
        PyObject *meth;
        result = PYGEN_RETURN;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval)) {
                result = PYGEN_ERROR;
            }
        }
    }
    Py_XDECREF(retval);
    return result == PYGEN_ERROR ? -1 : 0;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, Py_None, &retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX < 0x030A00A3 || !CYTHON_USE_AM_SEND)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = __Pyx_PyIter_Next_Plain(yf);
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 1);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result;
    CYTHON_UNUSED_VAR(arg);
    result = __Pyx_Coroutine_Close(self, &retval);
    if (unlikely(result == PYGEN_ERROR))
        return NULL;
    Py_XDECREF(retval);
    Py_RETURN_NONE;
}
static __Pyx_PySendResult
__Pyx_Coroutine_Close(PyObject *self, PyObject **retval) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PySendResult result;
    PyObject *yf;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    yf = gen->yieldfrom;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    result = __Pyx_Coroutine_SendEx(gen, NULL, retval, 1);
    if (result == PYGEN_ERROR) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_Coroutine_unset_is_running(gen);
        if (!__Pyx_PyErr_Occurred()) {
            return PYGEN_RETURN;
        } else if (likely(__Pyx_PyErr_ExceptionMatches2(PyExc_GeneratorExit, PyExc_StopIteration))) {
            __Pyx_PyErr_Clear();
            return PYGEN_RETURN;
        }
        return PYGEN_ERROR;
    } else if (likely(result == PYGEN_RETURN && *retval == Py_None)) {
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_RETURN;
    } else {
        const char *msg;
        Py_DECREF(*retval);
        *retval = NULL;
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
            msg = "async generator ignored GeneratorExit";
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_ERROR;
    }
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen)))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    yf = gen->yieldfrom;
    if (yf) {
        __Pyx_PySendResult result;
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                goto propagate_exception;
            goto throw_here;
        }
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    __Pyx_Coroutine_unset_is_running(gen);
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        Py_DECREF(yf);
        if (ret) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &ret);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, ret, 0);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
propagate_exception:
    {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, NULL, &retval, 0);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
    }
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    {
        int e = __Pyx_call_type_traverse((PyObject*)gen, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        {
            destructor del = __Pyx_PyObject_GetSlot(gen, tp_del, destructor);
            if (del) del(self);
        }
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
#if CYTHON_USE_TP_FINALIZE
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_Close(self, &retval);
        if (result == PYGEN_ERROR) {
            PyErr_WriteUnraisable(self);
        } else {
            Py_XDECREF(retval);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
}
#endif
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx__Coroutine_get_frame(__pyx_CoroutineObject *self)
{
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyObject *frame;
    #if PY_VERSION_HEX >= 0x030d0000
    Py_BEGIN_CRITICAL_SECTION(self);
    #endif
    frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        PyObject *globals = PyDict_New();
        if (unlikely(!globals)) return NULL;
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            globals,                        /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        Py_DECREF(globals);
        if (unlikely(!frame))
            return NULL;
        if (unlikely(self->gi_frame)) {
            Py_DECREF(frame);
            frame = self->gi_frame;
        } else {
            self->gi_frame = frame;
        }
    }
    Py_INCREF(frame);
    #if PY_VERSION_HEX >= 0x030d0000
    Py_END_CRITICAL_SECTION();
    #endif
    return frame;
#else
    CYTHON_UNUSED_VAR(self);
    Py_RETURN_NONE;
#endif
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context) {
    CYTHON_UNUSED_VAR(context);
    PyObject *frame = self->gi_frame;
    if (frame)
        return __Pyx_NewRef(frame);
    return __Pyx__Coroutine_get_frame(self);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->yieldfrom_am_send = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_LIMITED_API
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    gen->is_running = 1;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen) {
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    assert(gen->is_running);
    gen->is_running = 0;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
}
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure) {
    CYTHON_UNUSED_VAR(closure);
    char result = __Pyx_Coroutine_get_is_running((__pyx_CoroutineObject*)gen);
    if (result) Py_RETURN_TRUE;
    else Py_RETURN_FALSE;
}
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send) {
    Py_ssize_t ptr_offset = (char*)(type->tp_as_async) - (char*)type;
    if (ptr_offset < 0 || ptr_offset > type->tp_basicsize) {
        return;
    }
    memcpy((void*)static_amsend_methods, (void*)(type->tp_as_async), sizeof(*type->tp_as_async));
    static_amsend_methods->am_send = am_send;
    type->tp_as_async = __Pyx_SlotTpAsAsync(static_amsend_methods);
}
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    __Pyx_TypeName self_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE((PyObject*)self));
    PyErr_Format(PyExc_TypeError, "cannot pickle '" __Pyx_FMT_TYPENAME "' object",
                         self_type_name);
    __Pyx_DECREF_TypeName(self_type_name);
    return NULL;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {"__reduce_ex__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_O, 0},
    {"__reduce__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {"gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     PyDoc_STR("object being iterated by 'yield from', or None")},
    {"gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {"__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {"__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     PyDoc_STR("name of the generator"), 0},
    {"__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     PyDoc_STR("qualified name of the generator"), 0},
    {"gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     PyDoc_STR("Frame of the generator"), 0},
    {"gi_running", __Pyx_Coroutine_get_is_running_getter, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) PyObject_GenericGetAttr},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    {Py_am_send, (void *)__Pyx_Coroutine_AmSend},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE | __Pyx_TPFLAGS_HAVE_AM_SEND,
    __pyx_GeneratorType_slots
};
#if __PYX_HAS_PY_AM_SEND == 2
static __Pyx_PyAsyncMethodsStruct __pyx_Generator_as_async;
#endif
static int __pyx_Generator_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_GeneratorType_spec, NULL);
    if (unlikely(!mstate->__pyx_GeneratorType)) {
        return -1;
    }
#if __PYX_HAS_PY_AM_SEND == 2
    __Pyx_SetBackportTypeAmSend(mstate->__pyx_GeneratorType, &__pyx_Generator_as_async, &__Pyx_Coroutine_AmSend);
#endif
    return 0;
}
static PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *retval = NULL;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    __Pyx_Coroutine_unset_is_running(gen);
    (void) result;
    assert (result == PYGEN_RETURN || result == PYGEN_ERROR);
    assert ((result == PYGEN_RETURN && retval != NULL) || (result == PYGEN_ERROR && retval == NULL));
    return retval;
}

/* GeneratorYieldFrom */
#if CYTHON_USE_TYPE_SLOTS
static void __Pyx_PyIter_CheckErrorAndDecref(PyObject *source) {
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(source));
    PyErr_Format(PyExc_TypeError,
        "iter() returned non-iterator of type '" __Pyx_FMT_TYPENAME "'", source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
    Py_DECREF(source);
}
#endif
static CYTHON_INLINE __Pyx_PySendResult __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source, PyObject **retval) {
    PyObject *source_gen;
    __Pyx_PySendResult result;
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(source)) {
        Py_INCREF(source);
        source_gen = source;
        result = __Pyx_Coroutine_AmSend(source, Py_None, retval);
    } else
#endif
    {
#if CYTHON_USE_TYPE_SLOTS
        if (likely(Py_TYPE(source)->tp_iter)) {
            source_gen = Py_TYPE(source)->tp_iter(source);
            if (unlikely(!source_gen)) {
                *retval = NULL;
                return PYGEN_ERROR;
            }
            if (unlikely(!PyIter_Check(source_gen))) {
                __Pyx_PyIter_CheckErrorAndDecref(source_gen);
                *retval = NULL;
                return PYGEN_ERROR;
            }
        } else
#endif
        {
            source_gen = PyObject_GetIter(source);
            if (unlikely(!source_gen)) {
                *retval = NULL;
                return PYGEN_ERROR;
            }
        }
        *retval = __Pyx_PyIter_Next_Plain(source_gen);
        result = __Pyx_Coroutine_status_from_result(retval);
    }
    if (likely(result == PYGEN_NEXT)) {
        __Pyx_Coroutine_Set_Owned_Yield_From(gen, source_gen);
        return PYGEN_NEXT;
    }
    Py_DECREF(source_gen);
    return result;
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C0000
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#elif __PYX_LIMITED_VERSION_HEX > 0x030C0000
    local_value = PyErr_GetRaisedException();
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
#if __PYX_LIMITED_VERSION_HEX > 0x030C0000
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
#else
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
#endif // __PYX_LIMITED_VERSION_HEX > 0x030C0000
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#elif __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    PyErr_SetHandledException(local_value);
    Py_XDECREF(local_value);
    Py_XDECREF(local_type);
    Py_XDECREF(local_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
#if __PYX_LIMITED_VERSION_HEX <= 0x030C0000
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
#endif
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc, *new_exc;
    __Pyx_PyThreadState_declare
    int is_async_stopiteration = 0;
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    __Pyx_PyThreadState_assign
    cur_exc = __Pyx_PyErr_CurrentExceptionType();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else {
            return;
        }
    }
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(tb);
    new_exc = PyObject_CallFunction(PyExc_RuntimeError, "s",
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        "generator raised StopIteration");
    if (!new_exc) {
        Py_XDECREF(val);
        return;
    }
    PyException_SetCause(new_exc, val); // steals ref to val
    PyErr_SetObject(PyExc_RuntimeError, new_exc);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_mstate_global->__pyx_n_u_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyBytes_CheckExact(key) || PyUnicode_CheckExact(key) || PyLong_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyObjectVectorCallMethodKwBuilder */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames) {
    PyObject *result;
    PyObject *obj = PyObject_GetAttr(args[0], name);
    if (unlikely(!obj))
        return NULL;
    result = __Pyx_Object_Vectorcall_CallFromBuilder(obj, args+1, nargsf-1, kwnames);
    Py_DECREF(obj);
    return result;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyUnicode_Check(n)))
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* RaiseUnboundLocalError */
static void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseClosureNameError */
static void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    CYTHON_UNUSED_VAR(is_set);
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || PY_VERSION_HEX >= 0x030d0000 || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        CYTHON_UNUSED_VAR(orig_length);
        CYTHON_UNUSED_VAR(ppos);
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_SIZE
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (unlikely(n < 0)) return -1;
#endif
    for (i = 1; i < n; i++)
    {
        PyTypeObject *b;
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !CYTHON_USE_TYPE_SLOTS
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
CYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {
    while (t) {
        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
        if (bases) {
            return 1;
        }
        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);
    }
    return 0;
}
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (!__Pyx_PyType_HasMultipleInheritance(t)) {
        return PyType_Ready(t);
    }
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\
                !CYTHON_COMPILING_IN_GRAAL
        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i=0;
    Py_ssize_t size;
    void** base_vtables;
    __Pyx_TypeName tp_base_name = NULL;
    __Pyx_TypeName base_name = NULL;
    void* unknown = (void*)-1;
    PyObject* bases = __Pyx_PyType_GetSlot(type, tp_bases, PyObject*);
    int base_depth = 0;
    {
        PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        while (base) {
            base_depth += 1;
            base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
        }
    }
    base_vtables = (void**) PyMem_Malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
#if CYTHON_COMPILING_IN_LIMITED_API
    size = PyTuple_Size(bases);
    if (size < 0) goto other_failure;
#else
    size = PyTuple_GET_SIZE(bases);
#endif
    for (i = 1; i < size; i++) {
        PyObject *basei;
        void* base_vtable;
#if CYTHON_AVOID_BORROWED_REFS
        basei = PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#else
        basei = PyTuple_GET_ITEM(bases, i);
#endif
        base_vtable = __Pyx_GetVtable((PyTypeObject*)basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
            }
        }
    }
    PyErr_Clear();
    PyMem_Free(base_vtables);
    return 0;
bad:
    {
        PyTypeObject* basei = NULL;
        PyTypeObject* tp_base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        tp_base_name = __Pyx_PyType_GetFullyQualifiedName(tp_base);
#if CYTHON_AVOID_BORROWED_REFS
        basei = (PyTypeObject*)PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = (PyTypeObject*)PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#else
        basei = (PyTypeObject*)PyTuple_GET_ITEM(bases, i);
#endif
        base_name = __Pyx_PyType_GetFullyQualifiedName(basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
    }
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
really_bad: // bad has failed!
#endif
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
other_failure:
#endif
    PyMem_Free(base_vtables);
    return -1;
}

/* DelItemOnTypeDict */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_DelItem(tp_dict, k);
    if (likely(!result)) PyType_Modified(tp);
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_mstate_global->__pyx_n_u_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_mstate_global->__pyx_n_u_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython);
            if (likely(reduce_cython)) {
                ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_mstate_global->__pyx_n_u_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetFullyQualifiedName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_1_4
#define __PYX_HAVE_RT_ImportType_3_1_4
static PyTypeObject *__Pyx_ImportType_3_1_4(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_4 check_size)
{
    PyObject *result = 0;
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    if (size == 0) {
        return (PyTypeObject *)result;
    }
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_1_4 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_1_4 && (size_t)basicsize > size) {
        if (PyErr_WarnFormat(NULL, 0,
                "%.200s.%.200s size changed, may indicate binary incompatibility. "
                "Expected %zd from C header, got %zd from PyObject",
                module_name, class_name, size, basicsize) < 0) {
            goto bad;
        }
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ListPack */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...) {
    va_list va;
    PyObject *l = PyList_New(n);
    va_start(va, n);
    if (unlikely(!l)) goto end;
    for (Py_ssize_t i=0; i<n; ++i) {
        PyObject *arg = va_arg(va, PyObject*);
        Py_INCREF(arg);
        if (__Pyx_PyList_SET_ITEM(l, i, arg) != (0)) {
            Py_CLEAR(l);
            goto end;
        }
    }
    end:
    va_end(va);
    return l;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_mstate_global->__pyx_kp_u__10);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
                CYTHON_COMPILING_IN_GRAAL
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
    }
    return value;
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    return __Pyx_NewRef(__pyx_mstate_global->__pyx_d);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PyMethodNew */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {
    PyObject *result;
    CYTHON_UNUSED_VAR(closure);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_doc_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_name_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    Py_INCREF(op->func_qualname);
    result = op->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_dict_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_defaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_kwdefaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_annotations_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {
    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(is_coroutine_value)) {
            return is_coroutine_value;
        }
ignore:
        PyErr_Clear();
    }
    return __Pyx_PyBool_FromLong(is_coroutine);
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    result = __Pyx_CyFunction_get_is_coroutine_value(op);
    if (unlikely(!result))
        return NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    if (op->func_is_coroutine) {
        Py_DECREF(result);
        result = __Pyx_NewRef(op->func_is_coroutine);
    } else {
        op->func_is_coroutine = __Pyx_NewRef(result);
    }
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(args);
    __Pyx_BEGIN_CRITICAL_SECTION(m);
    Py_INCREF(m->func_qualname);
    result = m->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    PyObject *repr;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
    __Pyx_END_CRITICAL_SECTION();
    return repr;
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    if (__Pyx_TypeCheck(method, &PyMethodDescr_Type))
#endif
    {
#if CYTHON_COMPILING_IN_LIMITED_API
        return PyErr_Format(
            PyExc_SystemError,
            "Cython cannot yet handle classmethod on a MethodDescriptorType (%S) in limited API mode. "
            "This is most likely a classmethod in a cdef class method with binding=False. "
            "Try setting 'binding' to True.",
            method);
#elif CYTHON_COMPILING_IN_GRAAL
        PyTypeObject *d_type = PyDescrObject_GetType(method);
        return PyDescr_NewClassMethod(d_type, PyMethodDescrObject_GetMethod(method));
#else
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        PyTypeObject *d_type = descr->d_common.d_type;
        return PyDescr_NewClassMethod(d_type, descr->d_method);
#endif
    }
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
#else
    {
        PyObject *func=NULL;
        PyObject *builtins, *classmethod, *classmethod_str, *result=NULL;
        if (__Pyx_TypeCheck(method, __pyx_mstate_global->__Pyx_CachedMethodType)) {
            func = PyObject_GetAttrString(method, "__func__");
            if (!func) goto bad;
        } else {
            func = method;
            Py_INCREF(func);
        }
        builtins = PyEval_GetBuiltins(); // borrowed
        if (unlikely(!builtins)) goto bad;
        classmethod_str = PyUnicode_FromString("classmethod");
        if (unlikely(!classmethod_str)) goto bad;
        classmethod = PyObject_GetItem(builtins, classmethod_str);
        Py_DECREF(classmethod_str);
        if (unlikely(!classmethod)) goto bad;
        result = PyObject_CallFunctionObjArgs(classmethod, func, NULL);
        Py_DECREF(classmethod);
        bad:
        Py_XDECREF(func);
        return result;
    }
#endif
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_mstate_global->__pyx_n_u_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE val_t __Pyx_PyLong_As_val_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const val_t neg_one = (val_t) -1, const_zero = (val_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        val_t val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (val_t) -1;
        val = __Pyx_PyLong_As_val_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(val_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(val_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) >= 2 * PyLong_SHIFT)) {
                            return (val_t) (((((val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(val_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) >= 3 * PyLong_SHIFT)) {
                            return (val_t) (((((((val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(val_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) >= 4 * PyLong_SHIFT)) {
                            return (val_t) (((((((((val_t)digits[3]) << PyLong_SHIFT) | (val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (val_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(val_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(val_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(val_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(val_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(val_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(val_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (val_t) (((val_t)-1)*(((((val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(val_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (val_t) ((((((val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(val_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (val_t) (((val_t)-1)*(((((((val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(val_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (val_t) ((((((((val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(val_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (val_t) (((val_t)-1)*(((((((((val_t)digits[3]) << PyLong_SHIFT) | (val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(val_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(val_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(val_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (val_t) ((((((((((val_t)digits[3]) << PyLong_SHIFT) | (val_t)digits[2]) << PyLong_SHIFT) | (val_t)digits[1]) << PyLong_SHIFT) | (val_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(val_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(val_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(val_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(val_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        val_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (val_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (val_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (val_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (val_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(val_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((val_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(val_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((val_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((val_t) 1) << (sizeof(val_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (val_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to val_t");
    return (val_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to val_t");
    return (val_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyLong_As_unsigned_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned PY_LONG_LONG) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned PY_LONG_LONG val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned PY_LONG_LONG) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned PY_LONG_LONG) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned PY_LONG_LONG) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned PY_LONG_LONG) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned PY_LONG_LONG) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned PY_LONG_LONG) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned PY_LONG_LONG) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned PY_LONG_LONG) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned PY_LONG_LONG) 1) << (sizeof(unsigned PY_LONG_LONG) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned PY_LONG_LONG) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned PY_LONG_LONG));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum __pyx_t_4ecco_3lrr_3lts_setrel __Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum __pyx_t_4ecco_3lrr_3lts_setrel neg_one = (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1, const_zero = (enum __pyx_t_4ecco_3lrr_3lts_setrel) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        enum __pyx_t_4ecco_3lrr_3lts_setrel val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
        val = __Pyx_PyLong_As_enum____pyx_t_4ecco_3lrr_3lts_setrel(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) >= 2 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) >= 3 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) >= 4 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((enum __pyx_t_4ecco_3lrr_3lts_setrel)-1)*(((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) ((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((enum __pyx_t_4ecco_3lrr_3lts_setrel)-1)*(((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) ((((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) (((enum __pyx_t_4ecco_3lrr_3lts_setrel)-1)*(((((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_4ecco_3lrr_3lts_setrel, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) ((((((((((enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_4ecco_3lrr_3lts_setrel)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_4ecco_3lrr_3lts_setrel, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_4ecco_3lrr_3lts_setrel, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        enum __pyx_t_4ecco_3lrr_3lts_setrel val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() or PyLong_AsNativeBytes() not available, cannot convert large enums");
        val = (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
#endif
        if (unlikely(ret))
            return (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum __pyx_t_4ecco_3lrr_3lts_setrel");
    return (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum __pyx_t_4ecco_3lrr_3lts_setrel");
    return (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum____pyx_t_4ecco_3lrr_3lts_setrel(enum __pyx_t_4ecco_3lrr_3lts_setrel value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum __pyx_t_4ecco_3lrr_3lts_setrel neg_one = (enum __pyx_t_4ecco_3lrr_3lts_setrel) -1, const_zero = (enum __pyx_t_4ecco_3lrr_3lts_setrel) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum __pyx_t_4ecco_3lrr_3lts_setrel));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module_2);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__11);
    }
    goto done;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* NewCodeObj */
#if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030c00A1
    if (likely(result))
        result->_co_firsttraceable = 0;
    #endif
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL
        && !CYTHON_COMPILING_IN_GRAAL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


/* MultiPhaseInitModuleState */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
