#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class rrBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(rrBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class rrParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=rrBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(rrParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa

        def block0():
            self._nl_()
        self._closure(block0)

        def block2():
            self._vdecl_()
        self._positive_closure(block2)
        self.name_last_node('context')

        def block4():
            with self._choice():
                with self._option():
                    self._cdecl_()
                with self._option():
                    self._rdecl_()
                self._error('no available options')
        self._positive_closure(block4)
        self.name_last_node('rules')

        def block6():
            self._nl_()
        self._closure(block6)
        self._check_eof()
        self.ast._define(
            ['context', 'rules'],
            []
        )

    @tatsumasu()
    def _vdecl_(self):  # noqa
        self._word_()
        self.name_last_node('name')
        self._token(':')

        def block1():
            self._nl_()
        self._positive_closure(block1)

        def block3():
            self._varstate_()
            self._token(':')
            self._pattern('.*?$')
            self.name_last_node('description')

            def block5():
                self._nl_()
            self._positive_closure(block5)
        self._positive_closure(block3)
        self.name_last_node('decl')
        self.ast._define(
            ['decl', 'description', 'name'],
            []
        )

    @tatsumasu()
    def _varstate_(self):  # noqa
        self._word_()
        self.name_last_node('variable')
        self._pattern('[+-]')
        self.name_last_node('state')
        self.ast._define(
            ['state', 'variable'],
            []
        )

    @tatsumasu()
    def _word_(self):  # noqa
        self._pattern('[A-Za-z][A-Za-z0-9_]*')

    @tatsumasu()
    def _nl_(self):  # noqa
        self._pattern('\\s*[\\n\\r]\\s*')

    @tatsumasu()
    def _cdecl_(self):  # noqa
        self._token('constraints')
        self._token(':')

        def block0():
            self._nl_()
        self._positive_closure(block0)

        def block2():
            self._rule_()
        self._positive_closure(block2)
        self.name_last_node('rules')
        self.ast._define(
            ['rules'],
            []
        )

    @tatsumasu()
    def _rdecl_(self):  # noqa
        self._token('rules')
        self._token(':')

        def block0():
            self._nl_()
        self._positive_closure(block0)

        def block2():
            self._rule_()
        self._positive_closure(block2)
        self.name_last_node('rules')
        self.ast._define(
            ['rules'],
            []
        )

    @tatsumasu()
    def _rule_(self):  # noqa

        def block0():
            self._token('[')
            self._pattern('[^\\]]+')
            self.name_last_node('label')
            self._token(']')
        self._closure(block0)

        def sep2():
            self._pattern(',')

        def block2():
            self._varstate_()
            self.name_last_node('left')
        self._positive_join(block2, sep2)
        self._token('>>')

        def sep4():
            self._token(',')

        def block4():
            self._varstate_()
            self.name_last_node('right')
        self._positive_join(block4, sep4)

        def block6():
            self._nl_()
        self._positive_closure(block6)
        self.ast._define(
            ['label', 'left', 'right'],
            []
        )

    @tatsumasu()
    def _string_(self):  # noqa
        with self._choice():
            with self._option():
                self._token("'")

                def block0():
                    with self._choice():
                        with self._option():
                            self._token('\\')
                            self._pattern('.')
                        with self._option():
                            self._pattern("[^\\\\\\r\\n\\f']+")
                        self._error('no available options')
                self._closure(block0)
                self._token("'")
            with self._option():
                self._token('"')

                def block2():
                    with self._choice():
                        with self._option():
                            self._token('\\')
                            self._pattern('.')
                        with self._option():
                            self._pattern('[^\\\\\\r\\n\\f"]+')
                        self._error('no available options')
                self._closure(block2)
                self._token('"')
            self._error('no available options')


class rrSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def vdecl(self, ast):  # noqa
        return ast

    def varstate(self, ast):  # noqa
        return ast

    def word(self, ast):  # noqa
        return ast

    def nl(self, ast):  # noqa
        return ast

    def cdecl(self, ast):  # noqa
        return ast

    def rdecl(self, ast):  # noqa
        return ast

    def rule(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = rrParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, rrParser, name='rr')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
