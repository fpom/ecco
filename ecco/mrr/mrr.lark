%import common.WS_INLINE
%declare _INDENT _DEDENT
%ignore WS_INLINE

//%ignore /[ \t\f]+/

start: _NL* [clocks] model _NL*
clocks: "clocks" ":" _NL _INDENT clockdecl+ _DEDENT          -> dictseq
clockdecl: NAME ":" DESC _NL

pattern: _NL* actdecl+ _NL*

model: [variables] location* [constraints] [rules]
variables: "variables" ":" _NL _INDENT vardecl+ _DEDENT      -> sequence
constraints: "constraints" ":" _NL _INDENT actdecl+ _DEDENT  -> sequence
rules: "rules" ":" _NL _INDENT actdecl+ _DEDENT              -> sequence
location: "location" NAME ["[" NAT "]"] ":" _NL _INDENT model _DEDENT

vardecl: type NAME "=" init ":" DESC _NL     -> vardecl_long
    | NAME UNOP ":" DESC _NL                 -> vardecl_short

type: simple_type ["[" NAT "]"]
simple_type: "bool"                   -> type_bool
    | "{" NAME ":" INT ".." INT "}"   -> type_clock
    | "{" INT ".." INT "}"            -> type_interval

init: simple_init ("|" simple_init)*
simple_init: INT [".." INT]                   -> init_int
    | "(" simple_init ("," simple_init)* ")"  -> sequence
    | "*"                                     -> init_all

actdecl: ["[" TAGS "]"] condition ("," condition)* _THEN assignment ("," assignment)* [quantifier] _NL
condition: (var | INT) CMP (var | INT)    -> condition_long
    | var UNOP                            -> condition_short
assignment: var ASSIGN (var | INT | STAR) -> assignment_long
    | var UNOP                            -> assignment_short
var: NAME ["[" intexpr "]"] ["@" atloc]
atloc: AT                      -> at_outer
    | NAME ["[" intexpr "]"]   -> at_inner

quantifier: quant+ ["if" boolexpr] 
quant: "for" QUANTI NAME ("," NAME)*

intexpr: (NAME | INT | BINOP | "(" | ")")+
boolexpr: (NAME | INT | CMP | BINOP | "and" | "or" | "not" | "(" | ")")+

QUANTI: /all|any/

NAME: /[a-z][a-z0-9]*/i
NAT:  /[0-9]+/
INT:  /[+-]?[0-9]+/

_THEN.4: ">>"
CMP.3: ("==" | "<=" | "<" | ">=" | ">" | "!=")
ASSIGN.2: ("+=" | "-=" | "=")
UNOP.1:  ("++" | "--" | "+" | "-" | "*" | "~")
BINOP.1:  ("+" | "-")
AT: "@"
STAR: "*"

TAGS: /[^\]\n\r]+/
DESC: /[^\n\r]+/

_NL: /(\r?\n[\t ]*)+/
